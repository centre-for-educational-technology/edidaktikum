<?php

/**
 * @file
 * eDidaktikum portfolio module.
 */

/**
 * Implements hook_menu().
 */
function ed_q_portfolio_menu() {
  $items['dashboard/qualification_portfolio'] = array(
      'title' => t('Qualification Portfolio'),
      'page callback' => 'ed_q_portfolio_listing_page',
      'access callback' => 'user_is_logged_in',
      'weight' => 5,
      'menu_name' => 'ed-dashboard-menu',
      'type' => MENU_NORMAL_ITEM,
  );


  $items['qualification_portfolio/%ctools_js/%node/%'] = array(
      'page callback' => 'ed_q_portfolio_callback',
      'page arguments' => array(1,2,3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );

  $items['node/%node/cv'] = array(
      'title' => t('Portfolio CV and application'),
      'weight' => 2,
      'page callback' => 'ed_q_portfolio_cv',
      'type' => MENU_LOCAL_TASK,
      'page arguments' => array(1),
      'access callback' => 'ed_q_portfolio_cv_access',
      'access arguments' => array(1),
  );


  $items['qualification_portfolio/status/%ctools_js/%node'] = array(
      'page callback' => 'ed_q_portfolio_status_callback',
      'page arguments' => array(2,3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );

  $items['qualification_portfolio/assessor/%ctools_js/%node'] = array(
      'page callback' => 'ed_q_portfolio_assessor_callback',
      'page arguments' => array(2,3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );


  return $items;
}

/*
 * Portfolio CV and application tab
 */
function ed_q_portfolio_cv_access($node){
  if($node->type != 'ed_q_portfolio'){
    return false;
  }else{
    return true;
  }
}


function ed_q_portfolio_cv($node){
  $content = array();

  $content['container'] = array(
      '#type' => 'container',
      '#attributes' => array(),
      '#prefix' => '<div class="competency-profile-container">',
      '#suffix' => '</div>',
  );


  $content['container']['cv']['name'] = array(
      '#type' => 'markup',
      '#markup' => '<i class="fa fa-user"></i> '.t('CV'),
      '#prefix' => '<label>',
      '#suffix' => '</label>'
  );


  if(!empty($node->ed_q_portfolio_field_cv[LANGUAGE_NONE][0])) {

    $wrapper = entity_metadata_wrapper('node', $node->ed_q_portfolio_field_cv[LANGUAGE_NONE][0]['value']);
    $file_node_file = $wrapper->ed_file_field_file_upload->value();
    $filename = $file_node_file['filename'];
    $uri = $file_node_file['uri'];
    $mime = check_plain($file_node_file['filemime']);
    $icon_url = file_icon_url(file_load($file_node_file['fid']));



    $content['container']['cv']['content'] = array(
        '#type' => 'markup',
        '#markup' => '<p>' . t('Attached file:') .' '. '<img alt="" class="file-icon" src="' . $icon_url . '" title="' . $mime . '" /> ' . l($filename, file_create_url($uri)).'</p></div>',

    );




  }else{

    $content['container']['cv']['content'] = array(
        '#type' => 'markup',
        '#markup' => t("No CV attached"),

    );

  }

  $content['container']['application']['name'] = array(
      '#type' => 'markup',
      '#markup' => '<i class="fa fa-file-text-o"></i> '.t('Application file'),
      '#prefix' => '<label>',
      '#suffix' => '</label>'
  );


  if(!empty($node->ed_q_portfolio_field_application[LANGUAGE_NONE][0])) {

    $wrapper = entity_metadata_wrapper('node', $node->ed_q_portfolio_field_application[LANGUAGE_NONE][0]['value']);
    $file_node_file = $wrapper->ed_file_field_file_upload->value();
    $filename = $file_node_file['filename'];
    $uri = $file_node_file['uri'];
    $mime = check_plain($file_node_file['filemime']);
    $icon_url = file_icon_url(file_load($file_node_file['fid']));



    $content['container']['application']['content'] = array(
        '#type' => 'markup',
        '#markup' => '<br><h2>' . t('Attached file:') .' '. '<img alt="" class="file-icon" src="' . $icon_url . '" title="' . $mime . '" /> ' . l($filename, file_create_url($uri)).'</h2></div></div>',

    );




  }else{

    $content['container']['application']['content'] = array(
        '#type' => 'markup',
        '#markup' => '<p>' . t("No application file attached").'</p>',

    );

  }

  $is_author = null;
  $current_user = ed_q_portfolio_get_current_user();

  if($node->uid == $current_user->uid){
    $is_author = TRUE;
  }else{
    $is_author = FALSE;
  }

  if($is_author) {

    $content['container']['add'] = array(
        '#type' => 'markup',
        '#markup' => '<i class="fa fa-pencil"></i> ' . l(t('Edit or add CV and application'), 'node/' . $node->nid . '/edit'),
        '#prefix' => '<p>',
        '#suffix' => '</p>'

    );
  }


  return $content;
}



/**
 * Ajax menu callback.
 */
function ed_q_portfolio_callback($ajax, $node, $tid) {
//  global $user;
  if ($ajax) {

    ctools_include('ajax');
    ctools_include('modal');



    //Get competence description
    $val = db_select('field_data_ed_q_portfolio_competence_desc', 'f')
        ->fields('f', array('ed_q_portfolio_competence_desc_desc', 'ed_q_portfolio_competence_desc_fid'))
        ->condition('entity_id', $node->nid)
        ->condition('ed_q_portfolio_competence_desc_tid', $tid)
        ->execute()
        ->fetchAll();


    //Get a list of user ed files
    $ed_files = _ed_q_portfolio_get_ed_files_list();

    //Get selected files
    $ed_files_chosen = array();

    if (!empty($val[0]->ed_q_portfolio_competence_desc_fid)){
      $attached_ed_files = json_decode($val[0]->ed_q_portfolio_competence_desc_fid);

      foreach ($attached_ed_files as $key => $value){
        array_push($ed_files_chosen, $value);
      }


    }


    $form_state = array(
        'ajax' => TRUE,
        'text' => !empty($val[0]->ed_q_portfolio_competence_desc_desc) ? $val[0]->ed_q_portfolio_competence_desc_desc : null,
        'ed_file_list' => $ed_files,
        'ed_files_chosen' => !empty($ed_files_chosen) ? $ed_files_chosen : null,
        'title' => '<h3>'.t('Enter Competence Description').'</h3>',
        'node' => $node,
    );

    $form_state['build_info']['args'] = array($node, $tid);

    form_load_include($form_state, 'inc', 'node', 'node.pages');


    // Using ctools to generate ajax instructions for the browser to create
    // a form in a modal popup.
    $output = ctools_modal_form_wrapper('ed_q_portfolio_form', $form_state);

    // If the form has been submitted, there may be additional instructions
    // such as dismissing the modal popup.
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }

    // Return the ajax instructions to the browser via ajax_render().
    print ajax_render($output);
    drupal_exit();

  }
  else {
    return drupal_get_form('ed_q_portfolio_form');
  }

}


/**
 * Drupal form to be put in a modal.
 */
function ed_q_portfolio_form($form, $form_state) {
  $form = array();



  $form['competence_desc'] = array(
      '#type' => 'textarea',
      '#attributes' => array('maxlength' => 2000, 'size' => 200),
      '#rows' => 10,
      '#cols' => 40,
      '#title' => t('Reflection'),
      '#default_value' => !empty($form_state['text'])
          ? $form_state['text']
          : '',
  );

  $form['competence_ed_file'] = array(
      "#type" => "select",
      '#multiple' => TRUE,
      "#title" => t("Evidence"),
      '#default_value' => (isset($form_state['ed_files_chosen']))
          ? $form_state['ed_files_chosen']
          : '',
      '#empty_option' => '--Choose a file--',
      "#options" => $form_state['ed_file_list'],
      "#description" => t("Choose from your files OR"),
  );


  $form['competence_new_ed_file'] = array(
      '#type' => 'managed_file',
      '#title' => t('Evidence'),
      '#description' => t('Upload a new file'),
      '#upload_location' => 'private://ed_file_uploads',
  );

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
//      '#prefix' => '<div class="modal-footer">',
//      '#suffix' => '</div>',
  );


  return $form;
}








/**
 * Ajax menu callback.
 */
function ed_q_portfolio_status_callback($ajax, $node) {
//  global $user;
  if ($ajax) {

    ctools_include('ajax');
    ctools_include('modal');



    $wrapper = entity_metadata_wrapper('node', $node->nid);



    $q_portfolio_status_selected = $wrapper->ed_q_portfolio_field_status->value();


    $form_state = array(
        'ajax' => TRUE,
        'title' => '<h3>'.t('Set Portfolio Status').'</h3>',
        'node' => $node,
        'q_portfolio_status_selected' => !empty($q_portfolio_status_selected)? $q_portfolio_status_selected :null,
    );

    $form_state['build_info']['args'] = array($node);

    form_load_include($form_state, 'inc', 'node', 'node.pages');



    // Use ctools to generate ajax instructions for the browser to create
    // a form in a modal popup.
    $output = ctools_modal_form_wrapper('ed_q_portfolio_status_form', $form_state);

    // If the form has been submitted, there may be additional instructions
    // such as dismissing the modal popup.
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }

    // Return the ajax instructions to the browser via ajax_render().
    print ajax_render($output);
    drupal_exit();

  }
  else {
    return drupal_get_form('mymodule_form');
  }

}


function ed_q_portfolio_assessor_callback($ajax, $node) {
//  global $user;
  if ($ajax) {

    ctools_include('ajax');
    ctools_include('modal');


    $wrapper = entity_metadata_wrapper('node', $node->nid);



    $q_portfolio_accessors_selected = $wrapper->ed_field_to_group_member->value();

    $q_portfolio_accessor_selected_list = array();

    foreach ($q_portfolio_accessors_selected as $q_portfolio_accessor_selected){
      array_push($q_portfolio_accessor_selected_list, $q_portfolio_accessor_selected->uid);
    }



    $form_state = array(
        'ajax' => TRUE,
        'title' => '<h3>'.t('Assign assessors for this portfolio').'</h3>',
        'node' => $node,
        'q_portfolio_accessor_selected' => !empty($q_portfolio_accessor_selected_list)? $q_portfolio_accessor_selected_list :null,
    );

    $form_state['build_info']['args'] = array($node);

    form_load_include($form_state, 'inc', 'node', 'node.pages');



    // Use ctools to generate ajax instructions for the browser to create
    // a form in a modal popup.
    $output = ctools_modal_form_wrapper('ed_q_portfolio_assessor_form', $form_state);

    // If the form has been submitted, there may be additional instructions
    // such as dismissing the modal popup.
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }

    // Return the ajax instructions to the browser via ajax_render().
    print ajax_render($output);
    drupal_exit();

  }
  else {
    return drupal_get_form('mymodule_form');
  }

}


/**
 * Drupal form to be put in a modal.
 */
function ed_q_portfolio_status_form($form, $form_state) {
  $form = array();




  $form['q_portfolio_status'] = array(
      '#type' => 'radios',
      '#title' => t('This portfolio status is:'),
      '#description' => t('Mark your decision about this portfolio.'),
      '#options' => _ed_q_portfolio_status_list(),
      '#default_value' => (isset($form_state['q_portfolio_status_selected']))
          ? $form_state['q_portfolio_status_selected']
          : null,
  );


  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
  );


  return $form;
}

function ed_q_portfolio_assessor_form($form, $form_state) {
  $form = array();




  $form['q_portfolio_assessor'] = array(
      '#type' => 'select',
      '#title' => t('Assign assessors:'),
      '#description' => t('Users of the group Hindajad'),
      '#multiple' => TRUE,
      '#options' => _ed_q_portfolio_assessor_list(),
      '#default_value' => (isset($form_state['q_portfolio_accessor_selected']))
          ? $form_state['q_portfolio_accessor_selected']
          : null,
  );


  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Assign'),
  );


  return $form;
}




///**
// * Implements hook_form_alter().
// */
//function ed_q_portfolio_form_alter(&$form, &$form_state, $form_id) {
//  if ('ed_q_portfolio_node_form' == $form_id) {
//    if (empty($form['#node']->nid)) {
//      drupal_set_title(t('Create Portfolio'));
//    }
//  }
//}

/**
 * Drupal form submit handler.
 */
function ed_q_portfolio_form_submit(&$form, &$form_state) {


  $node = $form_state['build_info']['args'][0]; // 1 is node id we want to load


  $wrapper = entity_metadata_wrapper('node', $node);

  $competences = $wrapper->ed_q_portfolio_competence_desc->raw();

  $tid = $form_state['build_info']['args'][1];
  $desc = $form_state['values']['competence_desc'];

  if(isset($form_state['values']['competence_new_ed_file']) && ($form_state['values']['competence_new_ed_file'])>0) {
    //Uploaded file has priority over file list
    $fid = $form_state['values']['competence_new_ed_file'];


    $file = file_load($fid);



    //Create new ed_file type node

    $ed_file_node = new stdClass();  // Create a new node object
    $ed_file_node->type = 'ed_file';  // Content type
    $ed_file_node->language = LANGUAGE_NONE;  // Or e.g. 'en' if locale is enabled
    node_object_prepare($ed_file_node);  //Set some default values

    $ed_file_node->title = preg_replace('/\\.[^.\\s]{3,4}$/', '', $file->filename);

    $ed_file_node->status = 1;   // (1 or 0): published or unpublished
    $ed_file_node->promote = 1;  // (1 or 0): promoted to front page or not
    $ed_file_node->sticky = 0;  // (1 or 0): sticky at top of lists or not
    $ed_file_node->comment = 1;  // 2 = comments open, 1 = comments closed, 0 = comments hidden
    // Add author of the node
    $ed_file_node->uid = 1;


    // Set file field
    $ed_file_node->ed_file_field_file_upload[LANGUAGE_NONE][] = array(
        'fid' => $file->fid,
        'filename' => $file->filename,
        'filemime' => $file->filemime,
        'uid' => 1,
        'uri' => $file->uri,
        'status' => 1,
        'timestamp' => $file->timestamp,
        'display' => 1
    );


    $path = 'content/'.$file->filename.'-' . date('YmdHis');
    $ed_file_node->path = array('alias' => $path);



    // Save the node
    node_save($ed_file_node);


    $ed_fid = drupal_json_encode($ed_file_node->nid);
  }else if(isset($form_state['values']['competence_ed_file']) && ($form_state['values']['competence_ed_file'])>0 && !($form_state['values']['competence_new_ed_file'])>0){
    $ed_fid = drupal_json_encode($form_state['values']['competence_ed_file']);
  }else{
    $ed_fid = null;
  };



//  //Without wrapper version
//  $competences = $node->ed_q_portfolio_competence_desc[LANGUAGE_NONE];

  if ( isset($competences) && is_array($competences)) {
    $position = null;
    foreach ($competences as $key => $value ) {
      if ( $value['tid'] === $tid ) {
        $position = $key;
        break;
      }
    }

    //Update existing competence
    if ( isset($position)) {
//      $node->ed_q_portfolio_competence_desc[LANGUAGE_NONE][$position]['desc'] = $form_state['values']['competence_desc'];
      $wrapper->ed_q_portfolio_competence_desc[$position]->set(array(
          'tid' => $tid,
          'desc' => $desc,
          'fid' => $ed_fid,
      ));
    } else {
//      $node->ed_q_portfolio_competence_desc[LANGUAGE_NONE][count($node->ed_q_portfolio_competence_desc[LANGUAGE_NONE])] = array(
//          'tid' => $form_state['build_info']['args'][1],
//          'desc' => $form_state['values']['competence_desc'],
//      );
      //Insert to the end of competence list
      $wrapper->ed_q_portfolio_competence_desc[count($competences)]->set(array(
          'tid' => $tid,
          'desc' => $desc,
          'fid' => $ed_fid,
      ));
    }

  } else {
//    $node->ed_q_portfolio_competence_desc[LANGUAGE_NONE][0] = array(
//        'tid' => $form_state['build_info']['args'][1],
//        'desc' => $form_state['values']['competence_desc'],
//    );
    //New list
    $wrapper->ed_q_portfolio_competence_desc[0]->set(array(
        'tid' => $tid,
        'desc' => $desc,
        'fid' => $ed_fid,
    ));
  }



//
//  dpm($wrapper->ed_q_portfolio_competence_desc->raw());
//
//  dpm(_wrapper_debug($wrapper));

  $wrapper->save();


//
//  node_save($node);
//




  // Tell the browser to close the modal.
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();



  $markup = '<div class="competence-desc" id="'.$tid.'">'.$desc;

  if(isset($ed_fid)) {

    $attached_ed_files = json_decode($ed_fid);

    foreach ($attached_ed_files as $attached_ed_file){
      $wrapper = entity_metadata_wrapper('node', $attached_ed_file);
      $node_file = $wrapper->ed_file_field_file_upload->value();
      $filename = $node_file['filename'];
      $uri = $node_file['uri'];
      $mime = check_plain($node_file['filemime']);
      $icon_url = file_icon_url(file_load($node_file['fid']));



      $markup .= '<div>'.t('Attached file:').' '.'<img alt="" class="file-icon" src="' . $icon_url . '" title="' . $mime . '" /> '.l($filename, file_create_url($uri)).' <i class="fa fa-pencil"></i> '.l(t('Edit'), 'node/' . $ed_fid . '/edit').'</div></div>';
      $markup .= '</div>';
    }



  }else{
    $markup = '<div class="competence-desc" id="'.$tid.'">'.$desc;
    $markup .= '</div>';
  }
  $form_state['ajax_commands'][] = ajax_command_html('#'.$tid, $markup);


}



function ed_q_portfolio_status_form_submit(&$form, &$form_state)
{


  $node = $form_state['build_info']['args'][0]; // 1 is node id we want to load



  $q_portfolio_status = $form_state['values']['q_portfolio_status'];

  $wrapper = entity_metadata_wrapper('node', $node->nid);


  $wrapper->ed_q_portfolio_field_status->set($q_portfolio_status);

  $wrapper->save();

  // Tell the browser to close the modal.
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();


  $statuses_list = _ed_q_portfolio_status_list();

  $form_state['ajax_commands'][] = ajax_command_replace('#q-portfolio-status', '<p id="q-portfolio-status">'.$statuses_list[$q_portfolio_status].'</p>');




}


function ed_q_portfolio_assessor_form_submit(&$form, &$form_state)
{


  $node = $form_state['build_info']['args'][0]; // 1 is node id we want to load

  $q_portfolio_assessors = $form_state['values']['q_portfolio_assessor'];

//  dpm($q_portfolio_assessors);

  $q_portfolio_assessor_reference = array();

  foreach ($q_portfolio_assessors as $q_portfolio_assessor){
    array_push($q_portfolio_assessor_reference, array('target_id'=>$q_portfolio_assessor));
  }

  $wrapper = entity_metadata_wrapper('node', $node->nid);



  $wrapper->ed_field_to_group_member->set($q_portfolio_assessor_reference);

  $wrapper->save();



  $q_portfolio_status = 0;

  $wrapper = entity_metadata_wrapper('node', $node->nid);


  $wrapper->ed_q_portfolio_field_status->set($q_portfolio_status);

  $wrapper->save();



  // Tell the browser to close the modal.
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();


  $assessor_list = _ed_q_portfolio_assessor_list();

  $assessors_markup = '';

  foreach ($q_portfolio_assessors as $q_portfolio_assessor){
    $assessors_markup .= '<p id="q-portfolio-assessor">'.$assessor_list[$q_portfolio_assessor].'</p>';

  }


  $form_state['ajax_commands'][] = ajax_command_html('#q-portfolio-assessor', $assessors_markup);


  $statuses_list = _ed_q_portfolio_status_list();
  $form_state['ajax_commands'][] = ajax_command_replace('#q-portfolio-status', '<p id="q-portfolio-status">'.$statuses_list[$q_portfolio_status].'</p>');




}

function _wrapper_debug($w) {
  $values = array();
  foreach ($w->getPropertyInfo() as $key => $val) {
    $values[$key] = $w->$key->value();
  }
  return $values;
}


/*
 * Implements hook_field_info
 */

function ed_q_portfolio_field_info() {
  return array (
      'ed_q_portfolio_competence_desc' => array (
          'label' => t('Competence description'),
          'description' => t('This field stores competence description'),
          'default_widget' => 'ed_q_portfolio_competence_desc_widget',
          'default_formatter' => 'ed_q_portfolio_competence_desc_default',
          'property_type' => 'ed_q_portfolio_competence_desc', // we add the propert type here
          'property_callbacks' => array('ed_q_portfolio_competence_desc_property_info_callback'), // we add the callback
      ),
  );
}

function ed_q_portfolio_competence_desc_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];

  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  unset($property['query callback']);

  $property['property info']['tid'] = array(
      'type' => 'integer',
      'label' => t('tid'),
      'setter callback' => 'entity_property_verbatim_set',
  );
  $property['property info']['desc'] = array(
      'type' => 'text',
      'label' => t('desc'),
      'setter callback' => 'entity_property_verbatim_set',
  );
}

/**
 * Implements hook_field_widget_info().
 */
function ed_q_portfolio_field_widget_info() {
  return array(
      'ed_q_portfolio_competence_desc_widget' => array(
          'label' => t('Default'),
          'field types' => array('ed_q_portfolio_competence_desc'),
      ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function ed_q_portfolio_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $element['tid'] = array(
      '#type' => 'textfield',
      '#title' => t('Taxonomy id'),
      '#required' => $element['#required'],
      '#size' => 7,
      '#attributes' => array('maxlength' => 7),
  );
  $element['desc'] = array(
      '#type' => 'textfield',
      '#title' => t('Competence desc'),
      '#required' => $element['#required'],
      '#size' => 2000,
      '#attributes' => array('maxlength' => 2000),
  );
//      break;
//  }
  return $element;
}


/*
 * Implements hook_field_is_empty().
 */
//function ed_q_portfolio_field_is_empty($item, $field) {
//  if (empty($item['desc'])) {
//    return TRUE;
//  }
//  return FALSE;
//}

function ed_q_portfolio_field_is_empty($item, $field) {
  $temp = array_keys($field['columns']);
  $key = array_shift($temp);
  return empty($item[$key]);
}

/**
 * Implements hook_field_validate().
 */
function ed_q_portfolio_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // Loop through field items in the case of multiple values.
  foreach ($items as $delta => $item) {
    if (isset($item['desc']) && $item['desc'] != '') {
      if (strlen($item['desc']) > 2000) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'ed_q_portfolio_invalid_full',
            'message' => t('%title: Competence description cannot be empty', array('%title' => $instance['label'])),
        );
      }
    }
  }

}

/**
 * Implements hook_field_formatter_info().
 */
function ed_q_portfolio_field_formatter_info() {
  return array(
      'ed_q_portfolio_competence_desc_default' => array(
          'label' => t('Default'),
          'field types' => array('ed_q_portfolio_competence_desc'),
      ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ed_q_portfolio_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'ed_q_portfolio_competence_desc_default' :
      foreach ($items as $delta => $item) {
        if (isset($item['tid'])) {
          $element[$delta]['#markup'] = $item['tid'] . ' ' . $item['desc'];
        }
      }
      break;
  }
  return $element;
}

function _ed_q_portfolio_field_level_list(){
  $vocab = taxonomy_vocabulary_machine_name_load('ed_competence_voc');
  $vid = $vocab->vid;
  $query = db_select('taxonomy_term_data', 't');
  $query->join('taxonomy_term_hierarchy', 'n', 'n.tid = t.tid');
  $results = $query
      ->fields('t', array('tid', 'name'))
      ->condition("n.parent", 0)
      ->condition("t.vid", $vid)
      ->execute();

  $options = array();
  foreach($results as $term) {
    $options[$term->tid] = t($term->name);
  }
  return $options;
}


function _ed_q_portfolio_status_list(){
  $options = array(
      '0' => t('Under review'),
      '1' => t('Accepted'),
  );
  return $options;
}

function _ed_q_portfolio_assessor_list(){

  $assessorGroupNode = null;

  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node', 'title')
      ->entityCondition('bundle', 'ed_cluster')
      ->propertyCondition('title', 'Hindajad', '=')
      ->execute();



  if(!empty($entities)){

    foreach($entities['node'] as $groupnode){
      $assessorGroupNode = $groupnode;
    }

  }


  $assessorGroupUsersIds = og_get_group_members_properties($assessorGroupNode, array(), 'members__' . OG_STATE_ACTIVE, 'node');

  $assessorGroupUsers = user_load_multiple($assessorGroupUsersIds);



  $options = array();

  foreach ($assessorGroupUsers as $user) {

    $options[$user->uid] = t($user->ed_field_full_name[LANGUAGE_NONE][0]['value']);

  }


  return $options;
}

/*
 * Get list options of ed_file files
 */
function _ed_q_portfolio_get_ed_files_list(){
  $header = array(
      array(
          'data' => '',
      ),
      array(
          'data' => t('Title'),
          'field' => 'n.title',
          'sort' => 'asc',
      ),
      array(
          'data' => t('Type'),
      ),
      array(
          'data' => t('Changed'),
          'field' => 'n.changed',
          'sort' => 'desc',
      ),
      array(
          'data' => '',
      ),
  );

  $files = ed_file_get_all_files_and_folders($header, true);



  $ed_files = array();

  foreach ($files as $file) {

    if($file->type == 'ed_file'){
      $ed_files[$file->nid] = t($file->title);
    }
  }

  return $ed_files;
}



/*
 * Implements hook_form_alter()
 */

function ed_q_portfolio_form_alter(&$form, &$form_state, $form_id) {

  if ('ed_q_portfolio_node_form' == $form_id) {
    $form['ed_q_portfolio_competence_desc']['#access'] = 0;
    $form['ed_q_portfolio_field_status']['#access'] = 0;
    $form['ed_field_to_group_member']['#access'] = 0;
    $form['og_group_ref']['#access'] = 0;
    $form['options']['status']['#default_value'] = 0;

    //Hide unnecessary options
    $form['revision_information']['#access'] = FALSE;
    $form['#after_build'][] = 'custom_after_build';
    $form['comment_settings']['#access'] = FALSE;
    $form['author']['#access'] = FALSE;
    $form['translations']['#access'] = FALSE;
    $form['metatags']['#access'] = FALSE;
    $form['options']['#type'] = 'list';
    $form['options']['promote']['#access'] = FALSE;
    $form['options']['sticky']['#access'] = FALSE;



    $add_file_url = l(t('file'), 'node/add/ed-file');

    $form['add-new-container'] = array(
        '#type' => 'container',
        '#attributes' => array(
            'class' => array('ed-add-new-node', 'ed-add-new-ed-file', 'ed-add-new-ed-folder'),
        ),
        '#weight' => $form['ed_q_portfolio_field_application']['#weight']+1,
    );

    $form['add-new-container']['add-new'] = array(
        '#type' => 'markup',
        '#markup' => t('Upload a new CV or application !file', array('!file' => $add_file_url)),

    );
  }



}

function custom_after_build($form, &$form_state) {
  $form['path']['#access'] = FALSE;
  $form['menu']['#access'] = FALSE;
  return ($form);
}

/**
 * Portfolios listing page.
 */
function ed_q_portfolio_listing_page(){
  ctools_include('modal');
  ctools_modal_add_js();

  menu_tree_set_path('main-menu', 'dashboard');
  //drupal_add_css('ul.links.inline {display: none;}', array('group' => CSS_THEME, 'type' => 'inline'));
  $content = array();

  $content['add-new-container'] = array(
      '#type' => 'container',
      '#attributes' => array(
          'class' => array('ed-add-new-node', 'ed-add-new-ed-portfolio'),
      ),
  );
  $content['add-new-container']['add-new-portfolio'] = array(
      '#type' => 'link',
      '#title' => t('Add new portfolio'),
      '#href' => 'node/add/ed-q-portfolio',
  );

  $table_type = 'pager-table';
  $user_portfolio_ids = ed_q_portfolio_get_user_portfolios();
  //$user_portfolio_ids = array();
  $nodes = node_load_multiple($user_portfolio_ids);
  $rows = array();
  foreach($nodes as $node){
    if($node->status=='1'){
      if(!empty($node->ed_q_portfolio_field_status)){

        $statuses_list = _ed_q_portfolio_status_list();

        $status = '<span class="pub-portfolio">'.$statuses_list[$node->ed_q_portfolio_field_status[LANGUAGE_NONE][0]['value']].'</span>';
      }else {
        $status = '<span class="pub-portfolio">' . t('Published, not reviewed') . '</span>';
      }
    }else if($node->status=='0'){
      $status = '<span class="priv-portfolio">'.t('Not Published').'</span>';
    }else{
      $status = t('error');
    }
    $rows[] = array(
        'data' => array(
            'status' => $status,
            'title' => l($node->title, 'node/'.$node->nid),
            'created' => format_date($node->created, 'custom', 'd/m/Y'),
        ),
    );
  }
  $content[$table_type] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => array(t('Status'), t('Title'), t('Date')),
  );
  $content['pager'] = array('#theme' => 'pager');

  drupal_add_css('span.pub-portfolio {color:green;}', array('group' => CSS_THEME, 'type' => 'inline'));
  drupal_add_css('span.priv-portfolio {color:red;}', array('group' => CSS_THEME, 'type' => 'inline'));


  return $content;
}

/**
 * User portfolio ids.
 */
function ed_q_portfolio_get_user_portfolios() {
  global $user;
  $query = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.type', 'ed_q_portfolio')
      ->condition('n.uid', $user->uid)
      ->addTag('node_access')
      ->range()
      ->orderBy('n.created', 'DESC');
  $nids = $query->execute()->fetchCol();
  return $nids;
}


/**
 * Implements hook_node_load().
 */
function ed_q_portfolio_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    $node->comment = COMMENT_NODE_CLOSED; // to close comments
  }
}


/**
 * Implements hook_field_extra_fields().
 */
function ed_q_portfolio_field_extra_fields(){
  $extra['node']['ed_q_portfolio']['display'] = array(
      'ed_q_portfolio_level' => array(
          'label' => t('Qualification level container'),
          'description' => t('Qualification level container'),
          'weight' => 10,
      ),
  );
  return $extra;
}

function ed_q_portfolio_get_current_user() {
  global $user;
  return $user;
}

/**
 * Implements hook_node_view().
 */
function ed_q_portfolio_node_view($node, $view_mode, $langcode) {

  $current_user = ed_q_portfolio_get_current_user();

  if ('ed_q_portfolio' == $node->type) {
    hide($node->content['ed_q_portfolio_competence_desc']);
    hide($node->content['ed_q_portfolio_field_status']);
    hide($node->content['ed_field_to_group_member']);
    hide($node->content['og_group_ref']);
    $node->content['ed_field_content']['#object']->picture['#access']=false;


    // Load the modal library and add the modal javascript.
    ctools_include('modal');
    ctools_modal_add_js();

    // Create our own javascript that will be used to theme a modal.
    $modal_style = array(
        'competence-modal-style' => array(
            'modalSize' => array(
                'type' => 'scale',
                'width' => 0.75,
                'height' => 0.75,
                'addWidth' => 10,
                'addHeight' => 10,
                'contentRight' => 0,
                'contentBottom' => 0,
            ),
            'modalOptions' => array(
                'opacity' => .6,
                'background-color' => '#000',
            ),
            'animation' => 'fadeIn',
          // Customize the AJAX throbber like so:
          // This function assumes the images are inside the module directory's "images"
          // directory:
          // ctools_image_path($image, $module = 'ctools', $dir = 'images')
//            'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'happy'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
//            'closeImage' => theme('image', array('path' => ctools_image_path('modal-close.png', 'happy'), 'alt' => t('Close window'), 'title' => t('Close window'))),
        ),
    );
    // Add the settings array defined above to Drupal 7's JS settings:
    drupal_add_js($modal_style, 'setting');




    // Create our own javascript that will be used to theme a modal.
    $modal_style_status = array(
        'status-modal-style' => array(
            'modalSize' => array(
                'type' => 'scale',
                'width' => 0.4,
                'height' => 0.4,
                'addWidth' => 10,
                'addHeight' => 10,
                'contentRight' => 0,
                'contentBottom' => 0,
            ),
            'modalOptions' => array(
                'opacity' => .6,
                'background-color' => '#000',
            ),
            'animation' => 'fadeIn',
          // Customize the AJAX throbber like so:
          // This function assumes the images are inside the module directory's "images"
          // directory:
          // ctools_image_path($image, $module = 'ctools', $dir = 'images')
//            'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'happy'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
//            'closeImage' => theme('image', array('path' => ctools_image_path('modal-close.png', 'happy'), 'alt' => t('Close window'), 'title' => t('Close window'))),
        ),
    );
    // Add the settings array defined above to Drupal 7's JS settings:
    drupal_add_js($modal_style_status, 'setting');

    ctools_modal_add_js();
    if (in_array($view_mode, array('full'))) {
      $field_level = $node->ed_q_portfolio_field_level;


      $term = taxonomy_term_load($field_level[LANGUAGE_NONE][0]['value']);


      $is_author = null;


      if($node->uid == $current_user->uid){
        $is_author = TRUE;
      }else{
        $is_author = FALSE;
      }


      $node->content['ed_q_portfolio_level'] = array(
          '#type' => 'item',
          '#label_display' => 'above',
          '#markup' => ed_q_portfolio_vocabulary_tree(taxonomy_vocabulary_machine_name_load('ed_competence_voc')->vid, $node->nid, $term->tid, $is_author),
      );

      $change_date = format_date($node->changed, 'medium');
      $created_date = format_date($node->created, 'small');
      $user = user_load($node->uid);

      $user_name = l(edidaktikum_get_full_name_for_user_account($user), 'user/' . $user->uid);


      $node->content['info'] = array(
          '#prefix' => '<div class="container-fluid well q-portfolio">',
          '#suffix' => '</div>'
      );

      $node->content['info']['title'] = array(
          '#markup' => '<i class="fa fa-info"></i> '.t("Portfolio details"),
          '#prefix' => '<h3 class="q-portfolio-info">',
          '#suffix' => '</h3>'
      );

      $node->content['info']['author'] = array(
          '#markup' => t("Portfolio author:").' '.$user_name,
          '#prefix' => '<p>',
          '#suffix' => '</p>'
      );

      $node->content['info']['changed-date'] = array(
          '#markup' => t("Last modified:").' '.$change_date,
          '#prefix' => '<p>',
          '#suffix' => '</p>'
      );

      $node->content['info']['created'] = array(
          '#markup' => t("Portfolio created:").' '.$created_date,
          '#prefix' => '<p>',
          '#suffix' => '</p>'
      );



      $node->content['info']['status']['title'] = array(
          '#markup' => '<i class="fa fa-lightbulb-o"></i> '.t("Portfolio status"),
          '#prefix' => '<h3>',
          '#suffix' => '</h3>'
      );




      if($node->status=='1'){
        if(!empty($node->ed_q_portfolio_field_status)){

          $statuses_list = _ed_q_portfolio_status_list();

          $node->content['info']['status']['value'] = array(
              '#markup' => $statuses_list[$node->ed_q_portfolio_field_status[LANGUAGE_NONE][0]['value']],
              '#prefix' => '<p id="q-portfolio-status">',
              '#suffix' => '</p>'
          );

        }else {
          $node->content['info']['status']['value'] = array(
              '#markup' => t('Published, not reviewed'),
              '#prefix' => '<p id="q-portfolio-status">',
              '#suffix' => '</p>'
          );
        }
      }else if($node->status=='0') {

        $node->content['info']['status']['value'] = array(
            '#markup' => t('Not Published'),
            '#prefix' => '<p id="q-portfolio-status">',
            '#suffix' => '</p>'
        );
      }


      $is_assessor=null;

      $query = new EntityFieldQuery();
      $entities = $query->entityCondition('entity_type', 'node', 'title')
          ->entityCondition('bundle', 'ed_cluster')
          ->propertyCondition('title', 'Hindajad', '=')
          ->execute();



      if(!empty($entities)){

        foreach($entities['node'] as $groupnode){
          if (og_is_member('node', $groupnode->nid)) {
            drupal_set_message(t('You are logged in as an assessor.'));
            $is_assessor = TRUE;
          }
        }

      }

      if($is_assessor) {

        $node->content['info']['status']['set'] = array(
            '#markup' => l(t("Set portfolio status"), 'qualification_portfolio/status/nojs/' . $node->nid, array('attributes' => (array('class' => array('ctools-use-modal', 'ctools-modal-status-modal-style'))))),
        );

      }


      $node->content['info']['assessor']['title'] = array(
          '#markup' => '<i class="fa fa-users"></i> '.t("Portfolio assessors"),
          '#prefix' => '<h3>',
          '#suffix' => '</h3>'
      );

      if(!empty($node->ed_field_to_group_member)){

        $assessor_list = _ed_q_portfolio_assessor_list();

        $assessors = $node->ed_field_to_group_member[LANGUAGE_NONE];

        $assessors_markup = array();

        foreach ($assessors as $assessor){
          array_push($assessors_markup, array(
              '#markup' => $assessor_list[$assessor['target_id']],
              '#prefix' => '<p id="q-portfolio-assessor">',
              '#suffix' => '</p>'
          ));

        }

        $node->content['info']['assessor']['value'] = $assessors_markup;

      }else {
        $node->content['info']['assessor']['value'] = array(
            '#markup' => t('No assessors assigned currently'),
            '#prefix' => '<p id="q-portfolio-assessor">',
            '#suffix' => '</p>'
        );
      }

      if($is_assessor){
        $node->content['info']['assessor']['set'] = array(
            '#markup' => l(t("Assign assessors"), 'qualification_portfolio/assessor/nojs/' . $node->nid, array('attributes' => (array('class' => array('ctools-use-modal', 'ctools-modal-status-modal-style'))))),
        );

      }




//      Metadata wrapper alternative
//
//      $usergroups = og_get_groups_by_user();
//
//      if(!empty($usergroups)) {
//
//        foreach ($usergroups['node'] as $usergroup) {
//          $wrapper = entity_metadata_wrapper('node', $usergroup);
//
//          //User belongs to the assessment team
//          if ($wrapper->title->value() == 'Hindajad') {
//            $node->content['status'] = array(
//                '#markup' => l("Set portfolio status", 'ed_q_portfolio/status/nojs/' . $node->nid, array('attributes' => array('class' => 'ctools-use-modal'))),
//                '#prefix' => '<div id="q_portfolio_status">',
//                '#suffix' => '</div>',
//                '#weight' => $node->content['ed_q_portfolio_field_status']['#weight'] + 1,
//            );
//            break;
//          }
//        }
//      }





      drupal_add_js(drupal_get_path('module', 'ed_q_portfolio') . '/js/ed_q_portfolio.js', 'file');


    }
  }


  if($view_mode == 'teaser'){
    if(in_array($node->type, array('ed_q_portfolio'))){
      $type = $node->type=='ed_q_portfolio' ? $type = t('Qualification Portfolio') : node_type_get_name($node->type);
      $author = user_load($node->uid);
      $userfullname = edidaktikum_get_full_name_for_user_account($author);

      $statuses_list = _ed_q_portfolio_status_list();

      if(!empty($node->ed_q_portfolio_field_status)) {
        $status = $statuses_list[$node->ed_q_portfolio_field_status[LANGUAGE_NONE][0]['value']];
      }else{
        $status = t('Published, not reviewed');
      }


      if(!empty($node->ed_field_to_group_member)) {
        $assessor = '';

        $portfolio_assessors = $node->ed_field_to_group_member[LANGUAGE_NONE];

        foreach ($portfolio_assessors as $portfolio_assessor){
          $assessor_user = user_load($portfolio_assessor['target_id']);


          $wrapper = entity_metadata_wrapper('user', $assessor_user);

          $assessor .= '<div class="assigned"><i class="fa fa-check"></i> '.t('Assigned to ').l($wrapper->ed_field_full_name->value(), '/user/'.$wrapper->uid->value()).'</div>';
        }



      }else{
        $assessor = '<div class="not-assigned"><i class="fa fa-times"></i> '.t('Not assigned ').l('Assign assessors', 'node/'.$node->nid).'</div>';
      }




      $parts = array(
          $type.t(' by '),
          l($userfullname, 'user/' . $author->uid).t(' published on '),
          format_date($node->created, 'short').'.',
          '<div class="q-portfolio-status">'.$status.'</div>',
          $assessor,
      );
      $node->content['metadata'] = array(
          '#type' => 'markup',
          '#weight' => 50,
          '#markup' => implode(' ', $parts),
          '#prefix' => '<div class="description">',
          '#suffix' => '</div>',
      );
    }
  }
}


function ed_q_portfolio_vocabulary_tree($vid, $nid, $tid, $is_author) {
  $depth = 0;
  $num_at_depth = 0;
  $tree = taxonomy_get_tree($vid, $tid);

  //Get descriptions
  $descriptions = db_select('field_data_ed_q_portfolio_competence_desc', 'f')
      ->fields('f', array('ed_q_portfolio_competence_desc_tid', 'ed_q_portfolio_competence_desc_desc', 'ed_q_portfolio_competence_desc_fid'))
      ->condition('entity_id', $nid)
//          ->condition('ed_q_portfolio_competence_desc_tid', $tid)
      ->execute()
      ->fetchAll();





  if(!empty($tree)) {

    $markup = "<div class=\"accordion\"><ol class=\"termlist\">\n<li class=\"term open title\">";

    //Description
    foreach ($tree as $term) {
      $term_description = "";

      $mime = null;
      $icon_url = null;
      $filename = null;
      $uri = null;
      $file_node_id = null;
      $attached_files_markup = null;
      foreach($descriptions as $description) {


        if ($description->ed_q_portfolio_competence_desc_tid == $term->tid){

          if($description->ed_q_portfolio_competence_desc_fid) {

            $attached_ed_files = drupal_json_decode($description->ed_q_portfolio_competence_desc_fid);

            foreach ($attached_ed_files as $attached_ed_file){

              $wrapper = entity_metadata_wrapper('node', $attached_ed_file);
              $file_node_id = $wrapper->nid->value();
              $file_node_file = $wrapper->ed_file_field_file_upload->value();
              $filename = $file_node_file['filename'];
              $uri = $file_node_file['uri'];
              $mime = check_plain($file_node_file['filemime']);
              $icon_url = file_icon_url(file_load($file_node_file['fid']));


              $attached_files_markup .= '<br>'.t('Attached file:').' '.'<img alt="" class="file-icon" src="' . $icon_url . '" title="' . $mime . '" /> '.l($filename, file_create_url($uri)).' <i class="fa fa-pencil"></i> '.l(t('Edit'), 'node/' . $file_node_id . '/edit');
            }





          }

          $term_description = $description->ed_q_portfolio_competence_desc_desc;

          break;
        }
      }

      if ($term->depth > $depth) {
        $markup .= "\n<ul>\n<li class=\"term open\">";
        $depth = $term->depth;
        $num_at_depth = 0;
      }
      if ($term->depth < $depth) {
        $diffdepth = $depth - $term->depth;
        while ($diffdepth > 0) {
          $markup .= "</li>\n</ul>\n";
          $diffdepth--;
        }
        $depth = $term->depth;
      }
      if (($term->depth == $depth) && ($num_at_depth > 0)) {
        $markup .= "</li>\n<li class=\"term open title\">";
      }

      if($depth>0) {
        if($is_author) {

          $markup .= ed_q_portfolio_build_term($term->name, $nid, $term->tid, $term_description, $attached_files_markup);
        }else{
          $markup .= ed_q_portfolio_build_term_no_link($term->name, $nid, $term->tid, $term_description, $attached_files_markup);
        }
      }else{
        $markup .= ed_q_portfolio_build_term_section_title($term->name, $term->tid);
      }
      $num_at_depth++;
    }
    $markup .= "</li>\n</ol>\n</div>\n";

  }else{
    $markup = t("No taxonomy terms for this level added.");
  }
  return $markup;
}


function ed_q_portfolio_build_term($name, $nid, $tid, $term_description, $attached_files_markup) {


  $markup = '<div class="competence">'.l($name, 'qualification_portfolio/nojs/'.$nid.'/'.$tid, array('attributes' => (array('class' => array('termtext accordion-section-title', 'ctools-use-modal', 'ctools-modal-competence-modal-style'), 'data-tid' => $tid)))).
      ' <i class="fa fa-chevron-up"></i></div><div class="competence-desc" id="'.$tid.'">'.$term_description;
  if($attached_files_markup){
    $markup .= $attached_files_markup.'</div>';
  }

  return $markup;
}


function ed_q_portfolio_build_term_no_link($name, $nid, $tid, $term_description, $attached_files_markup) {


  $markup = '<div class="competence highlight">'.t($name).
      ' <i class="fa fa-chevron-up"></i></div><div class="competence-desc" id="'.$tid.'">'.$term_description;
  if($attached_files_markup){
    $markup .= $attached_files_markup.'</div>';
  }

  return $markup;
}


function ed_q_portfolio_build_term_section_title($name, $tid) {

  $markup = '<h2 class="competence section-title">'.t($name).
      ' <i class="fa fa-chevron-up"></i></h2><div class="competence-desc" id="'.$tid.'">';


  return $markup;
}

/*
 * Implements hook_node_presave
 */
function ed_q_portfolio_node_presave($node){

  if ('ed_q_portfolio' == $node->type) {


    if (empty($node->og_group_ref)) {
      //Get Assessors group
      $assessorGroupNode = null;

      $query = new EntityFieldQuery();
      $entities = $query->entityCondition('entity_type', 'node', 'title')
          ->entityCondition('bundle', 'ed_cluster')
          ->propertyCondition('title', 'Hindajad', '=')
          ->execute();


      if (!empty($entities)) {

        foreach ($entities['node'] as $groupnode) {
          $assessorGroupNode = $groupnode;
        }

      }


      $q_portfolio_assessors_group_reference[] = array(
          'target_id' => $assessorGroupNode->nid,
      );

      $node->og_group_ref[LANGUAGE_NONE] = $q_portfolio_assessors_group_reference;

    }
  }

}




///**
// * Implements hook_preprocess_node().
// */
//function ed_q_portfolio_preprocess_node(&$vars) {
//  dpm($vars);
//}



//
//function ed_q_portfolio_theme($existing, $type, $theme, $path) {
//  return array(
//    'ed_q_portfolio_page' => array(
//      'variables' => array('node_view' => '', 'site_name' => variable_get('site_name', 'Drupal'), 'front_page' => variable_get('site_frontpage')),
//      'template' => 'ed_q_portfolio_page',
//      'path' => drupal_get_path('module', 'ed_q_portfolio'),
//      'render element' => 'element',
//    ),
//  );
//}
//
//
//
///**
// * Implements hook_ctools_plugin_api().
// */
//function ed_q_portfolio_ctools_plugin_api() {
//  list($module, $api) = func_get_args();
//  if ($module == "page_manager" && $api == "pages_default") {
//    return array("version" => "1");
//  }
//}
//
//
//
///**
// * Implements hook_views_api().
// */
//function ed_q_portfolio_views_api() {
//  return array(
//    'api' => 3,
//    'path' => drupal_get_path('module', 'ed_q_portfolio') . '/includes/views',
//  );
//}
//
///**
// * Implements hook_form_alter().
// */
//function ed_q_portfolio_form_alter(&$form, &$form_state, $form_id) {
//  if ('ed_q_portfolio_node_form' == $form_id) {
//    if (empty($form['#node']->nid)) {
//      drupal_set_title(t('Create Portfolio'));
//    }
//  }
//}
