<?php

/**
 * @file
 * eDidaktikum portfolio module.
 */

/**
 * Implements hook_menu().
 */
function ed_q_portfolio_menu() {
  $items['dashboard/qualification_portfolio'] = array(
    'title' => t('Qualification Portfolio'),
    'page callback' => 'ed_q_portfolio_listing_page',
    'access callback' => 'user_is_logged_in',
    'weight' => 5,
    'menu_name' => 'ed-dashboard-menu',
    'type' => MENU_NORMAL_ITEM,
  );


  $items['ed_q_portfolio/%ctools_js/%node/%'] = array(
      'page callback' => 'ed_q_portfolio_callback',
      'page arguments' => array(1,2,3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );


  return $items;
}


/**
 * Helper function to make a link.
 */
function ed_q_portfolio_make_link($link_text = '') {
  // Set a default value if no text in supplied.
  if (empty($link_text)) {
    $link_text = 'Magical Modal';
  }

  return '<div id="magical-modal-link">' . l($link_text, 'ed_q_portfolio/nojs', array('attributes' => array('class' => 'ctools-use-modal'))) . '</div>';
}



//function ed_form_tase($form, &$form_state) {
//
//  $form["tase_select"] = array(
//      "#type" => "select",
//      "#title" => t("Mis on sinu tase"),
//      "#default_value" => variable_get("tase_select", "tase1"),
//      "#options" => array(
//          "tase1" => t("Tase 1"),
//          "tase2" => t("Tase 2"),
//          "tase3" => t("Tase 3"),
//      ),
//      "#description" => t("Vali taset"),
//  );
//
//  $form['submit_button'] = array(
//      '#type' => 'submit',
//      '#value' => t('Click Here!'),
//  );
//
//  return $form;
//}
//
//function ed_form_tase_validate($form, &$form_state) {
//  if (!($form_state['values']['price'] > 0)){
//    form_set_error('price', t('Price must be a positive number.'));
//  }
//}
//
//function ed_form_tase_submit($form, &$form_state) {
//}


//function get_all_leaves(&$leaves, $term){
//  if (isset($term->children)) {
//    foreach($term->children as $child) {
//      get_all_leaves($leaves, $child);
//    }
//  } else {
//    $leaves[$term->tid] = $term;
//  }
//}
//
//
///**
// *
// * @param type $vocabulary - Competence vocabulary with term->done = true as acquired competence
// * @return type array - Full competency profile
// */
//function _ed_get_competency_profile($vocabulary){
//
//  $profile = array();
//  return $profile;
//}
//
//
//
/**
 * https://api.drupal.org/comment/50023#comment-50023
 */
//function taxonomy_get_nested_tree($vid_or_terms = array(), $max_depth = NULL, $parent = 0, $parents_index = array(), $depth = 0) {
//
//  if (!is_array($vid_or_terms)) {
//    $vid_or_terms = taxonomy_get_tree($vid_or_terms);
//  }
//
//  foreach ($vid_or_terms as $term) {
//
//    foreach ($term->parents as $term_parent) {
//      if ($term_parent == $parent) {
//        $return[$term->tid] = $term;
//      }
//      else {
//        $parents_index[$term_parent][$term->tid] = $term;
//      }
//    }
//  }
//
//  foreach ($return as &$term) {
//    if (isset($parents_index[$term->tid]) && (is_null($max_depth) || $depth < $max_depth)) {
//      $term->children = taxonomy_get_nested_tree($parents_index[$term->tid], $max_depth, $term->tid, $parents_index, $depth + 1);
//    }
//  }
//
//  return $return;
//}

/**
 * Ajax menu callback.
 */
function ed_q_portfolio_callback($ajax, $node, $tid) {
//  global $user;
  if ($ajax) {

    ctools_include('ajax');
    ctools_include('modal');



    $val = db_select('field_data_ed_q_portfolio_competence_desc', 'f')
        ->fields('f', array('ed_q_portfolio_competence_desc_desc'))
        ->condition('entity_id', $node->nid)
        ->condition('ed_q_portfolio_competence_desc_tid', $tid)
        ->execute()
        ->fetchField();

    $form_state = array(
        'ajax' => TRUE,
        'text' => $val,
        'title' => t('Enter Competence Description'),
        'node' => $node,
    );

    $form_state['build_info']['args'] = array($node, $tid);

    form_load_include($form_state, 'inc', 'node', 'node.pages');


//    $value = $node->ed_q_portfolio_competence_desc[$node->language][0]['value'];

    // Use ctools to generate ajax instructions for the browser to create
    // a form in a modal popup.
    $output = ctools_modal_form_wrapper('ed_q_portfolio_form', $form_state);

    // If the form has been submitted, there may be additional instructions
    // such as dismissing the modal popup.
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }

    // Return the ajax instructions to the browser via ajax_render().
    print ajax_render($output);
    drupal_exit();

//
//    ctools_include('node.pages', 'node', '');
//    ctools_include('modal');
//    ctools_include('ajax');
//
//    // Create a blank node object here.
//    $node = (object) array(
//        'uid' => $user->uid,
//        'name' => (isset($user->name) ? $user->name : ''),
//        'type' => 'psuedo_portfolio',
//        'language' => LANGUAGE_NONE,
//    );
//
//    $form_state = array(
//        'ajax' => TRUE,
//        'text' => "hello",
//        'title' => t('Enter Competence Description'),
//        'node' => $node,
//    );
//    $form_state['build_info']['args'] = isset($form_state['build_info']['args']) ? $form_state['build_info']['args'] : array($node);
//    form_load_include($form_state, 'inc', 'node', 'node.pages');
//    drupal_add_library('system', 'ui.dialog');
//    // change this to your type node form
//    $output = ctools_modal_form_wrapper('ed_q_portfolio_form', $form_state);
//
//    // This means the form has been exectued
//    if (!empty($form_state['executed'])) {
//      $output = array();
//      // Close the modal
//      $output[] = ctools_modal_command_dismiss();
//    }
//
//    print ajax_render($output);
//    exit;
  }
  else {
    return drupal_get_form('mymodule_form');
  }

}


/**
 * Drupal form to be put in a modal.
 */
function ed_q_portfolio_form($form, $form_state) {
  $form = array();



  $form['competence_desc'] = array(
      '#type' => 'textarea',
      '#attributes' => array('maxlength' => 2000, 'size' => 200),
      '#title' => t('Reflection'),
      '#default_value' => !empty($form_state['text'])
          ? $form_state['text']
          : '',
  );


  $form['competence_file'] = array(
      '#type' => 'managed_file',
      '#title' => t('Evidence'),
      '#description' => t('The uploaded image will be displayed on this page using the image style choosen below.'),
      '#upload_location' => 'private://ed_file_uploads',
  );

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
  );


  return $form;
}

///**
// * Implements hook_form_alter().
// */
//function ed_q_portfolio_form_alter(&$form, &$form_state, $form_id) {
//  if ('ed_q_portfolio_node_form' == $form_id) {
//    if (empty($form['#node']->nid)) {
//      drupal_set_title(t('Create Portfolio'));
//    }
//  }
//}

/**
 * Drupal form submit handler.
 */
function ed_q_portfolio_form_submit(&$form, &$form_state) {

//  // Generate the new link using the submitted text value.
//  $link = ed_q_portfolio_make_link($form_state['build_info']['args'][0]);
//
//
//
////  $link = ed_q_portfolio_make_link($form_state['values']['new_link_text']);
//
//
  $node = $form_state['build_info']['args'][0]; // 1 is node id we want to load


//  $file = $form_state['values']['competence_file'];
//  // We are done with the file, remove it from storage.
//  unset($form_state['values']['competence_file']);
//  // Make the storage of the file permanent.
//  $file->status = FILE_STATUS_PERMANENT;
//  // Save file status.
//  file_save($file);
//  // Set a response to the user.
//  drupal_set_message(t('The form has been submitted and the image has been saved, filename: @filename.', array('@filename' => $file->filename)));
//
////
//// Change field value
//  $node->ed_q_portfolio_competence_desc[$node->language][0]['value'] = 'glebcom';
//
//  dpm($node->ed_q_portfolio_competence_desc);
//
//
//// Get the numeric id of your field by passing field name
//  $info = field_info_field('ed_q_portfolio_competence_desc');
//  $fields = array($info['id']);
//
//// Execute the storage function
//  field_sql_storage_field_storage_write('node', $node, 'update', $fields);
//
//// Clear field cache
//  cache_clear_all("field:node:$node->nid", 'cache_field');
//

  /*
  $nid = db_insert('field_data_ed_q_portfolio_competence_desc')
      ->fields(array(
          'entity_type' => 'node',
          'bundle' => 'ed_q_portfolio',
          'deleted' => 0,
          'entity_id' => $node->nid,
          'revision_id' => $node->nid,
          'language' => LANGUAGE_NONE,
          'delta' => 0,
          'ed_q_portfolio_competence_desc_tid' => $form_state['build_info']['args'][1],
          'ed_q_portfolio_competence_desc_desc' => $form_state['values']['competence_desc'],
      ))
      ->execute();
  */



  $wrapper = entity_metadata_wrapper('node', $node);

  $competences = $wrapper->ed_q_portfolio_competence_desc->raw();

  $tid = $form_state['build_info']['args'][1];
  $desc = $form_state['values']['competence_desc'];
  $fid = $form_state['values']['competence_file'];


  $file = file_load($fid);

  dpm($file);

  //Create new ed_file type node

  $ed_file_node = new stdClass();  // Create a new node object
  $ed_file_node->type = 'ed_file';  // Content type
  $ed_file_node->language = LANGUAGE_NONE;  // Or e.g. 'en' if locale is enabled
  node_object_prepare($ed_file_node);  //Set some default values

  $ed_file_node->title = preg_replace('/\\.[^.\\s]{3,4}$/', '', $file->filename);

  $ed_file_node->status = 1;   // (1 or 0): published or unpublished
  $ed_file_node->promote = 1;  // (1 or 0): promoted to front page or not
  $ed_file_node->sticky = 0;  // (1 or 0): sticky at top of lists or not
  $ed_file_node->comment = 1;  // 2 = comments open, 1 = comments closed, 0 = comments hidden
// Add author of the node
  $ed_file_node->uid = 1;


//  //Set file field
//  $ed_file_node->ed_file_field_file_upload[LANGUAGE_NONE][0] = (array) $file;

//
//  $ed_file_node->ed_file_field_file_upload[LANGUAGE_NONE][0] = array(
//      'fid' => $file->fid,
//    //'alt' => $node->title,
//    //'title' => $node->title,
//      'uid' => '1',
//      'filename' => $file->filename,
//      'uri' => $file->uri,
//      'filemime' => $file->filemime,
//      'filesize'=> $file->filesize,
//      'status' => '1',
//  );


  $ed_file_node->ed_file_field_file_upload[LANGUAGE_NONE][] = array(
      'fid' => $file->fid,
      'filename' => $file->filename,
      'filemime' => $file->filemime,
      'uid' => 1,
      'uri' => $file->uri,
      'status' => 1,
      'timestamp' => $file->timestamp,
      'display' => 1
  );


  $path = 'content/'.$file->filename.'-' . date('YmdHis');
  $ed_file_node->path = array('alias' => $path);



// Save the node
  node_save($ed_file_node);







//  //Without wrapper version
//  $competences = $node->ed_q_portfolio_competence_desc[LANGUAGE_NONE];

  if ( isset($competences) && is_array($competences)) {
    $position = null;
    foreach ($competences as $key => $value ) {
      if ( $value['tid'] === $tid ) {
        $position = $key;
        break;
      }
    }

    //Update existing competence
    if ( isset($position) ) {
//      $node->ed_q_portfolio_competence_desc[LANGUAGE_NONE][$position]['desc'] = $form_state['values']['competence_desc'];
      $wrapper->ed_q_portfolio_competence_desc[$position]->set(array(
          'tid' => $tid,
          'desc' => $desc,
      ));
    } else {
//      $node->ed_q_portfolio_competence_desc[LANGUAGE_NONE][count($node->ed_q_portfolio_competence_desc[LANGUAGE_NONE])] = array(
//          'tid' => $form_state['build_info']['args'][1],
//          'desc' => $form_state['values']['competence_desc'],
//      );
      //Insert to the end of competence list
      $wrapper->ed_q_portfolio_competence_desc[count($competences)]->set(array(
          'tid' => $tid,
          'desc' => $desc,
      ));
    }

  } else {
//    $node->ed_q_portfolio_competence_desc[LANGUAGE_NONE][0] = array(
//        'tid' => $form_state['build_info']['args'][1],
//        'desc' => $form_state['values']['competence_desc'],
//    );
    //New list
    $wrapper->ed_q_portfolio_competence_desc[0]->set(array(
        'tid' => $tid,
        'desc' => $desc,
    ));
  }



//
//  dpm($wrapper->ed_q_portfolio_competence_desc->raw());
//
//  dpm(_wrapper_debug($wrapper));

  $wrapper->save();


//
//  node_save($node);
//




  // Tell the browser to close the modal.
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();

  // Tell the browser to replace the old link with the new one.

  $form_state['ajax_commands'][] = ajax_command_replace('#'.$tid, '<div class="competence-desc" id="'.$tid.'">'.$desc.'</div>');
}

function _wrapper_debug($w) {
  $values = array();
  foreach ($w->getPropertyInfo() as $key => $val) {
    $values[$key] = $w->$key->value();
  }
  return $values;
}


/*
 * Implements hook_field_info
 */

function ed_q_portfolio_field_info() {
  return array (
  'ed_q_portfolio_competence_desc' => array (
  'label' => t('Competence description'),
      'description' => t('This field stores competence description'),
      'default_widget' => 'ed_q_portfolio_competence_desc_widget',
      'default_formatter' => 'ed_q_portfolio_competence_desc_default',
      'property_type' => 'ed_q_portfolio_competence_desc', // we add the propert type here
      'property_callbacks' => array('ed_q_portfolio_competence_desc_property_info_callback'), // we add the callback
    ),
  );
}

function ed_q_portfolio_competence_desc_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];

  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  unset($property['query callback']);

  $property['property info']['tid'] = array(
      'type' => 'integer',
      'label' => t('tid'),
      'setter callback' => 'entity_property_verbatim_set',
  );
  $property['property info']['desc'] = array(
      'type' => 'text',
      'label' => t('desc'),
      'setter callback' => 'entity_property_verbatim_set',
  );
}

/**
 * Implements hook_field_widget_info().
 */
function ed_q_portfolio_field_widget_info() {
  return array(
      'ed_q_portfolio_competence_desc_widget' => array(
          'label' => t('Default'),
          'field types' => array('ed_q_portfolio_competence_desc'),
      ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function ed_q_portfolio_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
//  switch ($instance['widget']['type']) {
//    case 'ed_q_portfolio_competence_desc_widget' :
//      $element['competence_desc'] = array(
//          '#type' => 'fieldset',
//          '#title' => $element['#title'],
//          '#tree' => TRUE,
//      );
      $element['tid'] = array(
          '#type' => 'textfield',
          '#title' => t('Taxonomy id'),
          '#required' => $element['#required'],
          '#size' => 7,
          '#attributes' => array('maxlength' => 7),
      );
      $element['desc'] = array(
          '#type' => 'textfield',
          '#title' => t('Competence desc'),
          '#required' => $element['#required'],
          '#size' => 2000,
          '#attributes' => array('maxlength' => 2000),
      );
//      break;
//  }
  return $element;
}


/*
 * Implements hook_field_is_empty().
 */
//function ed_q_portfolio_field_is_empty($item, $field) {
//  if (empty($item['desc'])) {
//    return TRUE;
//  }
//  return FALSE;
//}

function ed_q_portfolio_field_is_empty($item, $field) {
  $temp = array_keys($field['columns']);
  $key = array_shift($temp);
  return empty($item[$key]);
}

/**
 * Implements hook_field_validate().
 */
function ed_q_portfolio_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // Loop through field items in the case of multiple values.
  foreach ($items as $delta => $item) {
    if (isset($item['desc']) && $item['desc'] != '') {
      if (strlen($item['desc']) > 2000) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'ed_q_portfolio_invalid_full',
            'message' => t('%title: Competence description cannot be empty', array('%title' => $instance['label'])),
        );
      }
    }
  }

}

/**
 * Implements hook_field_formatter_info().
 */
function ed_q_portfolio_field_formatter_info() {
  return array(
      'ed_q_portfolio_competence_desc_default' => array(
          'label' => t('Default'),
          'field types' => array('ed_q_portfolio_competence_desc'),
      ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ed_q_portfolio_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'ed_q_portfolio_competence_desc_default' :
      foreach ($items as $delta => $item) {
        if (isset($item['tid'])) {
          $element[$delta]['#markup'] = $item['tid'] . ' ' . $item['desc'];
        }
      }
      break;
  }
  return $element;
}

function _ed_q_portfolio_field_level_list(){
  $vocab = taxonomy_vocabulary_machine_name_load('ed_competence_voc');
  $vid = $vocab->vid;
  $query = db_select('taxonomy_term_data', 't');
  $query->join('taxonomy_term_hierarchy', 'n', 'n.tid = t.tid');
  $results = $query
      ->fields('t', array('tid', 'name'))
      ->condition("n.parent", 0)
      ->condition("t.vid", $vid)
      ->execute();

  $options = array();
  foreach($results as $term) {
    $options[$term->tid] = t($term->name);
  }
  return $options;
}

/*
 * Implements hook_form_alter()
 */

function ed_q_portfolio_form_alter(&$form, &$form_state, $form_id) {

  if ('ed_q_portfolio_node_form' == $form_id) {
    $form['ed_q_portfolio_competence_desc']['#access'] = 0;
//    $form['additional_settings']['#access'] = FALSE;

//    dpm(taxonomy_vocabulary_machine_name_load('ed_competence_voc'));

//    dpm(_ed_bookmark_type_list());
//
//    $vocab = taxonomy_vocabulary_machine_name_load('ed_competence_voc');
//    $vid = $vocab->vid;
//    $query = db_select('taxonomy_term_data', 't');
//    $query->join('taxonomy_term_hierarchy', 'n', 'n.tid = t.tid');
//    $results = $query
//        ->fields('t', array('tid', 'name'))
//        ->condition("n.parent", 0)
//        ->condition("t.vid", $vid)
//        ->execute();
//
//    $options = array();
//    foreach($results as $term) {
//      $options[$term->tid] = t($term->name);
//    }
//    dpm($options);

  }



}

/**
 * Portfolios listing page.
 */
function ed_q_portfolio_listing_page(){
  ctools_include('modal');
  ctools_modal_add_js();

  menu_tree_set_path('main-menu', 'dashboard');
  //drupal_add_css('ul.links.inline {display: none;}', array('group' => CSS_THEME, 'type' => 'inline'));
  $content = array();

  $content['add-new-container'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('ed-add-new-node', 'ed-add-new-ed-portfolio'),
    ),
  );
  $content['add-new-container']['add-new-portfolio'] = array(
    '#type' => 'link',
    '#title' => t('Add new portfolio'),
    '#href' => 'node/add/ed-q-portfolio',
  );

  $table_type = 'pager-table';
  $user_portfolio_ids = ed_q_portfolio_get_user_portfolios();
  //$user_portfolio_ids = array();
  $nodes = node_load_multiple($user_portfolio_ids);
  $rows = array();
  foreach($nodes as $node){
    if($node->status=='1'){
      $status = '<span class="pub-portfolio">'.t('Public').'</span>';
    }else if($node->status=='0'){
      $status = '<span class="priv-portfolio">'.t('Private').'</span>';
    }else{
      $status = t('error');
    }
    $rows[] = array(
      'data' => array(
        'status' => $status,
        'title' => l($node->title, 'node/'.$node->nid),
        'created' => format_date($node->created, 'custom', 'd/m/Y'),
      ),
    );
  }
  $content[$table_type] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#header' => array(t('Status'), t('Title'), t('Date')),
  );
  $content['pager'] = array('#theme' => 'pager');

  drupal_add_css('span.pub-portfolio {color:green;}', array('group' => CSS_THEME, 'type' => 'inline'));
  drupal_add_css('span.priv-portfolio {color:red;}', array('group' => CSS_THEME, 'type' => 'inline'));


  return $content;
}

/**
 * User portfolio ids.
 */
function ed_q_portfolio_get_user_portfolios() {
  global $user;
  $query = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.type', 'ed_q_portfolio')
      ->condition('n.uid', $user->uid)
      ->addTag('node_access')
      ->range()
      ->orderBy('n.created', 'DESC');
  $nids = $query->execute()->fetchCol();
  return $nids;
}


/**
 * Implements hook_node_load().
 */
function ed_q_portfolio_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    $node->comment = COMMENT_NODE_CLOSED; // to close comments
  }
}


/**
 * Implements hook_field_extra_fields().
 */
function ed_q_portfolio_field_extra_fields(){
  $extra['node']['ed_q_portfolio']['display'] = array(
      'ed_q_portfolio_level' => array(
          'label' => t('Qualification level container'),
          'description' => t('Qualification level container'),
          'weight' => 10,
      ),
  );
  return $extra;
}

/**
 * Implements hook_node_view().
 */
function ed_q_portfolio_node_view($node, $view_mode, $langcode) {
  if ('ed_q_portfolio' == $node->type) {

    hide($node->content['ed_q_portfolio_competence_desc']);


    // Load the modal library and add the modal javascript.
    ctools_include('modal');
    ctools_modal_add_js();
    if (in_array($view_mode, array('full'))) {
      $field_level = $node->ed_q_portfolio_field_level;


      $term = taxonomy_term_load($field_level[LANGUAGE_NONE][0]['value']);


      $node->content['ed_q_portfolio_level'] = array(
          '#type' => 'item',
          '#label_display' => 'above',
          '#markup' => ed_q_portfolio_vocabulary_tree(taxonomy_vocabulary_machine_name_load('ed_competence_voc')->vid, $node->nid, $term->tid),
      );



      drupal_add_js(drupal_get_path('module', 'ed_q_portfolio') . '/js/ed_q_portfolio.js', 'file');


//      drupal_add_css(drupal_get_path('module', 'ed_q_portfolio') . '/js/custom.css', 'file');


      //$name = $term->name;




//      $field_end = $node->ed_event_field_end[LANGUAGE_NONE][0];
//      $node->content['start-end-dates'] = array(
//          '#type' => 'container',
//          '#attributes' => array(
//              'class' => array('submitted'),
//          ),
//          '#weight' => -1,
//      );
//      $node->content['start-end-dates']['start'] = array(
//          '#type' => 'markup',
//          '#markup' => vsprintf("%s - %s", array(
//              format_date($field_start['value'], 'short', '', $field_start['timezone']),
//              format_date($field_end['value'], 'short', '', $field_end['timezone']),
//          )),
//          '#prefix' => '<span>',
//          '#suffix' => '</span>',
//      );
    }
  }
}


function ed_q_portfolio_vocabulary_tree($vid, $nid, $tid) {
  $depth = 0;
  $num_at_depth = 0;
  $tree = taxonomy_get_tree($vid, $tid);

  //Get descriptions
  $descriptions = db_select('field_data_ed_q_portfolio_competence_desc', 'f')
      ->fields('f', array('ed_q_portfolio_competence_desc_tid', 'ed_q_portfolio_competence_desc_desc'))
      ->condition('entity_id', $nid)
//          ->condition('ed_q_portfolio_competence_desc_tid', $tid)
      ->execute()
      ->fetchAll();





  if(!empty($tree)) {

    $markup = "<div class=\"accordion\"><ul class=\"termlist\">\n<li class=\"term open\">";

    //Description
    foreach ($tree as $term) {
      $term_description = "";
      foreach($descriptions as $description) {
        if ($description->ed_q_portfolio_competence_desc_tid == $term->tid){
          $term_description = $description->ed_q_portfolio_competence_desc_desc;
          break;
        }
      }

      if ($term->depth > $depth) {
        $markup .= "\n<ul>\n<li class=\"term open\">";
        $depth = $term->depth;
        $num_at_depth = 0;
      }
      if ($term->depth < $depth) {
        $diffdepth = $depth - $term->depth;
        while ($diffdepth > 0) {
          $markup .= "</li>\n</ul>\n";
          $diffdepth--;
        }
        $depth = $term->depth;
      }
      if (($term->depth == $depth) && ($num_at_depth > 0)) {
        $markup .= "</li>\n<li class=\"term open\">";
      }
      $markup .= ed_q_portfolio_build_term($term->name, $nid, $term->tid, $term_description);
      $num_at_depth++;
    }
    $markup .= "</li>\n</ul>\n</div>\n";

  }else{
    $markup = "No taxonomy terms for this level added.";
  }
  return $markup;
}


function ed_q_portfolio_build_term($name, $nid, $tid, $term_description) {
//  $count = db_query("SELECT COUNT(nid) FROM {taxonomy_index} WHERE tid IN (:tids) ", array(':tids' => implode(',', $tids)))->fetchField();
  $markup = '<div class="competence">'.l($name, 'ed_q_portfolio/nojs/'.$nid.'/'.$tid, array('attributes' => (array('class' => array('termtext accordion-section-title', 'ctools-use-modal'), 'data-tid' => $tid)))).' <i class="fa fa-chevron-up"></i></div><div class="competence-desc" id="'.$tid.'">'.$term_description.'</div>';

//  $markup = "<span>" . $name . "<span>";
  return $markup;
}




///**
// * Implements hook_preprocess_node().
// */
//function ed_q_portfolio_preprocess_node(&$vars) {
//  dpm($vars);
//}



//
//function ed_q_portfolio_theme($existing, $type, $theme, $path) {
//  return array(
//    'ed_q_portfolio_page' => array(
//      'variables' => array('node_view' => '', 'site_name' => variable_get('site_name', 'Drupal'), 'front_page' => variable_get('site_frontpage')),
//      'template' => 'ed_q_portfolio_page',
//      'path' => drupal_get_path('module', 'ed_q_portfolio'),
//      'render element' => 'element',
//    ),
//  );
//}
//
//
//
///**
// * Implements hook_ctools_plugin_api().
// */
//function ed_q_portfolio_ctools_plugin_api() {
//  list($module, $api) = func_get_args();
//  if ($module == "page_manager" && $api == "pages_default") {
//    return array("version" => "1");
//  }
//}
//
//
//
///**
// * Implements hook_views_api().
// */
//function ed_q_portfolio_views_api() {
//  return array(
//    'api' => 3,
//    'path' => drupal_get_path('module', 'ed_q_portfolio') . '/includes/views',
//  );
//}
//
///**
// * Implements hook_form_alter().
// */
//function ed_q_portfolio_form_alter(&$form, &$form_state, $form_id) {
//  if ('ed_q_portfolio_node_form' == $form_id) {
//    if (empty($form['#node']->nid)) {
//      drupal_set_title(t('Create Portfolio'));
//    }
//  }
//}

