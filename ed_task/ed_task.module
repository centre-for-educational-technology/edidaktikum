<?php

require_once('ed_task_functions.inc');

/**
 * Implements hook_info().
 */
function ed_task_node_info() {
  $items['ed_task'] = array(
    'name' => t('Task/Assignment'),
    'type' => 'ed_task',
    'base' => 'node_content',
    'description' => t('Description2'),
    'has_title' => '1',
    'title_label' => t('Title'),
    'body_label' => t('body_label'),
  );
  return $items;
}


/**
 * Implements hook_form().
 */
function ed_task_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

function _ed_task_menu_title() {
  $unanswered_tasks_count = _ed_get_user_unanswered_tasks_count($GLOBALS['user']);
  if ($unanswered_tasks_count > 0) {
    return t('Tasks (@count)', array('@count' => $unanswered_tasks_count));
  }
  return t('Tasks');
}

/**
 * Implements hook_menu().
 */
function ed_task_menu(){
  $items['dashboard/tasks'] = array(
    'title' => 'Tasks',
    'title callback' => '_ed_task_menu_title',
    'page callback' => 'ed_task_listing_page',
    'access callback' => 'user_is_logged_in',
    //'access callback' => TRUE,
    'weight' => 15,
    'menu_name' => 'ed-dashboard-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function ed_task_listing_page() {
  menu_tree_set_path('main-menu', 'dashboard');
  drupal_add_css(drupal_get_path('module', 'ed_cluster').'/task_manager.css');
  //XXX do not use global $user
  global $user;
  
  $account = user_load($user->uid);  
  $groups = og_get_entity_groups();
  
  if(empty($groups)){
    $content['groups-not-found'] = array(
      '#type' => 'markup',
      '#prefix' => '<div class="ed-message ed-message-notice">',
      '#markup' => t('Hi! Nothing to show here at the moment. Join some group to see latest updates from it.'),
      '#suffix' => '</div>',
    );
    return $content;
  }else{ 
    $content = array();
    $table_suffix = 1;

    if (node_access('create', 'ed_task')) {
      $content['add-new-container'] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('ed-add-new-node', 'ed-add-new-ed-task'),
        ),
      );
      $content['add-new-container']['add-task'] = array(
        '#type' => 'link',
        '#title' => t('Add new task'),
        '#href' => 'node/add/ed-task',
      );
    }

    $table_type = 'pager_table';




    // Tasks that are made by the logged in user.
    $nodes = _ed_get_cur_user_tasks();

    if ( !empty($nodes) ) {
      foreach($nodes as $node) {      
        if(isset($node->{ED_FIELD_TO_GROUP_MEMBER}['und']['0']['target_id']) && !isset($node->{ED_FIELD_TO_GROUP_MEMBER}['und']['1']['target_id'])) {
          $owner = user_load($node->{ED_FIELD_TO_GROUP_MEMBER}['und']['0']['target_id']);
          $username = ", ".$owner->name;
        }
        elseif(isset($node->{ED_FIELD_TO_GROUP_MEMBER}['und']['1']['target_id'])){
          $owner = user_load($node->{ED_FIELD_TO_GROUP_MEMBER}['und']['0']['target_id']);
          $username = ", ".$owner->name."...";
        }
        else{
          $username = '';
        }

        //$datehelp = strtotime($node->ed_task_due_date['und']['0']['value']);
        if( isset($node->og_group_ref['und']['0']['target_id']) ){
          $shared_to = $node->og_group_ref['und']['0']['target_id'];
        } else {
          $shared_to = '';
        }
        $group_title = _ed_get_group_name_from_id($shared_to);
        $due_date_field = field_get_items('node', $node, 'ed_task_due_date');
        $rows[] = array(
          'data' => array(
            'title' => l($node->title, 'node/' . $node->nid),
            'shared_to' => t(l($group_title, 'node/' . $shared_to).$username),
            //'due_date' => format_date($datehelp, 'custom','d/m/Y'),
            'due_date' => format_date($due_date_field[0]['value'],'custom','d/m/Y'),          
          ),
        );
      }

      $content[$table_type.'-'.$table_suffix] = array(
        '#theme' => 'table',
        '#rows' => $rows,
        '#header' => array(t('Tasks by me'), t('Shared To'), t('Due Date')),
      );
      $content['pager'] = array('#theme' => 'pager');
    }



    $per_page = ed_get_paging_nr();
    $touser = _ed_get_tasks_to_user();  
    if(!empty($touser)){
      foreach($touser as $key => $value){
        $tousernids[] = (string)$key;
      }
    }

    $togroups = _ed_get_group_tasks();
    if(isset($tousernids)){
      $tasknidstouser = array_merge($tousernids, $togroups);
      $tasknidstouser = array_unique($tasknidstouser);
    }else{
      $tasknidstouser = $togroups;
    }


    $tasknodes = node_load_multiple($tasknidstouser);

    uasort($tasknodes, function($a, $b) {
      $ats = $a->ed_task_due_date[LANGUAGE_NONE][0]['value'];
      $bts = $b->ed_task_due_date[LANGUAGE_NONE][0]['value'];
      if ($ats == $bts) return 0;
      return ($ats < $bts) ? -1 : 1;
    });
    $tasknodesgroupedbystatus = array();
    foreach($tasknodes as $key => $tasknode){
      if(_is_task_answered($tasknode->nid)){
        $tmp_answer_nid = _ed_get_answer_nid($user->uid, $tasknode->nid);
        $answernode = node_load($tmp_answer_nid[0]);
        if($answernode->status == 0){
          $tasknodesgroupedbystatus['unanswered'][$key] = $tasknode;     
        }else{      
          $status = _ed_check_if_accepted($tmp_answer_nid[0]);
          if(empty($status)){
            $tasknodesgroupedbystatus['unchecked'][$key] = $tasknode;
          }else{
            switch($status[0]){
              case 'rejected':
                $tasknodesgroupedbystatus['rejected'][$key] = $tasknode;
                break;
              case 'unchecked':
                $tasknodesgroupedbystatus['unchecked'][$key] = $tasknode;
                break;
              case 'accepted':
                $tasknodesgroupedbystatus['accepted'][$key] = $tasknode;
                break;
            }
          }
        }
      }else{
        if (!empty($tasknode->{ED_FIELD_TO_GROUP_MEMBER}[LANGUAGE_NONE]) && !in_array($user->uid, array_map(function($element) { return $element['target_id']; }, $tasknode->{ED_FIELD_TO_GROUP_MEMBER}[LANGUAGE_NONE]))) {
          // do nothing
        }else{
          $tasknodesgroupedbystatus['unanswered'][$key] = $tasknode;        
        }
      }
    }
    
    
    
    if(isset($tasknodesgroupedbystatus['unanswered'])){
      $tasknodesgroupedbystatussorted[0] = $tasknodesgroupedbystatus['unanswered'];
    }
    if(isset($tasknodesgroupedbystatus['rejected'])){
      $tasknodesgroupedbystatussorted[1] = $tasknodesgroupedbystatus['rejected'];
    }
    if(isset($tasknodesgroupedbystatus['unchecked'])){
      $tasknodesgroupedbystatussorted[2] = $tasknodesgroupedbystatus['unchecked'];
    }
    if(isset($tasknodesgroupedbystatus['accepted'])){
      $tasknodesgroupedbystatussorted[3] = $tasknodesgroupedbystatus['accepted'];
    }
        
    $tasknodessorted = call_user_func_array('array_merge', $tasknodesgroupedbystatussorted);
    
    
    
    foreach($tasknodessorted as $key => $tasknode){
      if(!ed_task_can_user_answer_task($tasknode, $user)){
        unset($tasknodessorted[$key]);
      }
    }
    
    $current_page = pager_default_initialize(count($tasknodessorted), $per_page, 2);
    
    $chunks = array_chunk($tasknodessorted, $per_page, TRUE);
    
    
    foreach($chunks[$current_page] as $tasknode){
      $shared_to_arr = array();
      if( isset($tasknode->og_group_ref[LANGUAGE_NONE]['0']['target_id']) ){
        foreach($tasknode->og_group_ref[LANGUAGE_NONE] as $targetgroup){
          $group_title = _ed_get_group_name_from_id($targetgroup['target_id']);
          $shared_to_arr[] = l($group_title, 'node/' . $targetgroup['target_id']);
        }      

      } else {
        $shared_to_arr = '';
      }



      $shared_to_arr = implode(', ', $shared_to_arr);
      $isanswered = _ed_check_if_answered($user->uid, $tasknode->nid);
      $tmp_data = array('data' => '', 'class' => '');
      if($isanswered){
        $tmp_answer_nid = _ed_get_answer_nid($user->uid, $tasknode->nid);                             
        $status = _ed_check_if_accepted($tmp_answer_nid[0]);
       
        switch($status ? $status[0] : 'invalid'){
          case('accepted'):
            $tmp_data['class'] = 'answered';
            $tmp_data['data'] = l(t('Answered, Accepted'), 'node/' . $tmp_answer_nid[0], array('html' => TRUE));
            $tmp_data['title'] = t('Accepted');
          break;
          case('rejected'):
            $tmp_data['class'] = 'rejected';
            $tmp_data['data'] = l(t('Answered, Rejected'), 'node/' . $tmp_answer_nid[0], array('html' => TRUE));
            $tmp_data['title'] = t('Rejected');                
          break;
          case('unchecked'):
          default:
            $tmp_data['class'] = 'unchecked';
            $tmp_data['data'] = l(t('Answered, Unchecked'), 'node/' . $tmp_answer_nid[0], array('html' => TRUE));
            $tmp_data['title'] = t('Unchecked');
          break;
        }
             
      }else{
        $tmp_data['class'] = 'unanswered';
        $tmp_data['data'] = t('Not Answered');
        $tmp_data['title'] = t('Not answered');
        if (!empty($tasknode->{ED_FIELD_TO_GROUP_MEMBER}[LANGUAGE_NONE])) {
          if (!in_array($user->uid, array_map(function($element) { return $element['target_id']; }, $tasknode->{ED_FIELD_TO_GROUP_MEMBER}[LANGUAGE_NONE]))) {
            $tmp_data['class'] = 'can-not-be-answered';
            $tmp_data['data'] = t('Can not be answered');
            $tmp_data['title'] = t('Can not be answered');
          }
        }
      }
      
      $rows2[] = array(
          'data' => array(
            'title' => l($tasknode->title, 'node/' . $tasknode->nid),
            'group' => $shared_to_arr,
            'due_date' => format_date($tasknode->ed_task_due_date[LANGUAGE_NONE][0]['value'],'custom','d/m/Y'),
            'status' => $tmp_data,          
          ),
        );
    }


  
  //@TODO: There are so many things wrong right here ..

    $content[$table_type.'-2'] = array(
        '#theme' => 'table',
        '#rows' => $rows2,
        '#header' => array(t('Task'), t('Group'), t('Due Date'), t('Status')),
    );
    $content['pager-2'] = array(
            '#theme' => 'pager',
            '#element' => 2,
          );

    return $content;
  }
}


function ed_task_node_view($node, $view_mode, $langcode) {
  switch($node->type) {
    case 'ed_task':

      // Only apply in case of full view
      if ('full' != $view_mode) break;

      $acc = $GLOBALS['user'];

      // Show owner answer info
      if ($node->uid === $acc->uid) {
        $node->content['ed_task_answers_listing']['answers-heading'] = array(
          '#type' => 'markup',
          '#markup' => t('Answers'),
          '#prefix' => '<h3>',
          '#suffix' => '</h3>',
        );

        $node->content['ed_task_answers_listing']['answers-by-groups'] = array(
          '#type' => 'markup',
          '#markup' => t('Answers by groups'),
          '#prefix' => '<h4>',
          '#suffix' => '</h4>',
        );
        $listing_items = array();
        if (isset($node->og_group_ref['und']) && is_array($node->og_group_ref['und'])) {
          $group_ids = $node->og_group_ref['und'];
        }
        if (!empty($group_ids)) {
          $groups = node_load_multiple(array_map(function($element) { return $element['target_id']; }, $group_ids));
        }
        if (!empty($groups)) {
          foreach ($groups as $group) {
            $listing_items[] = l($group->title, 'node/' . $group->nid . '/task-manager');
          }
        }
        $node->content['ed_task_answers_listing']['answers-by-groups-listing'] = array(
          '#theme' => 'item_list',
          '#items' => $listing_items,
        );

        if (isset($node->{ED_FIELD_TO_GROUP_MEMBER}['und']) && is_array($node->{ED_FIELD_TO_GROUP_MEMBER}['und'])) {
          $user_ids = $node->{ED_FIELD_TO_GROUP_MEMBER}['und'];
        }
        if (!empty($user_ids)) {
          $users = user_load_multiple(array_map(function($element) { return $element['target_id']; }, $user_ids));
        }
        $rows = array();

        if (!empty($users)) {
          $i_number = 1;
          foreach ($users as $user) {
            $answer = _get_user_answer_from_task($node->nid, $user->uid);
            $rows[] = array(
              'data' => array(
                'number' => $i_number,
                'name' =>  edidaktikum_get_full_name_for_user_account($user),
                'answer' => array(
                  'data' => ($answer) ? l('&nbsp;', 'node/' . $answer->nid, array('html' => TRUE)) : '',
                  'class' => ($answer) ? 'answered' : 'unanswered',
                ),
                'submitted' => ($answer) ? format_date($answer->created, 'medium') : '',
              ),
            );
            $i_number++;
          }
        }

        if (!empty($rows)) {
          $node->content['ed_task_answers_listing']['answers-by-users'] = array(
            '#type' => 'markup',
            '#markup' => t('Answers by users'),
            '#prefix' => '<h4>',
            '#suffix' => '</h4>',
          );
          drupal_add_css(drupal_get_path('module', 'ed_cluster').'/task_manager.css');
          $node->content['ed_task_answers_listing']['answers-by-users-table'] = array(
            '#theme' => 'table',
            '#rows'=> $rows,
            '#header' => array('#', t('Name'), t('Answer'), t('Submitted')),
          );
        }
      }
      
      if (!ed_task_can_user_answer_task($node, $acc)) {
        break;
      }

      $options = array(
        'attributes' => array(),
        'query' => array(
          'field_ref_to_task' => $node->nid,
        ),
      );
      
      if(_is_task_answered($node->nid)){
        $node->content['ed_task_asjandus'] = array(
          '#type' => 'item',
          '#title' => t(''),
          '#markup' => l(t('Edit'), 'node/'.  _get_answer_from_task($node->nid).'/edit'),
          '#prefix' => '<div class="answer edit-answer">',
          '#suffix' => '</div>',
        );        
        break;
      }
      
      else{
        $node->content['ed_task_asjandus'] = array(
          '#type' => 'item',
          '#title' => t(''),
          '#markup' => l(t('Answer'), 'node/add/ed-answer', $options),
          '#prefix' => '<div class="answer">',
          '#suffix' => '</div>',
        );
        break;
      }
  }
}

/**
 * Returns an object with answer data using task and user identifier
 * as conditions. In case no answer exists FALSE is returned.
 * Currently returned data is: nid and created
 * @param $task
 *   Task nid
 * @param $uid
 *   User uid
 * @returned mixed
 *   Object with data or FALSE
 */
function _get_user_answer_from_task($task, $uid){
  $query = db_select('node', 'n');
  $query->join('field_data_field_ref_to_task', 'b', 'n.nid = b.entity_id');
  $query->fields('n', array('nid', 'created'))
    ->condition('n.uid', $uid)
    ->condition('n.type', 'ed_answer');
  $query->condition('b.field_ref_to_task_target_id', $task);

  $result = $query->execute()->fetchAll();
  if ($result) {
    return $result['0'];
  }
  return false;
}

function _get_answer_from_task($task){
  $acc = $GLOBALS['user'];
  $query = db_select('node', 'n');
  $query->join('field_data_field_ref_to_task', 'b', 'n.nid = b.entity_id');
  $query->fields('n', array('nid'))
    ->condition('n.uid', $acc->uid)
    ->condition('n.type', 'ed_answer');
  $query->condition('b.field_ref_to_task_target_id', $task);
  
  $result = $query->execute()->fetchAll();
  return $result['0']->nid;
}

function ed_task_field_extra_fields() {
  $extra['node']['ed_task']['display'] = array(
    'ed_task_asjandus' => array(
      'label' => t('extra fields label'),
      'description' => t('extra fields descrption'),
      'weight' => 10,
    ),
    'ed_task_answers_listing' => array(
      'label' => t('Task answers listing'),
      'description' => t('Task answers listing'),
      'weight' => 11,
    ),
  );

  return $extra;
}

/**
 * Implements hook_form_alter().
 */
function ed_task_form_alter(&$form, &$form_state, $form_id) {
  if( $form_id == 'ed_task_node_form'){
    if (empty($form['#node']->nid)) {
      drupal_set_title(t('Create Task'));
    }

    $form['#attached']['js'] = array(drupal_get_path('module', 'ed_task') . '/ed_task_js.js',);
    $form['#attached']['css'] = array(drupal_get_path('module', 'ed_task') . '/ed_task_css.css',);
  }
}

/**
 * Helper and database query functions
 */
function _ed_get_group_name_from_id($id) {
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->addTag('node_access')
    ->condition('nid', $id);
  $result = $query->execute();
  $string = '';
  foreach($result as $record){
    $string = (string) $record->title;
  }
  return $string;
}

function _is_task_answered($task_nid){
  $acc = $GLOBALS['user'];
  $query = db_select('node', 'n');
  $query->join('field_data_field_ref_to_task', 'b', 'n.nid = b.entity_id');
  $query->fields('n', array('nid'))
      ->condition('b.field_ref_to_task_target_id', $task_nid)
      ->condition('n.uid', $acc->uid);
  
  $result = $query->execute()->fetchAll();
  if(empty($result)){
    //return t('Unanswered');
    return false;
  }else{
    //return t('Answered');
    return true;
  }
}

function _ed_get_cur_user_tasks(){
  $acc = $GLOBALS['user'];
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->addTag('node_access')
    ->condition('n.type', 'ed_task')
    ->condition('n.uid', $acc->uid);

  $query = $query->extend('TableSort')->extend('PagerDefault')->limit(ed_get_paging_nr());

  $result = $query->execute()->fetchCol();
  $nodes = node_load_multiple($result);
  return $nodes;
}


function _ed_get_tasks_to_user(){
  $acc = $GLOBALS['user'];
  $query = db_select('node', 'n');
  $query->join('field_data_ed_field_to_group_member', 'tu', 'n.nid = tu.entity_id');
  $query->fields('n', array('nid'))
    ->addTag('node_access')
    ->condition('n.type', 'ed_task')
    ->condition('tu.ed_field_to_group_member_target_id', $acc->uid);

  $query = $query->extend('TableSort')->extend('PagerDefault')->limit(ed_get_paging_nr());

  $result = $query->execute()->fetchCol();
  $nodes = node_load_multiple($result);
  return $nodes;
}
function _ed_get_tasks_specific_group($gid) {
  $query=db_select('node', 'n');
  $query->join('og_membership', 'og', 'n.nid = og.etid');
  $query->fields('n', array('nid'))
    ->addTag('node_access')
    ->condition('n.type', 'ed_task')
    ->condition('og.gid', $gid);

  $query = $query->extend('TableSort')->extend('PagerDefault')->limit(ed_get_paging_nr());

  $result = $query->execute()->fetchCol();

  return $result;
}

function _ed_get_group_tasks(){
  $groups = og_get_groups_by_user();
  $helper = array();
  foreach($groups['node'] as $gid) {
    array_push($helper, $gid);
  }
  $query = db_select('node','n');
  $query->join('og_membership', 'og','n.nid = og.etid');
  $query->fields('n', array('nid'))
    ->addTag('node_access')
    ->condition('n.type', 'ed_task')
    ->condition('og.gid', $helper, "IN");
  $result = $query->execute()->fetchCol();
  return $result;
}

/**
 * Returns count of unanswered tasks for a user. 
 * 
 * UPDATE: returns the sum of unanswered and rejected tasks for a user.
 * 
 * @param $account
 *   User account
 * @return int
 *   Number of found unanswered tasks
 */
function _ed_get_user_unanswered_tasks_count($account) {
  static $count;

  if (isset($count)) {
    return $count;
  }
  $task_nids = array();

  $query = db_select('node', 'n');
  $query->join('field_data_ed_field_to_group_member', 'tgm', 'n.nid = tgm.entity_id');
  $query->fields('n', array('nid'))
    ->addTag('node_access')
    ->condition('n.type', 'ed_task')
    ->condition('tgm.ed_field_to_group_member_target_id', $account->uid);

  // Get all task identifiers given directly to a user
  $task_nids = $query->execute()->fetchCol();

  // Get all groups the user is not an administrator of
  $user_groups = og_get_groups_by_user($account, 'node');
  $administered_groups = _ed_cluster_get_all_administered_groups($account);

  $groups = array();
  if (!empty($user_groups)) {
    $groups = array_diff($user_groups, $administered_groups);
  }

  if ($groups && is_array($groups) && sizeof($groups) > 0) {
    $query = db_select('node', 'n');
    $query->join('og_membership', 'og', 'n.nid = og.etid');
    $query->leftJoin('field_data_ed_field_to_group_member', 'tgm', 'n.nid = tgm.entity_id');
    $query->fields('n', array('nid'))
      ->addTag('node_access')
      ->condition('n.type', 'ed_task')
      ->condition('n.uid', $account->uid, '<>')
      ->condition('og.gid', $groups, "IN")
      ->isNull('tgm.ed_field_to_group_member_target_id');

    // Merge all task identifiers given to user groups
    // Make sure that identifiers are unique
    $task_nids = array_unique(array_merge($task_nids, $query->execute()->fetchCol()));
    $unansweredcount = 0;
    foreach($task_nids as $tasknid){
      if(!(_ed_check_if_answered($account->uid, $tasknid))){
        $unansweredcount++;
      }else{
        $tmp_answer_nid = _ed_get_answer_nid($account->uid, $tasknid);
        $status = _ed_check_if_accepted($tmp_answer_nid[0]);
        if(!empty($status) && $status[0] == 'rejected'){
          $unansweredcount++;
        }
      }
    }
    return $unansweredcount;
    //$tasknodes = node_load_multiple($task_nids);
    
    //dpm($tasknodes, 'nodes');
    
    
  }

  $count = sizeof($task_nids);

  // Return zero if no task are present
  if (!($count > 0)) {
    return $count;
  }

  $query = db_select('node', 'n');
  $query->join('field_data_field_ref_to_task', 'ref', 'n.nid = ref.entity_id');
  $query->fields('n', array('nid'))
    ->addTag('node_access')
    ->condition('n.type', 'ed_answer')
    ->condition('n.uid', $account->uid)
    ->condition('ref.field_ref_to_task_target_id', $task_nids, 'IN');

  // Substract the number of answers created by user
  // Make sure to only consider answers for currently active tasks
  // This will deal with answers with tasks removed
  $count -= $query->countQuery()->execute()->fetchField();

  return $count;
}

function ed_task_preprocess_page(&$variables){
  if(in_array('page__dashboard__tasks', $variables['theme_hook_suggestions'])){
    $variables['page']['content']['metatags']['global']['title']['#attached']['metatag_set_preprocess_variable'][0][2] = _ed_task_menu_title().' | eDidaktikum';
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function ed_task_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

function recursive_array_search($needle,$haystack) {
    foreach($haystack as $key=>$value) {
        $current_key=$key;
        if($needle===$value OR (is_array($value) && recursive_array_search($needle,$value) !== false)) {
            return true;
        }
    }
    return false;
}

/**
 * Implements hook_node_insert().
 */
function ed_task_node_insert($node) {
  // Make sure that only public tasks will trigger notifications
  if ('ed_task' == $node->type && 1 == $node->status) {
    $send_to = array();

    if (!empty($node->og_group_ref[LANGUAGE_NONE])) {
      if (!empty($node->{ED_FIELD_TO_GROUP_MEMBER}[LANGUAGE_NONE])) {
        // Only send mail to selected members
        foreach($node->{ED_FIELD_TO_GROUP_MEMBER}[LANGUAGE_NONE] as $single) {
          $send_to[] = $single['target_id'];
        }
      } else {
        // Exclude task creator
        $exclude_uids = array($node->uid);
        // Handle selected groups case
        $group_ids = array();
        foreach ($node->og_group_ref[LANGUAGE_NONE] as $single) {
          $group_ids []= $single['target_id'];
          $group = node_load($single['target_id']);
          // Exclude group creator and admins
          $exclude_uids = array_merge($exclude_uids, _ed_cluster_get_group_admins($group, true));

          // Remove duplicates
          $exclude_uids = array_unique($exclude_uids);

          // Excluded: task creator, any group creator or admin
          $uids = db_select('og_membership', 'ogm')
            ->distinct()
            ->fields('ogm', array('etid'))
            ->condition('ogm.entity_type', 'user')
            ->condition('ogm.group_type', 'node')
            ->condition('ogm.gid', $group_ids, 'IN')
            ->condition('ogm.state', OG_STATE_ACTIVE)
            ->condition('ogm.etid', $exclude_uids, 'NOT IN')
            ->execute()
            ->fetchCol();

          if (!empty($uids)) {
            $send_to = $uids;
          }
        }
      }
    }

    $recipients = user_load_multiple($send_to);

    if (!empty($recipients)) {
      $creator = user_load($node->uid);
      $creator_fullname = edidaktikum_get_full_name_for_user_account($creator);
      foreach ($recipients as $recipient) {
        $language = user_preferred_language($recipient);
        $params = array(
          'fullname' => $creator_fullname,
          'taskname' => $node->title,
          'duedate' => format_date($node->ed_task_due_date[LANGUAGE_NONE][0]['value'], 'short', '', NULL, $language->language),
          'taskurl' => url('node/' . $node->nid, array('absolute' => TRUE)),
        );
        drupal_mail('ed_task', 'task_given', $recipient->mail, $language, $params, 'no-reply@edidaktikum.ee', TRUE);
      }
    }
  }
}

/**
 * Implements hook_mail().
 */
function ed_task_mail($key, &$message, $params) {
  if ('task_given' == $key)  {
    $options = array('langcode' => $message['language']->language);
    $message['subject'] = t('New Task - eDidaktikum', array(), $options);
    $message['body'][] = t('@fullname assigned you a task: @taskname.', array('@fullname' => $params['fullname'], '@taskname' => $params['taskname']), $options);
    $message['body'][] = t('Due date: @duedate', array('@duedate' => $params['duedate']), $options);
    $message['body'][] = t('View task: @taskurl', array('@taskurl' => $params['taskurl']), $options);
  }
}

/**
 * Checks if current user can answer a task.
 * @param $node Task node
 * @param $account Current user account
 *
 * @return bool
 */
function ed_task_can_user_answer_task(&$node, &$account) {
  if (!user_is_logged_in()) {
    return FALSE;
  }

  // To group member case
  if (!empty($node->{ED_FIELD_TO_GROUP_MEMBER}[LANGUAGE_NONE])) {
    $to_group_member_ids = array_map(function($element) { return $element['target_id']; }, $node->{ED_FIELD_TO_GROUP_MEMBER}[LANGUAGE_NONE]);
    if (in_array($account->uid, $to_group_member_ids)) {
      return TRUE;
    }
    return FALSE;
  }

  // To group case
  if (!empty($node->og_group_ref[LANGUAGE_NONE])) {
    $group_ids = array_map(function($element) { return $element['target_id']; }, $node->og_group_ref[LANGUAGE_NONE]);
    // Task creator, group creator or admin is not allowed to answer
    if (($node->uid == $account->uid) || _ed_cluster_is_groups_admin_or_creator($account->uid, $group_ids)) {
      return FALSE;
    }

    foreach ($group_ids as $gid) {
      if (og_is_member('node', $gid, 'user', $account)) {
        return TRUE;
      }
    }

    return FALSE;
  }

  return FALSE;
}

