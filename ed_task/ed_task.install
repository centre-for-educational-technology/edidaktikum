<?php

/**
 * Implements hook_install().
 */

require_once('ed_task_functions.inc');

function ed_task_install() {
  //Create content type.
  node_types_rebuild();
  $types = node_type_get_types();

  //Create required fields.
  foreach (_ed_task_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create instances for fields.
  foreach (_ed_task_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = 'ed_task';
    field_create_instance($instance);
  }

  ed_task_node_add_field_study_group();

  ed_task_add_og_audience();

  //Disable comments
  variable_set('comment_ed_task', COMMENT_NODE_CLOSED);

	ed_task_node_add_field_g_drive_file();
}

function ed_task_add_og_audience() {
  if(function_exists('og_create_field') && defined('OG_AUDIENCE_FIELD')) {
    $og_field = og_fields_info(OG_AUDIENCE_FIELD);
    $og_field['instance']['label'] = t('Group');
    $og_field['instance']['required'] = FALSE;
    $og_field['instance']['settings']['behaviors']['prepopulate'] = array(
      'status' => TRUE,
      'action' => 'none',
      'fallback' => 'none',
      'skip_perm' => FALSE,
    );
    og_create_field(OG_AUDIENCE_FIELD, 'node', 'ed_task', $og_field);
  }
}

/**
 * Implements hook_uninstall().
 */
function ed_task_uninstall() {
  // gather all content
  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition("n.type", 'ed_task')
    ->execute();

  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // delete all nodes
  node_delete_multiple($nids);

  foreach(array_keys(_ed_task_installed_fields()) as $field) {
    field_delete_field($field);
  }

  //delete any remaining field instances
  $instances = field_info_instances('node', 'ed_task');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  //delete Study group field
  field_delete_field('ed_task_field_study_group');
  field_delete_instance('ed_task_field_study_group');

  // Delete Task content type
  node_type_delete('ed_task');

  //purge all field information
  field_purge_batch(1000);

  //delete set variables
  variable_del('comment_ed_task');
}

/**
 * Add to_group_member field instance to ed_task.
 * Also removes to_user instance and field.
 */
function ed_task_update_7101(&$sandbox) {
  $instances = _ed_task_installed_instances();
  $instance = $instances[ED_FIELD_TO_GROUP_MEMBER];
  $instance['entity_type'] = 'node';
  $instance['bundle'] = 'ed_task';
  field_create_instance($instance);

  $field_name = 'field_to_user';
  if ($instance = field_info_instance('node', $field_name, 'ed_task')) {
    field_delete_instance($instance);
  }
  if ($field = field_info_field($field_name)) {
    field_delete_field($field_name);
  }
}

/**
 * Make competence instace start collapsed.
 */
function ed_task_update_7102(&$sandbox) {
  $field_name = 'ed_field_competence';
  if ($instance = field_info_instance('node', $field_name, 'ed_task')) {
    $instance['widget']['settings']['start_minimized'] = TRUE;
    field_update_instance($instance);
  }
}

/**
 * Disable comments for ed_task.
 * Also update any existing ones to comply.
 */
function ed_task_update_7103(&$sandbox) {
  $node_type = 'ed_task';
  // Disable comments on any new ed_task nodes by default
  variable_set('comment_ed_task', COMMENT_NODE_CLOSED);

  // Initialize batch
  if (!isset($sandbox['total'])) {
    $total = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('type', $node_type)
      ->countQuery()
      ->execute()
      ->fetchField();

    $sandbox['total'] = $total;
    $sandbox['progress'] = 0;

    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return t('No %type nodes exist in database.', array('%type' => $node_type));
    }
  }

  $nids = db_select('node')
    ->fields('node', array('nid'))
    ->condition('type', $node_type)
    ->range(0, 10)
    ->execute()
    ->fetchCol();

  if (!empty($nids)) {
    $nodes = node_load_multiple($nids, NULL, TRUE);

    foreach ($nodes as $node) {
      $node->comment = COMMENT_NODE_CLOSED;
      node_save($node);
    }
  }

  // Increment and check progress
  $sandbox['progress'] += count($nids);
  if (empty($nids) || $sandbox['progress'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
    return t('Updated @count nodes of type %type.', array('@count' => $sandbox['progress'], '%type' => $node_type));
  } else {
    $sandbox['#finished'] = $sandbox['progress'] / $sandbox['total'];
  }
}

/**
 * Competence tree - Only lower level objects can be selected
 */
function ed_task_update_7104(&$sandbox){
  $instance = field_info_instance('node', 'ed_field_competence', 'ed_task');
  $instance['widget']['settings']['leaves_only'] = TRUE;
  $instance['widget']['settings']['select_parents'] = FALSE;
  field_update_instance($instance);
}

/**
 * Add competence label change
 */
function ed_task_update_7105(&$sandbox){
  $instance = field_info_instance('node', 'ed_field_competence', 'ed_task');
  $instance['label'] = t('Add competence');
  field_update_instance($instance);
}


/**
 * Creates and adds curriculum field to ed_task module
 */
function ed_task_node_add_field_study_group() {

  if(!field_info_field('ed_task_field_study_group')){
    $field = array(
        'field_name' => 'ed_task_field_study_group',
        'label' => t('Curriculum'),
        'type' => 'list_text',
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
        'foreign keys' => array(),
        'module' => 'list',
        'settings' => array(
            'allowed_values_function' => 'ed_get_curriculums_for_tlu',
        ),
    );
    field_create_field($field);
  }

  if(!field_info_instance('user', 'ed_task_field_study_group', 'user')){
    $instance = array(
        'field_name' => 'ed_task_field_study_group',
        'label' => t('Curriculum'),
        'description' => t('Select what group(s) this task belongs to'),
        'required' => false,
        'entity_type' => 'node',
        'bundle' => 'ed_task',
        'display' => array(
            'default' => array(
                'label' => 'above',
                'type' => 'list_default',
                'module' => 'list',
            ),
        ),
        'widget' => array(
            'type' => 'options_select',
        ),
    );
    field_create_instance($instance);
  }
}


/**
 * Adds ed_g_drive_file field instance
 */
function ed_task_node_add_field_g_drive_file() {
	$field_name = 'ed_g_drive_file';
	$field = field_info_field($field_name);
	if (!empty($field) && !field_info_instance('node', $field_name, 'ed_task')) {
		$instance = array(
				'field_name' => $field_name,
				'entity_type' => 'node',
				'bundle' => 'ed_task',
				'label' => t('Failid Google Drive-st'),
				'description' => '',
				'widget' => array(
						'settings' => array(
								'rows' => 1,
						),
				),
				'required' => FALSE,
				'display' => array(
						'default' => array(
								'label' => 'hidden',
						),
						'featured' => array(
								'label' => 'hidden',
						),
				)
		);
		field_create_instance($instance);
	}
}

/**
 * Creates and adds field ed_task_field_strict_sub.
 */
function ed_task_add_field_strict_sub() {
  $field_name = 'ed_task_field_strict_sub';
  if (!field_info_field($field_name)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'list_boolean',
      'entity_types' => array('node'),
      'settings' => array(
        'allowed_values' => array(0, 1),
      ),
    );
    field_create_field($field);
  }

  if(!field_info_instance('node', $field_name, 'ed_task')){
    $instance = array(
      'field_name' => $field_name,
      'label' => t('Tähtaja ületamisel ei ole vastamine/muutmine lubatud'),
      'required' => false,
      'entity_type' => 'node',
      'bundle' => 'ed_task',
      'widget' => array(
        'type' => 'options_onoff',
        'settings' => array(
          'display_label' => TRUE,
        ),
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
        ),
        'featured' => array(
          'label' => 'hidden',
        ),
      )
    );
    field_create_instance($instance);
  }
}


/**
 * Add ed_task_field_study_group field to ed_task
 */
function ed_task_update_7107(&$sandbox) {
  ed_task_node_add_field_study_group();

}

/**
 * Add kutom value to ed_task_field_study_group field
 */
function ed_task_update_7108(&$sandbox) {

  // Get the field info
  $info = field_info_field('ed_task_field_study_group');

  // Get a reference to the values
  $values = &$info['settings']['allowed_values'];

  // Manipulate the values
  $values['kutom'] = 'KUTOM - töö- ja tehnoloogiaõpetuse õpetaja';

  // Save the field
  field_update_field($info);

}


/**
 * Add ekeom_tk and grvom_f values to ed_task_field_study_group field
 */
function ed_task_update_7109(&$sandbox) {

  // Get the field info
  $info = field_info_field('ed_task_field_study_group');

  // Get a reference to the values
  $values = &$info['settings']['allowed_values'];

  // Manipulate the values
  $values['ekeom_tk'] = t('EKEOM - TK - Eesti keele kui teise keele ja eesti kultuuri õpetaja');

  $values['grvom_f'] = t('GRVOM - F - Soome ja teise keele õpetaja');

  // Save the field
  field_update_field($info);

}


/**
 * Adds ed_g_drive_file field instance to ed_task
 */
function ed_task_update_7110(&$sandbox) {

	ed_task_node_add_field_g_drive_file();

}


/**
 * Delete ed_field_category instance
 */
function ed_task_update_7111(&$sandbox) {

  $instance = field_info_instance('node', 'ed_field_category', 'ed_task');
  field_delete_instance($instance);


}

/**
 * Create field and instance for ed_task_maximum_points if do not yet exist
 */
function ed_task_update_7112() {
  $field_name = 'ed_task_maximum_points';
  $fields = _ed_task_installed_fields();

  if (isset($fields[$field_name]) && !field_info_field($field_name)) {
    field_create_field($fields[$field_name]);
  }

  $instances = _ed_task_installed_instances();

  if (isset($instances[$field_name])) {
    $field = field_info_field($field_name);

    if (!empty($field) && !field_info_instance('node', $field_name, 'ed_task')) {
      $instance = $instances[$field_name];
      $instance['entity_type'] = 'node';
      $instance['bundle'] = 'ed_task';
      field_create_instance($instance);
    }
  }
}

/**
 * Create field and instance for ed_task_field_strict_sub
 */
function ed_task_update_7113(&$sandbox) {
//  field_delete_field('ed_task_field_strict_sub');
//  field_delete_instance('ed_task_field_strict_sub');
  ed_task_add_field_strict_sub();
}


/**
 * Reinitialise ed_task_field_study_group field to ed_task
 */
function ed_task_update_7114(&$sandbox) {
  field_delete_field('ed_task_field_study_group');
  field_delete_instance('ed_task_field_study_group');
  ed_task_node_add_field_study_group();

}
