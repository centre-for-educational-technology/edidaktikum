<?php

/**
 * @file
 * Event module.
 */

/*
 * Implements hook_node_info().
 */

function ed_event_node_info() {
  $items['ed_event'] = array(
    'name' => t('Event'),
    'type' => 'ed_event',
    'base' => 'node_content',
    'description' => t('description'),
    'has_title' => '1',
    'title_label' => t('Title'),
    'body_label' => t('body_label'),
  );
  return $items;
}

/**
 * Implements hook_menu().
 */
function ed_event_menu() {
  /*
  $items['events'] = array(
    'title' => 'Events',
    'page callback' => 'ed_event_listing_page',
    'access callback' => TRUE,
    'weight' => 10,
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );
   */
  $items['events/rss'] = array(
    'title' => 'Events',
    'page callback' => 'ed_event_latest_feed',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Latest events RSS page.
 */
function ed_event_latest_feed() {
  $nids = db_select('node', 'n')
    ->fields('n', array('nid', 'created'))
    ->condition('type', 'ed_event')
    ->condition('status', 1)
    ->orderBy('created', 'DESC')
    ->range(0, variable_get('feed_default_items', 10))
    ->addTag('node_access')
    ->execute()
    ->fetchCol();

  $channel['title'] = t('!site_name events', array('!site_name' => variable_get('site_name', 'eDidaktikum')));
  $channel['link'] = url('events/rss', array('absolute' => TRUE));

  node_feed($nids, $channel);
}

/**
 * Events listing page.
 */
function ed_event_listing_page() {
  drupal_add_feed('events/rss', t('Latest events'));

  $content = array();

  if(node_access('create', 'ed_event')){
    $content['add-new'] = array(
      '#type' => 'link',
      '#title' => t('Add new event'),
      '#href' => 'node/add/ed-event',
      '#prefix' => '<div class="ed-add-new-node ed-add-new-event">',
      '#suffix' => '</div>',
    );
  }

  $latest = ed_event_get_latest_event();
  if (!empty($latest)) {
    $content['latest-event'] = node_view($latest, 'featured');
  }

  $upcoming_events = ed_event_get_upcoming_events($latest);

  if (!empty($upcoming_events)) {
    $content['upcoming-events-heading'] = array(
      '#type' => 'markup',
      '#markup' => '<h2>' . t('Upcoming events') . '</h2>',
    );
    $nodes = node_load_multiple($upcoming_events);
    $build = node_view_multiple($nodes);
    $build['pager'] = array(
      '#theme' => 'pager',
      '#weight' => 5,
    );
    $content['upcoming-events'] = $build;
  }

  return $content;
}

/**
 * All events.
 */
function ed_event_get_all_events() {
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.status', 1)
    ->condition('n.type', 'ed_event')
    ->addTag('node_access')
    ->range()
    ->orderBy('n.created', 'DESC');
  $nids = $query->execute()->fetchCol();
  return $nids;
}

/**
 * Latest event.
 */
function ed_event_get_latest_event() {
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.status', 1)
    ->condition('n.type', 'ed_event')
    ->addTag('node_access')
    ->range(0, 1)
    ->orderBy('n.created', 'DESC');

  $nids = $query->execute()->fetchCol();

  if (!empty($nids)) {
    return node_load($nids[0]);
  }

  return FALSE;
}

/**
 * Upcoming events.
 */
function ed_event_get_upcoming_events($exclude_event) {
  $query = db_select('node', 'n')
    ->extend('PagerDefault')
    ->fields('n', array('nid'))
    ->condition('n.status', 1)
    ->condition('n.type', 'ed_event')
    ->addTag('node_access')
    ->limit(ed_get_paging_nr());

  $query->leftJoin('field_data_ed_event_field_end', 'end', 'n.nid = end.entity_id');
  $query->condition('end.ed_event_field_end_value', time(), '>');
  $query->orderBy('end.ed_event_field_end_value', 'ASC');


  if (!empty($exclude_event)) {
    $query->condition('n.nid', $exclude_event->nid, '<>');
  }

  $nids = $query->execute()->fetchCol();

  return $nids;
}

/**
 * Implements hook_preprocess_node().
 *
 * Replacing user_picture with event featured image
 */
function ed_event_preprocess_node(&$vars) {
  if ('ed_event' == $vars['node']->type && ((isset($vars['teaser']) && $vars['teaser']) || (isset($vars['featured']) && $vars['featured']))) {
    $vars['display_submitted'] = FALSE;
  }

  if (isset($vars['front']) && $vars['front'] == TRUE && $vars['node']->type == 'ed_event') {
    $start_field = field_get_items('node', $vars['node'], 'ed_event_field_start');
    $location_field = field_get_items('node', $vars['node'], 'ed_event_field_location');
    $start = $start_field[0]['value'];
    $location = $location_field[0]['value'];
    $vars['submitted'] = format_date($start, 'short') . " " . $location;
  } else if ($vars['teaser'] && $vars['node']->type == 'ed_event') {
    if (!empty($vars['node']->ed_field_featured_image)) {
      $image = field_view_field('node', $vars['node'], 'ed_field_featured_image', array('label' => 'hidden', 'settings' => array('image_style' => 'thumbnail')));
      $vars['user_picture'] = render($image);
    } else {
      $vars['user_picture'] = '';
    }
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function ed_event_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_form_alter().
 */
function ed_event_form_alter(&$form, &$form_state, $form_id) {
  if ('ed_event_node_form' == $form_id) {
    if (empty($form['#node']->nid)) {
      drupal_set_title(t('Create Event'));
    }
  }
}

/**
 * Implements hook_node_view().
 */
function ed_event_node_view($node, $view_mode, $langcode) {
  if ('ed_event' == $node->type) {
    if (in_array($view_mode, array('teaser', 'featured'))) {
      $field_start = $node->ed_event_field_start[LANGUAGE_NONE][0];
      $field_end = $node->ed_event_field_end[LANGUAGE_NONE][0];
      $node->content['start-end-dates'] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('submitted'),
        ),
        '#weight' => -1,
      );
      $node->content['start-end-dates']['start'] = array(
        '#type' => 'markup',
        '#markup' => vsprintf("%s - %s", array(
          format_date($field_start['value'], 'short', '', $field_start['timezone']),
          format_date($field_end['value'], 'short', '', $field_end['timezone']),
        )),
        '#prefix' => '<span>',
        '#suffix' => '</span>',
      );
    }
  }
}

/**
 * Implements hook_node_access().
 */
function ed_event_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

  // Student can not create events if is not active member
  // of any groups
  if ('ed_event' == $type && 'create' == $op) {
    if ((bool) $account->uid && !(in_array('teacher', $account->roles) || in_array('administrator', $account->roles))) {
      if (_ed_event_get_user_groups_count($account->uid) == 0) {
        return NODE_ACCESS_DENY;
      }
    }
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Returns ed_cluster node identifiers that current user is an active
 * member of.
 * Uses pager extender.
 */
function _ed_event_get_user_groups_count($uid) {
  $query = db_select('node', 'n');
  $query->join('og_membership', 'ogm', "n.nid = ogm.gid AND ogm.entity_type = 'user' AND ogm.group_type = 'node' AND ogm.state = :active AND ogm.etid = :uid", array(':active' => OG_STATE_ACTIVE, ':uid' => $uid));
  $query->fields('n', array('nid'))
    ->condition('n.type', 'ed_cluster');

  return $query->countQuery()->execute()->fetchField();
}
