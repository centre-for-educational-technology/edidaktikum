<?php

/**
 * @file
 * Event module.
 */

/**
 * Implements hook_menu().
 */
function ed_event_menu() {
  $items['events'] = array(
    'title' => t('Events'),
    'page callback' => 'ed_event_listing_page',
    'access callback' => TRUE,
    'weight' => 10,
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['events/get/events'] = array(
    'page callback' => 'ed_event_get_events_ajax',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Events listing page.
 */
function ed_event_listing_page() {

  $content = array();

  if(node_access('create', 'ed_event')){
    $content['add-new'] = array(
      '#type' => 'link',
      '#title' => t('Add new event'),
      '#href' => 'node/add/ed-event',
      '#prefix' => '<div class="ed-add-new-node ed-add-new-event">',
      '#suffix' => '</div>',
    );
  }

  $latest = ed_event_get_latest_event();
  if (!empty($latest)) {
    $content['latest-event'] = node_view($latest, 'featured');
  }

  $upcoming_events = ed_event_get_upcoming_events($latest);

  if (!empty($upcoming_events)) {
    $content['upcoming-events-heading'] = array(
      '#type' => 'markup',
      '#markup' => '<h2>' . t('Upcoming events') . '</h2>',
    );
    $nodes = node_load_multiple($upcoming_events);
    $build = node_view_multiple($nodes);
    $build['pager'] = array(
      '#theme' => 'pager',
      '#weight' => 5,
    );
    $content['upcoming-events'] = $build;
  }

  return $content;
}

function ed_event_get_events_ajax() {
  $events = ed_event_get_all_events();
  $results = array();
  foreach ($events as $event_nid) {
    $event = node_load($event_nid);
    $excerpt_field = field_get_items('node', $event, 'ed_field_excerpt');
    $start_field = field_get_items('node', $event, 'ed_event_field_start');
    $end_field = field_get_items('node', $event, 'ed_event_field_end');
    $results[] = array(
      "date" => $start_field[0]['value'] . "000",
      "enddate" => $end_field[0]['value'] . "000",
      "type" => $event->type,
      "title" => $event->title,
      "description" => $excerpt_field[0]['safe_value'],
      "url" => 'node/'.$event->nid,
    );
  }
  drupal_json_output($results);
}

/**
 * All events.
 */
function ed_event_get_all_events() {
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.status', 1)
    ->condition('n.type', 'ed_event')
    ->addTag('node_access')
    ->range()
    ->orderBy('n.created', 'DESC');
  $nids = $query->execute()->fetchCol();
  return $nids;
}

/**
 * Latest event.
 */
function ed_event_get_latest_event() {
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.status', 1)
    ->condition('n.type', 'ed_event')
    ->addTag('node_access')
    ->range(0, 1)
    ->orderBy('n.created', 'DESC');

  $nids = $query->execute()->fetchCol();

  if (!empty($nids)) {
    return node_load($nids[0]);
  }

  return FALSE;
}

/**
 * Upcoming events.
 */
function ed_event_get_upcoming_events($exclude_event) {
  $query = db_select('node', 'n')
    ->extend('PagerDefault')
    ->fields('n', array('nid'))
    ->condition('n.status', 1)
    ->condition('n.type', 'ed_event')
    ->addTag('node_access')
    ->limit(ed_get_paging_nr());

  $query->leftJoin('field_data_ed_event_field_end', 'end', 'n.nid = end.entity_id');
  $query->condition('end.ed_event_field_end_value', time(), '>');
  $query->orderBy('end.ed_event_field_end_value', 'ASC');


  if (!empty($exclude_event)) {
    $query->condition('n.nid', $exclude_event->nid, '<>');
  }

  $nids = $query->execute()->fetchCol();

  return $nids;
}

/**
 * Implements hook_preprocess_node().
 *
 * Replacing user_picture with event featured image
 */
function ed_event_preprocess_node(&$vars) {
  if (isset($vars['front']) && $vars['front'] == TRUE && $vars['node']->type == 'ed_event') {
    $start_field = field_get_items('node', $vars['node'], 'ed_event_field_start');
    $location_field = field_get_items('node', $vars['node'], 'ed_event_field_location');
    $start = $start_field[0]['value'];
    $location = $location_field[0]['value'];
    $vars['user_picture'] = '';
    $vars['submitted'] = format_date($start, 'short') . " " . $location;
  } else if ($vars['teaser'] && $vars['node']->type == 'ed_event') {
    if (!empty($vars['node']->ed_field_featured_image)) {
      $image = field_view_field('node', $vars['node'], 'ed_field_featured_image', array('label' => 'hidden', 'settings' => array('image_style' => 'thumbnail')));
      $vars['user_picture'] = render($image);
    } else {
      $vars['user_picture'] = '';
    }
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function ed_event_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_block_info().
 */
function ed_event_block_info() {
  $blocks = array();
  $blocks['events_calendar'] = array(
    'info' => t('Events calendar'),
    'status' => TRUE,
    'title' => '<none>',
    'region' => 'sidebar_second',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'events',
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ed_event_block_view($block_name='') {
  if ($block_name == 'events_calendar') {

    drupal_add_library('system', 'ui.datepicker');

    $content = array();
    $content['events-calendar'] = array(
      '#type' => 'markup',
      '#markup' => '<div id="events_calendar"></div>',
      '#attached' => array(
        'css' => array(
          drupal_get_path('module', 'ed_event') . '/css/eventCalendar.css',
          drupal_get_path('module', 'ed_event') . '/css/eventCalendar_theme_responsive.css',
        ),
        'js' => array(
          drupal_get_path('module', 'ed_event') . '/js/jquery.eventCalendar.js',
          drupal_get_path('module', 'ed_event') . '/js/ed_event.js',
        ),
      ),
    );

    global $language;
    if (file_exists(drupal_get_path('module', 'ed_event') . "/js/jquery.eventCalendar-{$language->language}.js")) {
      $content['events-calendar']['#attached']['js'][] = drupal_get_path('module', 'ed_event') . "/js/jquery.eventCalendar-{$language->language}.js";
    }

    $block = array(
      'subject' => 'Events calendar',
      'content' => $content,
    );
    return $block;

  }
}

/**
 * Implements hook_form_alter().
 */
function ed_event_form_alter(&$form, &$form_state, $form_id) {
  if ('ed_event_node_form' == $form_id) {
    if (empty($form['#node']->nid)) {
      drupal_set_title(t('Create Event'));
    }
  }
}

