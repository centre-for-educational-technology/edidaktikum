<?php

/**
 * @file
 * Install, uninstall, enable and disable functions for eDidaktikum.
 */

/**
 * Implements hook_install().
 */
function edidaktikum_install() {
  edidaktikum_create_roles();
  edidaktikum_create_vocabulary();
  edidaktikum_create_fields();
  edidaktikum_set_translatable_variables();

  db_update('system')
      ->fields(array('weight' => 10))
      ->condition('name', 'edidaktikum', '=')
      ->execute();
}

/**
 * Implements hook_uninstall().
 */
function edidaktikum_uninstall() {
  field_delete_field('ed_field_excerpt');
  field_delete_field('ed_field_content');
  field_delete_field('ed_field_featured_image');
  field_delete_field('ed_field_category');
}

/**
 * Implements hook_enable().
 */
function edidaktikum_enable() {
  variable_set('site_frontpage', 'home');
}

/**
 * Implements hook_disable().
 */
function edidaktikum_disable() {
  variable_set('site_frontpage', 'node');
}

/**
 * Creates custom roles if those do not yet exist.
 */
function edidaktikum_create_roles() {
  // Add Teacher role if not exists.
  if (user_role_load_by_name('teacher') === FALSE) {
    $teacher = new stdClass();
    $teacher->name = 'teacher';

    $administrator = user_role_load_by_name('administrator');
    // Check if administrator role is defined.
    if ($administrator !== FALSE) {
      // Assign weight of an Administrator role to Teacher
      $teacher->weight = $administrator->weight;
      // Increment role weight for Administrator
      $administrator->weight = (int) $administrator->weight + 1;

      user_role_save($administrator);
    }

    user_role_save($teacher);
  }
}

/**
 * Creates an ed_category vocabulary and fills it with top level terms.
 * Vocabulary will only be created if it does not exist yet.
 */
function edidaktikum_create_vocabulary() {
  $ed_category_vocabulary = taxonomy_vocabulary_machine_name_load('ed_category');
  if (!empty($ed_category_vocabulary)) {
    return false;
  }

  $vocabulary = new stdClass();
  $vocabulary->name = 'Kategooriad';
  $vocabulary->description = '';
  $vocabulary->machine_name = 'ed_category';
  taxonomy_vocabulary_save($vocabulary);

  $terms = array(
    0 => array(
      'title' => 'Õpetajakoolitus',
      'description' => '',
      'weight' => 0,
    ),
    1 => array(
      'title' => 'Kasvatusteadus',
      'description' => '',
      'weight' => 1,
    ),
    2 => array(
      'title' => 'Riiklik õppekava',
      'description' => '',
      'weight' => 2,
    ),
  );

  foreach ($terms as $single) {
    __edidaktikum_save_term($vocabulary->vid, $single);
  }
}

/**
 * Creates a term and assigns that to a vocabulary. Term data is provided as an
 * array that may hold an additional array of subterms.
 *
 * @param $vid
 *   A vocabulary ID.
 * @param $single
 *   An array with term information. Includes: title, description and weight.
 *   In addition an array of next level terms might be provided.
 */
function __edidaktikum_save_term($vid, $single) {
  $term = new stdClass();
  $term->name = $single['title'];
  $term->description = $single['description'];
  $term->format = 'plain_text';
  $term->vid = $vid;
  $term->weight = $single['weight'];
  $term->parent = isset($single['parent']) ? $single['parent'] : 0;
  taxonomy_term_save($term);
  if (isset($single['terms']) && is_array($single['terms']) && sizeof($single['terms']) > 0) {
    foreach ($single['terms'] as $single) {
      // Setting term parent ID
      $single['parent'] = $term->tid;
      __edidaktikum_save_term($vid, $single);
    }
  }
}

/**
 * Creates eDidaktikum fields.
 */
function edidaktikum_create_fields() {
  edidaktikum_create_field_excerpt();
  edidaktikum_create_field_content();
  edidaktikum_create_field_featured_image();
  edidaktikum_create_field_category();
}

/**
 * Creates excerpt field if not exists.
 */
function edidaktikum_create_field_excerpt() {
  $field_name = 'ed_field_excerpt';
  if (!field_info_field($field_name)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'text_long',
      'entity_types' => array('node'),
      'cardinality' => 1,
      'locked' => FALSE,
    );
    $field = field_create_field($field);
  }
}

/**
 * Creates group state field if not exists.
 */
function edidaktikum_create_field_group_state() {
  $field_name = 'ed_field_group_state';
  if (!field_info_field($field_name)) {
    $field = array(
        'field_name' => $field_name,
        'type' => 'list_boolean',
        'entity_types' => array('node'),
        'cardinality' => 1,
        'locked' => FALSE,
        'settings' => array(
            'allowed_values' => array(
                '0' => 'Inactive - new members cannot join',
                '1' => 'Active - new members can join',
            ),
        ),
    );
    field_create_field($field);
  }
}

/**
 * Creates content field if not exists.
 */
function edidaktikum_create_field_content() {
  $field_name = 'ed_field_content';
  if (!field_info_field($field_name)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'text_long',
      'entity_types' => array('node'),
      'cardinality' => 1,
      'locked' => FALSE,
    );
    $field = field_create_field($field);
  }
}

/**
 * Creates featured image field if not exists.
 */
function edidaktikum_create_field_featured_image() {
  $field_name = 'ed_field_featured_image';
  if (!field_info_field($field_name)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'image',
      'entity_types' => array('node'),
      'cardinality' => 1,
      'locked' => FALSE,
      'settings' => array(
        'uri_scheme' => 'public',
        'default_image' => 0,
      ),
    );
    $field = field_create_field($field);
  }
}

/**
 * Creates a category field if not exists.
 * Our own ed_category vocabulary is used.
 */
function edidaktikum_create_field_category() {
  $field_name = 'ed_field_category';
  if (!field_info_field($field_name)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'taxonomy_term_reference',
      'entity_types' => array('node'),
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => 'ed_category',
            'parent' => 0,
          ),
        ),
      ),
    );
    $field = field_create_field($field);
  }
}

/**
 * Updates translatable variables list to include our own.
 */
function edidaktikum_set_translatable_variables() {
  $translatable_varibles = array('ed_home_page_intro_image_url', 'ed_home_page_intro_text', 'ed_home_page_tour_text', 'ed_contact_page_contacts_text', 'ed_contact_page_logos_text', 'ed_faq_page_text', 'ed_pp_page_text');
  $variable_realm_list_language = variable_get('variable_realm_list_language', array());

  if (!empty($variable_realm_list_language)) {
    $variable_realm_list_language = array_merge($variable_realm_list_language, $translatable_varibles);
  }
  else {
    $variable_realm_list_language = $translatable_varibles;
  }
  variable_set('variable_realm_list_language', $variable_realm_list_language);
}

/**
 * Implements hook_schema().
 */
function edidaktikum_schema() {
  $schema['ed_node_like'] = array(
    'description' => 'Stores node likes.',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Node {nodes}.nid liked.',
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'User {users}.uid that liked node.',
      ),
      'timestamp' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Creation timestamp.',
      ),
    ),
    'indexes' => array(
      'creation_timestamp' => array('timestamp'),
      'uid' => array('uid'),
      'nid' => array('nid'),
    ),
    'primary key' => array('nid', 'uid'),
    'foreign keys' => array(
      'node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
      'creator' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  return $schema;
}

/**
 * Install schema.
 * */
function edidaktikum_update_7100(&$sandbox) {
  drupal_install_schema('edidaktikum');
}


/**
 * Update url_aliases table to set all languages to undefined.
 */
function edidaktikum_update_7101(&$sandbox){
  $query = db_update('url_alias')
    ->fields(array('language' => LANGUAGE_NONE));
  $query->execute();
}

/**
 * Include home page notice text as translatable variable
 */
function edidaktikum_update_7102(&$sandbox){
  $translatable_variables = array('ed_home_page_intro_notification_message');
  $variable_realm_list_language = variable_get('variable_realm_list_language', array());
  if (!empty($variable_realm_list_language)) {
    $variable_realm_list_language = array_merge($variable_realm_list_language, $translatable_variables);
  }
  else {
    $variable_realm_list_language = $translatable_variables;
  }
  variable_set('variable_realm_list_language', $variable_realm_list_language);
}

/**
 * Update module weight to avoid overriding of name fields
 */
function edidaktikum_update_7103(&$sandbox){
  db_update('system')
      ->fields(array('weight' => 10))
      ->condition('name', 'edidaktikum', '=')
      ->execute();
}


/**
 * Create ed_field_group_state field
 */
function edidaktikum_update_7104(&$sandbox){
  edidaktikum_create_field_group_state();
}

/**
* Add ed_pp_page_text as a translatable variable
*/
function edidaktikum_update_7114(&$sandbox) {
	$translatable_variables = array('ed_pp_page_text');
	$variable_realm_list_language = variable_get('variable_realm_list_language', array());
	if (!empty($variable_realm_list_language)) {
		$variable_realm_list_language = array_merge($variable_realm_list_language, $translatable_variables);
	}
	else {
		$variable_realm_list_language = $translatable_variables;
	}
	variable_set('variable_realm_list_language', $variable_realm_list_language);
}

/**
 * Fill ed_field_full_name for all usrs that have none set, only applicable to ones with hybridauth origins
 */
function edidaktikum_update_7115(&$sandbox) {
  // Initialize batch
  if (!isset($sandbox['total'])) {
    $query = db_select('users', 'u')
      ->fields('u',['uid',]);
    $query->innerJoin('hybridauth_identity', 'h', 'h.uid = u.uid');
    $query->leftJoin('field_data_ed_field_full_name', 'fn', 'fn.entity_id = u.uid');
    $query->isNull('fn.ed_field_full_name_value');

    $total = $query
      ->countQuery()
      ->execute()
      ->fetchField();

    $sandbox['total'] = $total;
    $sandbox['progress'] = 0;
    $sandbox['updated'] = 0;

    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return t('No users with empty full names exist in the database.');
    }
  }

  $query = db_select('users', 'u')
    ->fields('u', ['uid',])
    ->range(0, 10);
  $query->innerJoin('hybridauth_identity', 'h', 'h.uid = u.uid');
  $query->leftJoin('field_data_ed_field_full_name', 'fn', 'fn.entity_id = u.uid');
  $query->isNull('fn.ed_field_full_name_value');


  $uids = $query
    ->execute()
    ->fetchCol();

  if (!empty($uids)) {
    $users = user_load_multiple($uids);

    foreach ($users as $user) {
      $wrapper = entity_metadata_wrapper('user', $user->uid);
      $wrapper->ed_field_full_name->set($user->data['hybridauth']['displayName']);
      $wrapper->save();
      $sandbox['updated'] += 1;
    }
  }

  // Increment and check progress
  $sandbox['progress'] += count($uids);
  if (empty($uids) || $sandbox['progress'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
    return t('Updated @updated users out of @count with missing full names.', ['@count' => $sandbox['progress'], '@updated' => $sandbox['updated'],]);
  } else {
    $sandbox['#finished'] = $sandbox['progress'] / $sandbox['total'];
  }
}
