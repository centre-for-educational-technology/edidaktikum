<?php

require_once('ed_learning_resource_functions.inc');

/*
 * Implements hook_node_info().
 */
function ed_learning_resource_node_info() {
  $items['ed_learning_resource'] = array(
    'name' => t('Learning Resource'),
	  'type' => 'ed_learning_resource',
	  'base' => 'node_content',
	  'description' => t('Description'),
	  'has_title' => '1',
	  'title_label' => t('Title'),
	  'body_label' => t('body_label'),
  );
  return $items;
}

/*
 * Implements hook_form().
 */
function ed_learning_resource_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

function ed_learning_resource_node_view($node, $view_mode, $langcode){
  if($view_mode == 'front'){
    $node->picture = 0;
    $node->content['links']['comment'] = 0;
    
  }
  if($view_mode == 'teaser'){
    $node->picture = 0;
    drupal_add_css('ul.links.inline {display: none;}', array('group' => CSS_THEME, 'type' => 'inline'));
  }
  if($view_mode == 'teaser' && $node->type == 'ed_learning_resource'){
    
    
    
    $viewscount = ed_get_views($node->nid);    
    $likescount = ed_get_likes($node->nid);
    $termtype = taxonomy_term_load($node->ed_learning_resource_type[LANGUAGE_NONE][0]['value']);
    $authtids = array();
    $authorsforparts = array();
    if(!empty($node->ed_learning_resource_authors)){
      foreach($node->ed_learning_resource_authors[LANGUAGE_NONE] as $term){        
        array_push($authtids, $term['tid']);        
      }
      
      $termauthors = taxonomy_term_load_multiple($authtids);      
      foreach($termauthors as $author){
        array_push($authorsforparts, l($author->name, 'taxonomy/term/'.$author->tid));
      }
      $parts = array(
        l($termtype->name, 'resources/type/'.$termtype->tid),
        implode(', ', $authorsforparts),
        format_date(strtotime($node->ed_learning_resource_date[LANGUAGE_NONE][0]['value']), 'short'),
        t('Views: ').$viewscount,
        t('Likes: ').$likescount,
      );
      
    }else{
      $author = user_load($node->uid);
      $username = edidaktikum_get_full_name_for_user_account($author);
      $parts = array(
        l($termtype->name, 'resources/type/'.$termtype->tid),
        l($username, 'user/'.$node->uid),
        format_date(strtotime($node->ed_learning_resource_date[LANGUAGE_NONE][0]['value']), 'short'),
        t('Views: ').$viewscount,
        t('Likes: ').$likescount,
      );
    }
    
    
 
    $node->content['metadata'] = array(
      '#type' => 'markup',
      '#weight' => 50,
      '#markup' => implode(' / ', $parts),
      '#prefix' => '<div class="description">',
      '#suffix' => '</div>',
    );
  }
}
/*
 * Implements hook_menu().
 */
function ed_learning_resource_menu() {
//  $items['resources'] = array(
//    'title' => t('Resources'),
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('ed_learning_resource_listing'),
//    'access callback' => TRUE,
//    'weight' => 15,
//    'menu_name' => 'main-menu',
//    'type' => MENU_NORMAL_ITEM,
//  );
  $items['resources'] = array(
    'title' => t('Learning Resources'),
    'page callback' => 'ed_learning_resource_listing',
    'access callback' => TRUE,
    'weight' => 15,
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['resources/type/%'] = array(
    'title' => t('Resources'),
    'page callback' => 'ed_learning_resource_type_listing',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'file' => 'ed_learning_resource.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['resources/language/%'] = array(
    'title' => t('Resources'),
    'page callback' => 'ed_learning_resource_language_listing',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'file' => 'ed_learning_resource.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function ed_learning_resource_listing(){
  $content = array();  
  if(node_access('create', 'ed_learning_resource')){
    $content['add-new'] = array(
      '#type' => 'link',
      '#title' => t('Add new learning resource'),
      '#href' => 'node/add/ed-learning-resource',
      '#prefix' => '<div class="ed-add-new-node ed-add-new-learning-resource">',
      '#suffix' => '</div>',
    );
  }
  $content['sorting'] = drupal_get_form('_ed_get_sorting_options');
  
  $sql_order = ed_get_sorting_type($content);

  $nids = _ed_get_learning_resources($sql_order);
  if(!empty($nids)){
    $nodes = node_load_multiple($nids);    
    $build = node_view_multiple($nodes);
    $build['pager'] = array(
      '#theme' => 'pager',
      '#weight' => 5,
    );
    $content['pager']['resources'] = $build;
  }
  
  
  return $content;
}



function _ed_get_learning_resources($order){  
  $query = db_select('node', 'n')
    ->extend('PagerDefault')
    ->fields('n', array('nid'))
    ->addTag('node_access')
    ->condition('n.type', 'ed_learning_resource')
    ->condition('n.status', 1);
  if($order == 'title'){
    $query->orderBy('title', 'ASC');
  }else{
    $query->orderBy('created', $order);
  }
  
  $query->limit(ed_get_paging_nr());
  $result = $query->execute()->fetchCol();
  
  return $result;
  
  
}



function ed_learning_resource_preprocess_node(&$vars){
  if ($vars['node']->type == 'ed_learning_resource') {
    if (isset($vars['front']) && $vars['front'] == TRUE) {
      $created = $vars['node']->created;
      $vars['submitted'] = format_date($created, 'short').", ".$vars['node']->name;
    }
  }
}

function _ed_get_vid() {
  $vocab = taxonomy_vocabulary_machine_name_load('ed_category');
  $vid = $vocab->vid;
  return $vid;
}

function ed_learning_resource_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => 1);
  }
}

// Get all existing values from a tree type array.
function array_values_recursive($array) {
  $arrayValues = array();
  foreach ($array as $value) {
    if (is_scalar($value) OR is_resource($value)) {
      $arrayValues[] = $value;
    }
    elseif (is_array($value)) {
      $arrayValues = array_merge($arrayValues, array_values_recursive($value));
    }
  }
  return $arrayValues;
}

function _ed_get_resources_category($cat, $order){

  $query = db_select('node', 'n');
  $query->join('field_data_ed_field_category', 'cat', 'n.nid = cat.entity_id');
  $query->fields('n', array('nid'))
    ->addTag('node_access')
    ->condition('n.type', 'ed_learning_resource')
    ->condition('cat.ed_field_category_tid', $cat, 'IN');
  $query = $query->extend('PagerDefault')->limit(ed_get_paging_nr());
  switch($order){
    case t('Latest First'):
      $query->orderBy('n.created', 'DESC');
      break;
    case t('Earliest First'):
      $query->orderBy('n.created', 'ASC');
      break;
    case t('Title'):
      $query->orderBy('n.title', 'ASC');
      break;
  }

  //dpq($query);
  $result = $query->execute()->fetchCol();

  return $result;

}

function _ed_get_all_resources($order) {

  $query = db_select('node', 'n');
  $query->fields('n', array('nid'))
    ->addTag('node_access')
    ->condition('n.type', 'ed_learning_resource');
  $query = $query->extend('PagerDefault')->limit(ed_get_paging_nr());
  switch($order){
    case t('Latest First'):
      $query->orderBy('n.created', 'DESC');
      break;
    case t('Earliest First'):
      $query->orderBy('n.created', 'ASC');
      break;
    case t('Title'):
      $query->orderBy('n.title', 'ASC');
      break;
  }
  $result = $query->execute()->fetchCol();
  return $result;
}

function ed_get_promoted_resources(){
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'))
    ->addTag('node_access')
    ->condition('n.type', 'ed_learning_resource')
    ->condition('n.status', 1)
    ->condition('n.promote', 1)
    ->orderBy('n.created', 'DESC');
  $nids = $query->execute()->fetchCol();
  if( !empty($nids) ) {
    return $nids;
  }
  return FALSE;
}

/**
 * Implements hook_form_alter().
 */
function ed_learning_resource_form_alter(&$form, &$form_state, $form_id) {
  if ('ed_learning_resource_node_form' == $form_id) {
    if (empty($form['#node']->nid)) {
      drupal_set_title(t('Create Learning Resource'));
    }
  }
}

/**
 * Implements gook_field_formatter_info().
 */
function ed_learning_resource_field_formatter_info() {
  return array(
    'list_resource_type' => array(
      'label' => t('Learning Resource Type'),
      'field types' => array('list_integer'),
    ),
    'list_resource_language' => array(
      'label' => t('Learning Resource Language'),
      'field types' => array('list_integer'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ed_learning_resource_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'list_resource_type':
      $allowed_values = list_allowed_values($field, $instance, $entity_type, $entity);
      foreach ($items as $delta => $item) {
        if (isset($allowed_values[$item['value']])) {
          $output = field_filter_xss($allowed_values[$item['value']]);
          $output = l($output, 'resources/type/'. $item['value']);
        }
        else {
          // If no match was found in allowed values, fall back to the key.
          $output = field_filter_xss($item['value']);
        }
        $element[$delta] = array('#markup' => $output);
      }
      break;

    case 'list_resource_language':
      $allowed_values = list_allowed_values($field, $instance, $entity_type, $entity);
      foreach ($items as $delta => $item) {
        if (isset($allowed_values[$item['value']])) {
          $output = field_filter_xss($allowed_values[$item['value']]);
          $output = l($output, 'resources/language/'. $item['value']);
        }
        else {
          // If no match was found in allowed values, fall back to the key.
          $output = field_filter_xss($item['value']);
        }
        $element[$delta] = array('#markup' => $output);
      }
      break;
  }

  return $element;
}

