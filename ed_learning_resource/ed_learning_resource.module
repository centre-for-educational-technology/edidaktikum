<?php

require_once('ed_learning_resource_functions.inc');

/*
 * Implements hook_node_info().
 */
function ed_learning_resource_node_info() {
  $items['ed_learning_resource'] = array(
    'name' => t('Learning Resource'),
	  'type' => 'ed_learning_resource',
	  'base' => 'node_content',
	  'description' => t('Description'),
	  'has_title' => '1',
	  'title_label' => t('Title'),
	  'body_label' => t('body_label'),
  );
  return $items;
}

/*
 * Implements hook_form().
 */
function ed_learning_resource_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

function ed_learning_resource_node_view($node, $view_mode, $langcode){
  if($view_mode == 'front'){
    $node->picture = 0;
    $node->content['links']['comment'] = 0;
    
  }
  if($view_mode == 'teaser'){
    $node->picture = 0;
    drupal_add_css('ul.links.inline {display: none;}', array('group' => CSS_THEME, 'type' => 'inline'));
  }
}
/*
 * Implements hook_menu().
 */
function ed_learning_resource_menu() {
  $items['resources'] = array(
    'title' => t('Resources'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ed_learning_resource_listing'),
    'access callback' => TRUE,
    'weight' => 15,
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function ed_learning_resource_listing($form, &$form_state) {
  drupal_set_title(t('Learning Resources'));
  drupal_add_js(drupal_get_path('module', 'ed_learning_resource') . '/ed_learning_resource_js.js');
  $catimgpath = drupal_get_path('module', 'edidaktikum').'/images/menu_icon_small.png';
  $form['content_sort_select'] = array(
    '#type' => 'select',
    '#title' => t('Sort By'),
    '#options' => drupal_map_assoc(array(t('Latest First'), t('Earliest First'), t('Title'), t('Likes(not facebook)'))),
  );
  $term_reference_tree_path = drupal_get_path('module', 'term_reference_tree');
  $path = drupal_get_path('module', 'ed_learning_resource');
  /*$form['category'] = array(
    '#type' => 'checkbox_tree',
    '#title' => t('Filter by Category')." ".'<img src='.$catimgpath.'/>',
    '#vocabulary' => _ed_get_vid(),
    '#parent_tid' => 0,
    '#value_key' => 'tid',
    '#max_choices' => 999,
    '#leaves_only' => 0,
    '#start_minimized' => FALSE,
    '#depth' => 0,
    '#select_parents' => TRUE,
    '#attached' => array(
      'js' => array($term_reference_tree_path . '/term_reference_tree.js'),
      'css' => array($term_reference_tree_path . '/term_reference_tree.css', $path . '/ed_learning_resource_css.css'),
    ),
    '#attributes' => array('class' => array('field-widget-term-reference-tree')),
    '#element_validate' => array('_term_reference_Tree_widget_validate'),
    '#value' => array(),
    '#filter_view' => '',
    '#max_depth' => '',
    '#field_name' => '',
    '#token_display' => '',
    '#prefix' => '<div id="edit-ed-field-category">',   //Make it collapsible
    '#suffix' => '</div>',
  );*/
  $form['content_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#validate' => array(),
    '#limit_validation_errors' => array(),
  );
  $form['selection_fieldset'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div id="selection-fieldset-wrapper">',
    '#suffix' => '</div>',
  );

  $order = t('Latest First');
  if( !empty($form_state['values']['category'])){ // else{show from all categories}
    $order = ($form_state['values']['content_sort_select']);
    $form['content_sort_select']['#default_value'] = $order;
    $catAll = $form_state['values']['category'];
    $catValues = array_values_recursive($catAll);
    if( !empty($catValues) ){
      $resources = _ed_get_resources_category($catValues, $order);
      $nids = node_load_multiple($resources);
      $build = node_view_multiple($nids);
      $build['pager'] = array(
        '#theme' => 'pager',
        '#weight' => 5,
      );
      $form['selection_fieldset']['resources'] = $build;
    }
  }
  else{
    if(!empty($form_state['values']['content_sort_select'])){
      $order = ($form_state['values']['content_sort_select']);
    }
    $resources = _ed_get_all_resources($order);
    $nids = node_load_multiple($resources);
    $build = node_view_multiple($nids);
    $build['pager'] = array(
      '#theme' => 'pager',
      '#weight' => 5,
    );
    $form['selection_fieldset']['resources'] = $build;
  }
  return $form;
}

function ed_learning_resource_listing_submit($form, &$form_state) {
  switch($form_state['triggering_element']['#value']) {
    case t('Search'):
      $form_state['values']['content_sort_select'] = $form_state['input']['content_sort_select'];
      //$help = array_values_recursive($form_state['input']['category']);
      $help = array();
      if(!empty($help)){
        $form_state['values']['category'] = $help;
      }
    default:
      $form_state['rebuild'] = TRUE;
  }
}

function ed_learning_resource_preprocess_node(&$vars){
  if (isset($vars['front']) && $vars['front'] == TRUE && $vars['node']->type == 'ed_learning_resource') {
    $created = $vars['node']->created;
    $vars['submitted'] = format_date($created, 'short').", ".$vars['node']->name;
  }
}

function _ed_get_vid() {
  $vocab = taxonomy_vocabulary_machine_name_load('ed_category');
  $vid = $vocab->vid;
  return $vid;
}

function ed_learning_resource_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => 1);
  }
}

// Get all existing values from a tree type array.
function array_values_recursive($array) {
  $arrayValues = array();
  foreach ($array as $value) {
    if (is_scalar($value) OR is_resource($value)) {
      $arrayValues[] = $value;
    }
    elseif (is_array($value)) {
      $arrayValues = array_merge($arrayValues, array_values_recursive($value));
    }
  }
  return $arrayValues;
}

function _ed_get_resources_category($cat, $order){

  $query = db_select('node', 'n');
  $query->join('field_data_ed_field_category', 'cat', 'n.nid = cat.entity_id');
  $query->fields('n', array('nid'))
    ->addTag('node_access')
    ->condition('n.type', 'ed_learning_resource')
    ->condition('cat.ed_field_category_tid', $cat, 'IN');
  $query = $query->extend('PagerDefault')->limit(ed_get_paging_nr());
  switch($order){
    case t('Latest First'):
      $query->orderBy('n.created', 'DESC');
      break;
    case t('Earliest First'):
      $query->orderBy('n.created', 'ASC');
      break;
    case t('Title'):
      $query->orderBy('n.title', 'ASC');
      break;
  }

  //dpq($query);
  $result = $query->execute()->fetchCol();

  return $result;

}

function _ed_get_all_resources($order) {

  $query = db_select('node', 'n');
  $query->fields('n', array('nid'))
    ->addTag('node_access')
    ->condition('n.type', 'ed_learning_resource');
  $query = $query->extend('PagerDefault')->limit(ed_get_paging_nr());
  switch($order){
    case t('Latest First'):
      $query->orderBy('n.created', 'DESC');
      break;
    case t('Earliest First'):
      $query->orderBy('n.created', 'ASC');
      break;
    case t('Title'):
      $query->orderBy('n.title', 'ASC');
      break;
  }
  $result = $query->execute()->fetchCol();
  return $result;
}

function ed_get_promoted_resources(){
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'))
    ->addTag('node_access')
    ->condition('n.type', 'ed_learning_resource')
    ->condition('n.status', 1)
    ->condition('n.promote', 1)
    ->orderBy('n.created', 'DESC');
  $nids = $query->execute()->fetchCol();
  if( !empty($nids) ) {
    return $nids;
  }
  return FALSE;
}
