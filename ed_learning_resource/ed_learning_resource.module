<?php

require_once('ed_learning_resource_functions.inc');

/*
 * Implements hook_node_info().
 */
function ed_learning_resource_node_info() {
  $items['ed_learning_resource'] = array(
    'name' => t('Learning Resource'),
	  'type' => 'ed_learning_resource',
	  'base' => 'node_content',
	  'description' => t('Description'),
	  'has_title' => '1',
	  'title_label' => t('Title'),
	  'body_label' => t('body_label'),
  );
  return $items;
}

/*
 * Implements hook_form().
 */
function ed_learning_resource_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

function ed_learning_resource_node_view($node, $view_mode, $langcode){
  if($view_mode == 'front'){
    $node->picture = 0;
    $node->content['links']['comment'] = 0;
    
  }
  if($view_mode == 'teaser'){
    $node->picture = 0;
    drupal_add_css('ul.links.inline {display: none;}', array('group' => CSS_THEME, 'type' => 'inline'));
  }
  if($view_mode == 'teaser' && $node->type == 'ed_learning_resource'){
    
    
    
    $viewscount = ed_get_views($node->nid);
    $likescount = ed_get_likes($node->nid);
    $termtype = taxonomy_term_load($node->ed_learning_resource_type[LANGUAGE_NONE][0]['value']);
    $authtids = array();
    $authorsforparts = array();
    if(!empty($node->ed_learning_resource_authors)){
      foreach($node->ed_learning_resource_authors[LANGUAGE_NONE] as $term){
        array_push($authtids, $term['tid']);
      }
      
      $termauthors = taxonomy_term_load_multiple($authtids);
      foreach($termauthors as $author){
        array_push($authorsforparts, l($author->name, 'taxonomy/term/'.$author->tid));
      }
      $parts = array(
        l($termtype->name, 'resources/type/'.$termtype->tid),
        implode(', ', $authorsforparts),
        //format_date(strtotime($node->ed_learning_resource_date[LANGUAGE_NONE][0]['value']), 'short'),
        t('Views: ').$viewscount,
        t('Likes: ').$likescount,
      );
      
    }else{
      $author = user_load($node->uid);
      $username = edidaktikum_get_full_name_for_user_account($author);
      $parts = array(
        l($termtype->name, 'resources/type/'.$termtype->tid),
        l($username, 'user/'.$node->uid),
        //format_date(strtotime($node->ed_learning_resource_date[LANGUAGE_NONE][0]['value']), 'short'),
        t('Views: ').$viewscount,
        t('Likes: ').$likescount,
      );
    }
    
    
 
    $node->content['metadata'] = array(
      '#type' => 'markup',
      '#weight' => 50,
      '#markup' => implode(' / ', $parts),
      '#prefix' => '<div class="description">',
      '#suffix' => '</div>',
    );
  } else if ($view_mode == 'eref_contained' && $node->type == 'ed_learning_resource') {
	// Remove comment from links
	if (isset($node->content['links']['comment'])) {
	  $node->content['links']['comment']['#access'] = FALSE;
	}
	
    // TODO Use some default image if not provided
    if(!empty($node->ed_field_featured_image)){
      $imgpath = image_style_url('thumbnail', $node->ed_field_featured_image[LANGUAGE_NONE][0]['uri']);

      $node->content['cover-image'] = array(
        '#type' => 'markup',
        '#weight' => 5,
        '#markup' => '<img src="'.$imgpath.'"/>',
        '#prefix' => '<div class="cover-image">',
        '#suffix' => '</div>',
      );
    }

    $author = user_load($node->uid);
    $views_count = ed_get_views($node->nid);
    $likes_count = ed_get_likes($node->nid);
    $username = edidaktikum_get_full_name_for_user_account($author);

    $parts = array(
      '<span class="single-creator">' . l($username, 'user/'.$node->uid) . '</span>',
      '<span clss="single-icon-holder"><i class="fa fa-eye"> ' . $views_count . '</i></span>',
      '<span class="single-icon-holder"><i class="fa fa-heart"> ' . $likes_count . '</i></span>',
    );

    $node->content['metadata'] = array(
      '#type' => 'markup',
      '#weight' => 50,
      '#markup' => implode(' ', $parts),
      '#prefix' => '<div class="description">',
      '#suffix' => '</div>',
    );
  }
}
/*
 * Implements hook_menu().
 */
function ed_learning_resource_menu() {
//  $items['resources'] = array(
//    'title' => t('Resources'),
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('ed_learning_resource_listing'),
//    'access callback' => TRUE,
//    'weight' => 15,
//    'menu_name' => 'main-menu',
//    'type' => MENU_NORMAL_ITEM,
//  );
  $items['video-bricks'] = array(
      'title' => t('Video Bricks'),
      'page callback' => 'ed_learning_resource_video_bricks_listing_page',
      'access callback' => TRUE,
      'weight' => 10,
//      'menu_name' => 'main-menu',
//      'type' => MENU_NORMAL_ITEM,
  );
  $items['resources'] = array(
    'title' => t('Learning Resources'),
    'page callback' => 'ed_learning_resource_listing',
    'access callback' => TRUE,
    'weight' => 15,
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['resources/type/%'] = array(
    'title' => t('Resources'),
    'page callback' => 'ed_learning_resource_type_listing',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'file' => 'ed_learning_resource.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['resources/language/%'] = array(
    'title' => t('Resources'),
    'page callback' => 'ed_learning_resource_language_listing',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'file' => 'ed_learning_resource.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_views_api().
 */
function ed_learning_resource_views_api() {
  return array(
      'api' => 3,
      'path' => drupal_get_path('module', 'ed_learning_resource') . '/includes/views',
  );
}

function ed_learning_resource_listing_from_group($gnode){
  drupal_add_js(drupal_get_path('module', 'edidaktikum') . '/js/ed_likes.js', 'file');

  $content = array();

  $destination = _ed_cluster_destination_for_group_node_type($gnode, 'ed_learning_resource');

  $content = ed_generate_resource_create_buttons($content, $gnode, $destination);

  $content['sorting'] = drupal_get_form('_ed_get_sorting_options');

  $sql_order = ed_get_sorting_type($content);

  $nids = _ed_get_group_content_by_type($gnode->nid, 'ed_learning_resource', $sql_order);




  $nodes = node_load_multiple($nids);
  $build = node_view_multiple($nodes);
  $build['pager'] = array(
      '#theme' => 'pager',
      '#weight' => 5,
  );
  $content['pager']['resources'] = $build;


  drupal_add_js('jQuery(document).ready(function(){
    jQuery(".collection").matchHeight();
    });','inline');

  $pager = theme('pager');

  $output =  theme('ed_learning_resource', array(
          'nodes' => $nodes,
          'gnode' => $gnode
      )
  );

  $output = $output . $pager;

  return $output;

}


function ed_learning_resource_video_bricks_listing_page(){
  drupal_add_css('.page-collections .node-ed-collection .single-publishing-status { display: none; }', $option['type'] = 'inline');


  $nodes = ed_learning_resource_get_video_bricks();
  if(!empty($nodes)){
    $build = node_view_multiple($nodes);

    $content['pager_table'] = $build;
    $content['pager_pager'] = array('#theme' => 'pager');

  }
  drupal_add_js('jQuery(document).ready(function(){
        jQuery(".video-bricks").matchHeight();
        });','inline');

  $pager = theme('pager');

  $output =  theme('video-bricks', array(
          'nodes' => $nodes,
      )
  );


  $output = $output . $pager;

  return $output;

  //return $content;
}


/**
 * Published Video bricks type learning resource nodes.
 * Support pagination
 */
function ed_learning_resource_get_video_bricks() {
  $query = db_select('node', 'n');
  $query->join('field_data_ed_field_resource_type', 'type', 'n.nid = type.entity_id');
  $query->fields('n', array('nid'))
      ->condition('n.type', 'ed_learning_resource')
      ->condition('type.ed_field_resource_type_value', 2)
      ->condition('n.status', 1)
      ->addTag('node_access')
      ->range();

  $query = $query->extend('PagerDefault')->limit(ed_get_paging_nr());

  $result = $query->execute()->fetchCol();

  $nodes = node_load_multiple($result);

  return $nodes;
}



function _ed_get_learning_resources($order){  
  $query = db_select('node', 'n')
    ->extend('PagerDefault')
    ->fields('n', array('nid'))
    ->addTag('node_access')
    ->condition('n.type', 'ed_learning_resource')
    ->condition('n.status', 1);
  if($order == 'title'){
    $query->orderBy('title', 'ASC');
  }else{
    $query->orderBy('created', $order);
  }
  
  $query->limit(ed_get_paging_nr());
  $result = $query->execute()->fetchCol();
  
  return $result;
  
  
}



function ed_learning_resource_preprocess_node(&$vars){
  if ($vars['node']->type == 'ed_learning_resource') {
    if (isset($vars['front']) && $vars['front'] == TRUE) {
      $created = $vars['node']->created;
      $vars['submitted'] = format_date($created, 'short').", ".$vars['node']->name;
    }
	
	
	  drupal_add_js(drupal_get_path('module', 'edidaktikum') . '/js/ed_likes.js', 'file');
	  drupal_add_js(drupal_get_path('module', 'edidaktikum') . '/js/ed_share.js', 'file');
	
	  if($vars['view_mode'] == 'full'){
	    if($vars['node']->ed_field_resource_type[LANGUAGE_NONE][0]['value'] == 2){
        $vars['theme_hook_suggestions'][] = 'node__ed_learning_resource_full_video';
      }else{
        $vars['theme_hook_suggestions'][] = 'node__ed_learning_resource_full';
      }

	  }else if($vars['view_mode'] == 'eref_contained'){
      $vars['theme_hook_suggestions'][] = 'node__ed_learning_resource_eref_contained';
    }
  }
}


function ed_learning_resource_field_formatter_info() {
  return array(
      'my_formatter' => array(
          'label' => t('Bold formatter'),
          'field types' => array('ed_field_excerpt'),
      ),
  );
}

function ed_learning_resource_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $element = array();

  if ($display['type'] == 'my_formatter') {
    foreach ($items as $delta => $item) {
      $element[$delta] = array('#markup' => $item['value']);
    }
  }

  return $element;
}



function _ed_get_vid() {
  $vocab = taxonomy_vocabulary_machine_name_load('ed_category');
  $vid = $vocab->vid;
  return $vid;
}

function ed_learning_resource_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => 1);
  }
}

// Get all existing values from a tree type array.
function array_values_recursive($array) {
  $arrayValues = array();
  foreach ($array as $value) {
    if (is_scalar($value) OR is_resource($value)) {
      $arrayValues[] = $value;
    }
    elseif (is_array($value)) {
      $arrayValues = array_merge($arrayValues, array_values_recursive($value));
    }
  }
  return $arrayValues;
}

function _ed_get_resources_category($cat, $order){

  $query = db_select('node', 'n');
  $query->join('field_data_ed_field_category', 'cat', 'n.nid = cat.entity_id');
  $query->fields('n', array('nid'))
    ->addTag('node_access')
    ->condition('n.type', 'ed_learning_resource')
    ->condition('cat.ed_field_category_tid', $cat, 'IN');
  $query = $query->extend('PagerDefault')->limit(ed_get_paging_nr());
  switch($order){
    case t('Latest First'):
      $query->orderBy('n.created', 'DESC');
      break;
    case t('Earliest First'):
      $query->orderBy('n.created', 'ASC');
      break;
    case t('Title'):
      $query->orderBy('n.title', 'ASC');
      break;
  }

  //dpq($query);
  $result = $query->execute()->fetchCol();

  return $result;

}

function _ed_get_all_resources($order) {

  $query = db_select('node', 'n');
  $query->fields('n', array('nid'))
    ->addTag('node_access')
    ->condition('n.type', 'ed_learning_resource');
  $query = $query->extend('PagerDefault')->limit(ed_get_paging_nr());
  switch($order){
    case t('Latest First'):
      $query->orderBy('n.created', 'DESC');
      break;
    case t('Earliest First'):
      $query->orderBy('n.created', 'ASC');
      break;
    case t('Title'):
      $query->orderBy('n.title', 'ASC');
      break;
  }
  $result = $query->execute()->fetchCol();
  return $result;
}

function ed_get_promoted_resources(){
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'))
    ->addTag('node_access')
    ->condition('n.type', 'ed_learning_resource')
    ->condition('n.status', 1)
    ->condition('n.promote', 1)
    ->orderBy('n.created', 'DESC');
  $nids = $query->execute()->fetchCol();
  if( !empty($nids) ) {
    return $nids;
  }
  return FALSE;
}


function ed_add_js_to_learning_resource_form($form_element, &$form_state) {


  drupal_add_js(array('ed_learning_resource' => _ed_learning_resource_get_methodical_and_practice_tax_ids()), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'ed_learning_resource') . '/ed_learning_resource_js.js');

  return $form_element;

}

/**
 * Implements hook_form_alter().
 */
function ed_learning_resource_form_alter(&$form, &$form_state, $form_id) {
  if ('ed_learning_resource_node_form' == $form_id) {



    $form['#after_build'] = array('ed_add_js_to_learning_resource_form');

    //drupal_add_js(drupal_get_path('module', 'ed_learning_resource') . '/ed_learning_resource_js.js', 'file');


    if(isset($form['#node']->ed_field_resource_type)){
      $resource_type = $form['#node']->ed_field_resource_type[LANGUAGE_NONE][0]['value'];
    }
    else {
      $resource_type = $_GET['field_resource_type'];

      $form['ed_field_resource_type']['und'][0]['value']['#default_value'] = $resource_type;

    }



    $form['ed_field_resource_type']['#attributes']['style'][] = 'display:none';



    if($resource_type==2){
      drupal_set_title(t('Create Video Brick Type Resource'));
      $form['ed_learning_resource_authors']['und']['#access'] = 0;
      $form['ed_field_to_group_member']['und']['#access'] = 0;
      $form['ed_g_drive_file']['und']['#access'] = 0;


    }else{
      drupal_set_title(t('Create Learning Resource'));
      $form['ed_field_training_url']['und']['#access'] = 0;
      $form['ed_field_trailer_url']['und']['#access'] = 0;
      $form['ed_field_video_url']['und']['#access'] = 0;
      $form['ed_field_video_resource_ref']['und']['#access'] = 0;
//      $form['ed_field_external_res_url']['#attributes']['style'][] = 'display:none';

    }

  }
}


function ed_generate_resource_create_buttons(&$content, $gnode, $destination){
  $options_type1 = array(
      'attributes' => array(
          'class' => 'btn btn-success new-group price-btn',
          'role' => 'button'
      ),
      'query' => array(
          'field_resource_type' => 1,
          'og_group_ref' => $gnode->nid,
          'destination' => $destination
      ),
  );
  $options_type2 = array(
      'attributes' => array(
          'class' => 'btn btn-success new-group price-btn',
          'role' => 'button'
      ),
      'query' => array(
          'field_resource_type' => 2,
          'og_group_ref' => $gnode->nid,
          'destination' => $destination
      ),
  );

  $content['new-resource-buttons'] = array(
      '#type' => 'markup',
      '#prefix' => '<div class="new-group-buttons">',
      '#suffix' => '</div>',
  );
  $content['new-resource-buttons']['add-new-type-1'] = array(
      '#type' => 'item',
      '#title' => t(''),
      '#markup' => l(t('New Learnng resource'), 'node/add/ed-learning-resource', $options_type1),

  );
  $content['new-resource-buttons']['add-new-type-2'] = array(
      '#type' => 'item',
      '#title' => t(''),
      '#markup' => l(t('New Video brick type resource'), 'node/add/ed-learning-resource', $options_type2),
  );


  return $content;
}

/**
 * Implements gook_field_formatter_info().
 */
//function ed_learning_resource_field_formatter_info() {
////  return array(
////    'list_resource_type' => array(
////      'label' => t('Learning Resource Type'),
////      'field types' => array('list_integer'),
////    ),
////    'list_resource_language' => array(
////      'label' => t('Learning Resource Language'),
////      'field types' => array('list_integer'),
////    ),
////      'ed_field_external_res_url_default' => array(
////          'label' => t('Default'),
////          'field types' => array('ed_field_external_res_url'),
////      ),
////  );
////}

/**
 * Implements hook_field_formatter_view().
 */
//function ed_learning_resource_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
//  $element = array();
//
//  switch ($display['type']) {
//    case 'list_resource_type':
//      $allowed_values = list_allowed_values($field, $instance, $entity_type, $entity);
//      foreach ($items as $delta => $item) {
//        if (isset($allowed_values[$item['value']])) {
//          $output = field_filter_xss($allowed_values[$item['value']]);
//          $output = l($output, 'resources/type/'. $item['value']);
//        }
//        else {
//          // If no match was found in allowed values, fall back to the key.
//          $output = field_filter_xss($item['value']);
//        }
//        $element[$delta] = array('#markup' => $output);
//      }
//      break;
//
//    case 'list_resource_language':
//      $allowed_values = list_allowed_values($field, $instance, $entity_type, $entity);
//      foreach ($items as $delta => $item) {
//        if (isset($allowed_values[$item['value']])) {
//          $output = field_filter_xss($allowed_values[$item['value']]);
//          $output = l($output, 'resources/language/'. $item['value']);
//        }
//        else {
//          // If no match was found in allowed values, fall back to the key.
//          $output = field_filter_xss($item['value']);
//        }
//        $element[$delta] = array('#markup' => $output);
//      }
//      break;
//
//    case 'ed_field_external_res_url_default' :
//      foreach ($items as $delta => $item) {
//        if (isset($item['ed_field_external_res_url_value'])) {
//          $item['ed_field_external_res_url_value'];
//        }
//      }
//      break;
//  }
//
//  return $element;
//}


/**
 * Generate YT iframe from link like youtu.be/...
 * @param $url
 * @return null|string|string[]
 */
function ed_learning_resource_generate_youtube_iframe($url){

  $result =  preg_replace("/\s*[a-zA-Z\/\/:\.]*youtu.be\/([a-zA-Z0-9\-_]+)([a-zA-Z0-9\/\*\-\_\?\&\;\%\=\.]*)/i","<iframe class='video_frame embed-responsive-item' width=\"420\" height=\"525\" src=\"//www.youtube.com/embed/$1\" frameborder=\"0\" allowfullscreen></iframe>",$url);

  return $result;
}

/**
 * Get taxonomy values for the learning resource taxinony types "Metoodilised leheküljed" and "Muu maailma kogemus"
 * @param $url
 * @return null|string|string[]
 */
function _ed_learning_resource_get_methodical_and_practice_tax_ids(){
  $resource_types = _ed_learning_resource_type_list();

  $methodical_resource_tax_id = array_search('Metoodilised leheküljed', $resource_types);
  $best_practice_tax_id = array_search('Muu maailma kogemus', $resource_types);

  return array('methodical_resource_tax_id'=> $methodical_resource_tax_id, 'best_practice_tax_id' => $best_practice_tax_id);
}


/**
 * Get contents of the linked "Metoodilised leheküljed" and "Muu maailma kogemus" resources
 * @param $node
 * @return array|null
 */
function ed_learning_resource_get_related_res($node){

  if(!empty($node->ed_field_video_resource_ref)){

    $methodical_resources = array();
    $best_practice_resources = array();

    $resource_types = _ed_learning_resource_type_list();


    $methodical_resource_tax_id = array_search('Metoodilised leheküljed', $resource_types);
    $best_practice_tax_id = array_search('Muu maailma kogemus', $resource_types);


    foreach ($node->ed_field_video_resource_ref[LANGUAGE_NONE] as $item){

      $wrapper = entity_metadata_wrapper('node', $item['target_id']);


      if($wrapper->ed_learning_resource_type->value() == $methodical_resource_tax_id){
        //Methodical resource
        $title = $wrapper->title->value();
        $content = $wrapper->ed_field_content->value();
        if($wrapper->__isset('ed_field_external_res_url')){
          $url = $wrapper->ed_field_external_res_url->value()['value'];
        }else{
          $url = null;
        }

        array_push($methodical_resources, array('nid' => $item['target_id'], 'title' => $title, 'content' => $content, 'url' => $url));

      }elseif ($wrapper->ed_learning_resource_type->value() == $best_practice_tax_id){
        //Best practice resource
        $title = $wrapper->title->value();
        $content = $wrapper->ed_field_content->value();
        if($wrapper->__isset('ed_field_external_res_url')){
          $url = $wrapper->ed_field_external_res_url->value()['value'];
        }else{
          $url = null;
        }

        array_push($best_practice_resources, array('nid' => $item['target_id'], 'title' => $title, 'content' => $content, 'url' => $url));
      }

    }

    return array('methodical_res' => $methodical_resources, 'best_practice' => $best_practice_resources);
  }

  return null;

}
