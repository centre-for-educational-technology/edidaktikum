<?php

/**
 * @file
 * eDidaktikum portfolio module.
 */

/**
 * Implements hook_menu().
 */
function ed_portfolio_menu()
{
  $items['dashboard/portfolio'] = array(
    'title' => 'Portfolio',
    'page callback' => 'ed_portfolio_listing_page',
    'access callback' => 'user_is_logged_in',
    'weight' => 5,
    'menu_name' => 'ed-dashboard-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['portfolio/%'] = array(
    'page callback' => 'ed_portfolio_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  $items['node/%node/competencies'] = array(
    'title' => 'My competency profile',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array(1),
    'page callback' => 'ed_competency_profile_page',
    'access callback' => 'ed_portfolio_competency_profile_access',
    'access arguments' => array(1),
  );
  return $items;
}


/**
 * https://api.drupal.org/comment/50023#comment-50023
 */
function taxonomy_get_nested_tree($vid_or_terms = array(), $max_depth = NULL, $parent = 0, $parents_index = array(), $depth = 0)
{

  if (!is_array($vid_or_terms)) {
    $vid_or_terms = taxonomy_get_tree($vid_or_terms);
  }

  foreach ($vid_or_terms as $term) {

    foreach ($term->parents as $term_parent) {
      if ($term_parent == $parent) {
        $return[$term->tid] = $term;
      } else {
        $parents_index[$term_parent][$term->tid] = $term;
      }
    }
  }

  foreach ($return as &$term) {
    if (isset($parents_index[$term->tid]) && (is_null($max_depth) || $depth < $max_depth)) {
      $term->children = taxonomy_get_nested_tree($parents_index[$term->tid], $max_depth, $term->tid, $parents_index, $depth + 1);
    }
  }

  return $return;
}

function ed_portfolio_competency_profile_access($node)
{
  if ($node->type != 'ed_portfolio') {
    return false;
  }

//if anonymous user deny
  if (user_is_anonymous()) {
    return false;
  }
  return true;
}


function ed_competency_profile_page($node)
{

  $content = array();

  //set title to User full name + portfolio title
  $user = user_load($node->uid);
  $title = $user->ed_field_full_name[LANGUAGE_NONE][0]['value'] . ' - ' . $node->title;
  drupal_set_title($title);

  drupal_add_js(drupal_get_path('module', 'ed_portfolio') . '/js/progressbar.min.js', 'file');


  //SUPER PANEL
  if (!empty($node->ed_q_portfolio_field_level)) {
    $selected_level = $node->ed_q_portfolio_field_level[LANGUAGE_NONE][0]['value'];
  } else {
    $selected_level = null;
  }


  $user = $node->uid;
  $competency_desc = $node->ed_portfolio_competence_desc;


  if ($selected_level) {

    $terms = taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('ed_competence_voc')->vid, $selected_level, 1);

    $js_settings = array();

    foreach ($terms as $key => $term) {

      //Get sub-competencies for a given term
      $subterms = taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('ed_competence_voc')->vid, $term->tid, 1);


      //Get 'name' from array of $subterms
      $subterms_names = array_map(function ($subterm) {
        return $subterm->name;
      }, $subterms);

      //Convert $subterms_names to string
      $subterms_names_string = implode(', ', $subterms_names);


      $complete_level = _ed_portfolio_get_complete_level_for_competency($user, $term->tid);

      //Progress made
      $js_settings[$key] = $complete_level;

      $shown_content = array();


      if (!empty($competency_desc)) {
        foreach ($competency_desc[LANGUAGE_NONE] as $value) {


          if ($value['tid'] == $term->tid) {

            $desc = $value['answers'];
            $shown_content = drupal_json_decode($value['cid']);

            $content['competency'][$key]['#prefix'] = '<div class="jumbotron jumbotron-portfolio">';
            $content['competency'][$key]['#suffix'] = '</div>';

            // parent term
            $content['competency'][$key]['name'] = array(
              '#type' => 'item',
              '#markup' => $term->name,
              '#prefix' => '<h3>',
              '#suffix' => '</h3>',
            );

            $content['competency'][$key]['progress'] = array(
              '#type' => 'item',
              '#markup' => '<div id="progress-' . $key . '" class="progress"></div>',
            );

          }
        }
      }

      $rows = array();

      if (!empty($shown_content)) {
        //content items
        foreach ($shown_content as $item_key => $nid) {

          $query = db_select('node', 'n');
          $query->fields('n', array('title', 'changed'));
          $query->condition('n.nid', $nid);
          $node = $query->execute()->fetchAll();

          if (empty($node[0]->title)) {
            //This is answer node with no title in db
            $rows[$nid] = array(
              'title' => l(ed_get_answer_title(node_load($nid)), 'node/' . $nid),
              'subsection' => $subterms_names_string,
              'date' => format_date($node[0]->changed, 'short'),
            );
          } else {
            $rows[$nid] = array(
              'title' => l($node[0]->title, 'node/' . $nid),
              'subsection' => $subterms_names_string,
              'date' => format_date($node[0]->changed, 'short'),
            );
          }


        }

        $header = array(
          'title' => t('Title'),
          'subsection' => t('Competency subsection'),
          'date' => t('Date'),
        );


        $content['competency'][$key]['table'] = [
          '#theme' => 'table',
          '#rows' => $rows,
          '#header' => $header
        ];


      }

      if (!empty($desc)) {

        $desc = drupal_json_decode($desc);
        foreach ($desc as $answer_key => $value) {
          //Load term competency
          $term_competency = taxonomy_term_load($answer_key);
          $content['competency'][$key]['desc'][$answer_key] = array(
            '#type' => 'markup',
            '#prefix' => '<p style="font-size: large; font-weight: bold;">' . $term_competency->ed_competence_question_field[LANGUAGE_NONE][0]['value'] . '</p>',
            '#markup' => check_markup($value['value'], $value['format'])
          );
        }
      }

    }


    drupal_add_js(array('ed_portfolio' => $js_settings), array('type' => 'setting'));
    drupal_add_js(drupal_get_path('module', 'ed_portfolio') . '/js/ed_portfolio_edit.js', 'file');

  }

  return $content;

}


/**
 * Portfolios listing page.
 */
function ed_portfolio_listing_page()
{
  menu_tree_set_path('main-menu', 'dashboard');
  //drupal_add_css('ul.links.inline {display: none;}', array('group' => CSS_THEME, 'type' => 'inline'));
  $content = array();

  $content['add-new-container'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('ed-add-new-node', 'ed-add-new-ed-portfolio'),
    ),
  );
  $content['add-new-container']['add-new-portfolio'] = array(
    '#type' => 'link',
    '#title' => t('Add new portfolio'),
    '#href' => 'node/add/ed-portfolio',
  );

  $table_type = 'pager-table';
  $user_portfolio_ids = ed_portfolio_get_user_portfolios();
  $nodes = node_load_multiple($user_portfolio_ids);
  $rows = array();
  foreach ($nodes as $node) {
    if ($node->status == '1') {
      $status = '<span class="pub-portfolio">' . t('Public') . '</span>';
    } else if ($node->status == '0') {
      $status = '<span class="priv-portfolio">' . t('Private') . '</span>';
    } else {
      $status = t('error');
    }
    $rows[] = array(
      'data' => array(
        'status' => $status,
        'title' => l($node->title, 'node/' . $node->nid),
        'created' => format_date($node->created, 'custom', 'd/m/Y'),
      ),
    );
  }
  $content[$table_type] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#header' => array(t('Status'), t('Title'), t('Date')),
  );
  $content['pager'] = array('#theme' => 'pager');

  drupal_add_css('span.pub-portfolio {color:green;}', array('group' => CSS_THEME, 'type' => 'inline'));
  drupal_add_css('span.priv-portfolio {color:red;}', array('group' => CSS_THEME, 'type' => 'inline'));


  return $content;
}

/**
 * User portfolio ids.
 */
function ed_portfolio_get_user_portfolios()
{
  global $user;
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.type', 'ed_portfolio')
    ->condition('n.uid', $user->uid)
    ->addTag('node_access')
    ->range()
    ->orderBy('n.created', 'DESC');
  $nids = $query->execute()->fetchCol();
  return $nids;
}

function ed_portfolio_page($portfolio_id)
{
  $portfolio = node_load($portfolio_id);
  if ($portfolio && $portfolio->type == 'ed_portfolio') {
    echo theme('ed_portfolio_page', array('node_view' => node_view($portfolio, 'entity_view')));
    return NULL;
  }
  return array();
}

function ed_portfolio_theme($existing, $type, $theme, $path)
{
  return array(
    'ed_portfolio_page' => array(
      'variables' => array('node_view' => '', 'site_name' => variable_get('site_name', 'Drupal'), 'front_page' => variable_get('site_frontpage')),
      'template' => 'ed_portfolio_page',
      'path' => drupal_get_path('module', 'ed_portfolio'),
      'render element' => 'element',
    ),
  );
}


/**
 * Implements hook_ctools_plugin_api().
 */
function ed_portfolio_ctools_plugin_api()
{
  list($module, $api) = func_get_args();
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_views_api().
 */
function ed_portfolio_views_api()
{
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ed_portfolio') . '/includes/views',
  );
}


/**
 * Implements hook_form_alter().
 */
function ed_portfolio_form_alter(&$form, &$form_state, $form_id)
{
  if ('ed_portfolio_node_form' == $form_id) {


    drupal_add_js(drupal_get_path('module', 'ed_portfolio') . '/js/progressbar.min.js', 'file');


    if (isset($form_state['storage']['nid']) && $form_state['storage']['nid']) {
      $form['#node']->nid = $form_state['storage']['nid'];
    }

    if (empty($form['#node']->nid)) {
      drupal_set_title(t('Create Portfolio'));
    }


    $form['ed_portfolio_competence_desc']['#prefix'] = '<div style="display:none;">';
    $form['ed_portfolio_competence_desc']['#suffix'] = '</div>';

    $form['#tree'] = TRUE;


    if (!empty($form['#node']->nid)) {
      $form['add_more'] = array(
        '#type' => 'button',
        '#value' => t('Save and continue'),
        '#weight' => $form['ed_q_portfolio_field_level']['#weight'] + 1,
        '#attributes' => array('class' => array('ed-add-new-node')),
        '#disabled' => true,
      );
      $form['ed_q_portfolio_field_level']['#disabled'] = true;
    } else {
      $form['add_more'] = array(
        '#type' => 'button',
        '#value' => t('Save and continue'),
        '#weight' => $form['ed_q_portfolio_field_level']['#weight'] + 1,
        '#attributes' => array('class' => array('ed-add-new-node')),
        '#ajax' => array(
          'callback' => 'ed_portfolio_get_competencies_ajax_callback',
          'wrapper' => 'names-fieldset-wrapper',
          'method' => 'replace',
        ),
      );
    }


    $form['competency'] = array(
      '#type' => 'fieldset',
      '#title' => t('My competencies'),
      '#weight' => $form['ed_q_portfolio_field_level']['#weight'] + 2,
      '#tree' => true,
      '#attributes' => array('id' => 'names-fieldset-wrapper'),
    );


    //SUPER PANEL
    if (isset($form_state['input']['ed_q_portfolio_field_level'])) {
      $selected_level = $form_state['input']['ed_q_portfolio_field_level'][LANGUAGE_NONE];
    } else if (isset($form['#node']->ed_q_portfolio_field_level[LANGUAGE_NONE][0]['value'])) {
      $selected_level = $form['#node']->ed_q_portfolio_field_level[LANGUAGE_NONE][0]['value'];
    } else {
      $selected_level = null;
    }

    if ($selected_level) {


      $terms = taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('ed_competence_voc')->vid, $selected_level, 1);


      $js_settings = array();

      foreach ($terms as $key => $term) {

        $nids = _ed_portfolio_get_content_for_parent_competency($form_state['node']->uid, $term->tid);
        $questions = _ed_portfolio_get_questions_for_parent_competency($term->tid);
        $complete_level = _ed_portfolio_get_complete_level_for_competency($form_state['node']->uid, $term->tid);


        $form['competency'][$key]['#prefix'] = '<div class="jumbotron">';
        $form['competency'][$key]['#suffix'] = '</div>';
        // parent term
        $form['competency'][$key]['name'] = array(
          '#type' => 'item',
          '#markup' => $term->name,
          '#prefix' => '<h3>',
          '#suffix' => '</h3>',
        );

        $form['competency'][$key]['progress'] = array(
          '#type' => 'item',
          '#markup' => '<div id="progress-' . $key . '" class="progress"></div>',
        );

        //Progress made
        $js_settings[$key] = $complete_level;

        $form['competency'][$key]['tid'] = array(
          '#type' => 'hidden',
          '#value' => $term->tid,
        );


        $desc = '';
        $shown_content = array();
        $shown_options = array();

        if ($form['#node']) {
          if (!empty($form['#node']->ed_portfolio_competence_desc[LANGUAGE_NONE])) {
            foreach ($form['#node']->ed_portfolio_competence_desc[LANGUAGE_NONE] as $value) {
              if ($value['tid'] == $term->tid) {
                $desc = $value['desc'];
                $shown_content = drupal_json_decode($value['cid']);
              }
            }
          }
        }

        if (!empty($shown_content)) {
          foreach ($shown_content as $item) {
            $shown_options[$item] = true;
          }
        }


        $rows = array();

        if (!empty($nids)) {
          //content items
          foreach ($nids as $item_key => $nid) {

            $query = db_select('node', 'n');
            $query->fields('n', array('title', 'changed'));
            $query->condition('n.nid', $nid);
            $node = $query->execute()->fetchAll();

            if (empty($node[0]->title)) {
              //This is answer node with no title in db
              $rows[$nid] = array(
                'title' => l(ed_get_answer_title(node_load($nid)), 'node/' . $nid),
                'date' => format_date($node[0]->changed, 'short'),
              );
            } else {
              $rows[$nid] = array(
                'title' => l($node[0]->title, 'node/' . $nid),
                'date' => format_date($node[0]->changed, 'short'),
              );
            }
          }

          $header = array(
            'title' => t('Title'),
            'date' => t('Date'),
          );


          $form['competency'][$key]['table'] = array(
            '#type' => 'tableselect',
            '#options' => $rows,
            '#header' => $header,
            '#js_select' => FALSE,
            '#empty' => t('No content found'),
            '#default_value' => $shown_options,
            '#prefix' => '<div class="alert alert-info">' . t('Check the content to show on your portfolio') . '</div>',
          );

        }

        //This td in $form['#node']->ed_portfolio_competence_desc
        $key_term = array_search($term->tid, array_column($form['#node']->ed_portfolio_competence_desc[LANGUAGE_NONE], 'tid'));

        $answer_array = drupal_json_decode($form['#node']->ed_portfolio_competence_desc[LANGUAGE_NONE][$key_term]['answers']);

        foreach ($questions as $question) {
          if (!empty($question['question'])) {
            $form['competency'][$key]['questions_tids'][$question['tid']]['question'] = array(
              '#type' => 'text_format',
              '#required' => false,
              '#title' => $question['question'],
              '#default_value' => $answer_array[$question['tid']]['value'],
              '#wysiwyg' => false,
            );
          }
        }


      }


      drupal_add_js(array('ed_portfolio' => $js_settings), array('type' => 'setting'));
      drupal_add_js(drupal_get_path('module', 'ed_portfolio') . '/js/ed_portfolio_edit.js', 'file');


    }

    $form['#submit'][] = 'ed_portfolio_submit_function';
  }

}

function _ed_portfolio_get_questions_for_parent_competency($parent_competency)
{

  $a = taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('ed_competence_voc')->vid, $parent_competency, null, true);

  $questions = array_map(function ($element) {
    return ['tid' => $element->tid, 'question' => isset($element->ed_competence_question_field[LANGUAGE_NONE]) ? $element->ed_competence_question_field[LANGUAGE_NONE][0]['value'] : null];
  }, $a);


  return !empty($questions) ? $questions : null;

}


function ed_portfolio_get_competencies_ajax_callback($form, &$form_state)
{

  return $form['competency'];
}

function ed_portfolio_submit_function(&$form, &$form_state)
{

  foreach ($form_state['values']['competency'] as $value) {


    $content_items_to_show = array();

    $questions_answers = array();

    if (!empty($value['table'])) {

      //Get all content items
      $table_values = array_values($value['table']);

      //Check if they should be visible
      foreach ($table_values as $item) {

        if ($item != 0) {
          $content_items_to_show[] = $item;
        }
      }

    }

    if (!empty($value['questions_tids'])) {

      //Get all questions tids and answers
      foreach ($value['questions_tids'] as $question_tid => $question_value) {

        if (!empty($question_value['question'])) {
          $questions_answers[$question_tid] = $question_value['question'];
        }

      }

    }


    $form_state['values']['ed_portfolio_competence_desc'][LANGUAGE_NONE][] = array(
      'tid' => $value['tid'],
      'desc' => !empty($value['desc']) ? $value['desc'] : '',
      'cid' => drupal_json_encode($content_items_to_show),
      'answers' => drupal_json_encode($questions_answers),
    );

  }


}


function _ed_portfolio_get_content_for_parent_competency($uid, $parent_competency)
{
  $a = taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('ed_competence_voc')->vid, $parent_competency, null, true);


  $child_terms = array_map(function ($element) {
    return $element->tid;
  }, $a);


  //For PHP 5.5+
  //$child_terms = array_column(taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('ed_competence_voc')->vid, $parent_competency), 'tid');


  //For blog, file, learning resource
  $query = db_select('node', 'n');
  $query->join('field_data_ed_field_competence', 'com', 'n.nid = com.entity_id');
  $query->fields('n', array('nid'))
    ->condition('n.status', 1)
    ->condition('n.uid', $uid)
    ->condition('com.ed_field_competence_tid', $child_terms, 'IN');
  $db_or = db_or();
  $db_or->condition('n.type', 'ed_blog');
  $db_or->condition('n.type', 'ed_file');
  $db_or->condition('n.type', 'ed_learning_resource');
  $query->condition($db_or);

  $nids = $query->execute()->fetchCol();


  //For answers
  $query_answers = db_select('node', 'n');
  $query_answers->fields('n', array('nid'))
    ->condition('n.type', 'ed_answer')
    ->condition('n.status', 1)
    ->condition('n.uid', $uid);
  $query_answers->join('field_data_field_ref_to_task', 'ref', 'ref.entity_id = n.nid');
  $query_answers->join('node', 'n2', 'n2.nid = ref.field_ref_to_task_target_id');
  $query_answers->join('field_data_ed_field_competence', 'com', 'n2.nid = com.entity_id');
  $query_answers->join('field_data_ed_answer_last_status', 's', 's.entity_id = n.nid');
  $query_answers->condition('com.ed_field_competence_tid', $child_terms, 'IN');
  $query_answers->condition('s.ed_answer_last_status_status', 'accepted', 'LIKE');


  $nids_answers = $query_answers->execute()->fetchCol();


  if (!empty($nids) || !empty($nids_answers)) {
    return array_merge($nids, $nids_answers);
  } else {
    return null;
  }
}


function _ed_portfolio_get_complete_level_for_competency($uid, $parent_competency)
{

  $a = taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('ed_competence_voc')->vid, $parent_competency);

  $child_terms = array_map(function ($element) {
    return $element->tid;
  }, $a);

  //For PHP 5.5+
  //$child_terms = array_column(taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('ed_competence_voc')->vid, $parent_competency), 'tid');

  $query_complete = db_select('field_data_ed_field_competence', 'com');
  $query_complete->join('node', 'n', 'n.nid = com.entity_id');
  $query_complete->fields('com', array('ed_field_competence_tid'))
    ->condition('n.status', 1)
    ->condition('n.uid', $uid)
    ->condition('com.ed_field_competence_tid', $child_terms, 'IN');
  $db_or = db_or();
  $db_or->condition('n.type', 'ed_blog');
  $db_or->condition('n.type', 'ed_file');
  $db_or->condition('n.type', 'ed_learning_resource');
  $query_complete->condition($db_or);

  $nids_complete = $query_complete->execute()->fetchCol();


  //For answers
  $query_answers = db_select('field_data_ed_field_competence', 'com');
  $query_answers->condition('com.ed_field_competence_tid', $child_terms, 'IN');
  $query_answers->join('node', 'n2', 'n2.nid = com.entity_id');
  $query_answers->join('field_data_field_ref_to_task', 'ref', 'n2.nid = ref.field_ref_to_task_target_id');
  $query_answers->join('node', 'n', 'ref.entity_id = n.nid');
  $query_answers->join('field_data_ed_answer_last_status', 's', 's.entity_id = n.nid');
  $query_answers->condition('s.ed_answer_last_status_status', 'accepted', 'LIKE');
  $query_answers->fields('com', array('ed_field_competence_tid'))
    ->condition('n.type', 'ed_answer')
    ->condition('n.status', 1)
    ->condition('n.uid', $uid);


  $nids_answers = $query_answers->execute()->fetchCol();


  $tids_complete = array();

  if (!empty($nids_complete) || !empty($nids_answers)) {
    $tids_complete = array_merge($nids_complete, $nids_answers);
  }


  $tids_complete_count = count(array_unique($tids_complete));


  $all_tids_count = count($child_terms);
  $complete = $tids_complete_count / $all_tids_count;


  return round($complete, 2);
}


/*
 * Implements hook_field_info
 */

function ed_portfolio_field_info()
{
  return array(
    'ed_portfolio_competence_desc' => array(
      'label' => t('Competence description'),
      'description' => t('This field stores competence description'),
      'default_widget' => 'ed_portfolio_competence_desc_widget',
      'default_formatter' => 'ed_portfolio_competence_desc_default',
      'property_type' => 'ed_portfolio_competence_desc', // we add the propert type here
      'property_callbacks' => array('ed_portfolio_competence_desc_property_info_callback'), // we add the callback
    ),
  );
}

function ed_portfolio_competence_desc_property_info_callback(&$info, $entity_type, $field, $instance, $field_type)
{
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];

  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  unset($property['query callback']);

  $property['property info']['tid'] = array(
    'type' => 'integer',
    'label' => t('tid'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $property['property info']['desc'] = array(
    'type' => 'text',
    'label' => t('desc'),
    'setter callback' => 'entity_property_verbatim_set',
  );
}

/**
 * Implements hook_field_widget_info().
 */
function ed_portfolio_field_widget_info()
{
  return array(
    'ed_portfolio_competence_desc_widget' => array(
      'label' => t('Default'),
      'field types' => array('ed_portfolio_competence_desc'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function ed_portfolio_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element)
{

  $element['tid'] = array(
    '#type' => 'textfield',
    '#title' => t('Taxonomy id'),
    '#required' => $element['#required'],
    '#size' => 7,
    '#attributes' => array('maxlength' => 7),
  );
  $element['desc'] = array(
    '#type' => 'textfield',
    '#title' => t('Competence desc'),
    '#required' => $element['#required'],
    '#size' => 2000,
    '#attributes' => array('maxlength' => 2000),
  );

  return $element;
}


function ed_portfolio_field_is_empty($item, $field)
{
  $temp = array_keys($field['columns']);
  $key = array_shift($temp);
  return empty($item[$key]);
}

/**
 * Implements hook_field_validate().
 */
function ed_portfolio_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors)
{
  // Loop through field items in the case of multiple values.
  foreach ($items as $delta => $item) {
    if (isset($item['desc']) && $item['desc'] != '') {
      if (strlen($item['desc']) > 2000) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'ed_portfolio_invalid_full',
          'message' => t('%title: Competence description cannot be empty', array('%title' => $instance['label'])),
        );
      }
    }
  }

}

/**
 * Implements hook_field_formatter_info().
 */
function ed_portfolio_field_formatter_info()
{
  return array(
    'ed_portfolio_competence_desc_default' => array(
      'label' => t('Default'),
      'field types' => array('ed_portfolio_competence_desc'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ed_portfolio_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display)
{
  $element = array();
  switch ($display['type']) {
    case 'ed_portfolio_competence_desc_default' :
      foreach ($items as $delta => $item) {
        if (isset($item['tid'])) {
          $element[$delta]['#markup'] = $item['tid'] . ' ' . $item['desc'];
        }
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_node_access().
 */
function ed_portfolio_node_access($node, $op, $account)
{
  $type = is_string($node) ? $node : $node->type;

  // Check if the node type is 'ed_portfolio' and the user is anonymous
  if ('ed_portfolio' == $type && user_is_anonymous()) {
    return NODE_ACCESS_DENY;
  }

  // Return NODE_ACCESS_IGNORE to not affect other access checks.
  return NODE_ACCESS_IGNORE;
}
