<?php

/**
 * @file
 * eDidaktikum portfolio module.
 */

/**
 * Implements hook_menu().
 */
function ed_portfolio_menu() {
  $items['dashboard/portfolio'] = array(
    'title' => 'Portfolio',
    'page callback' => 'ed_portfolio_listing_page',
    'access callback' => 'user_is_logged_in',
    'weight' => 5,
    'menu_name' => 'ed-dashboard-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['portfolio/%'] = array(
    'page callback' => 'ed_portfolio_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );
  $items['node/%node/competency-profile'] = array(
    'title' => 'Competency profile',
    'weight' => 2,
    'page callback' => 'ed_portfolio_competency_profile',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array(1),
    'access callback' => 'ed_portfolio_competency_profile_access',
    'access arguments' => array(1),
  );
  return $items;
}

function ed_portfolio_competency_profile($node){
  $content = array();

  drupal_add_js(drupal_get_path('module', 'ed_portfolio') . '/ed_competence_profile_portfolio.js', 'file');
  drupal_add_css(drupal_get_path('module', 'ed_portfolio') . '/ed_competence_profile_portfolio.css', 'file');
  if(!empty($node->ed_field_cover_image)) {
    $imguri = $node->ed_field_cover_image[LANGUAGE_NONE][0]['uri'];
    $imgurl = file_create_url($imguri);
    drupal_add_css('.node-type-ed-portfolio {background: white url('.$imgurl.') no-repeat;}',$option['type'] = 'inline');
  }else{
      $themepath = drupal_get_path('theme',$GLOBALS['theme']);
      $defaultimagepath = $themepath.'/images/portfolio_bg.jpg';
      $defimageurl = file_create_url($defaultimagepath);
      drupal_add_css('.node-type-ed-portfolio {background: white url('.$defimageurl.') no-repeat;}',$option['type'] = 'inline');
  }

  if(!empty($node->ed_portfolio_field_items)){
    $portfolioitemsnodes = array();
    foreach($node->ed_portfolio_field_items[LANGUAGE_NONE] as $portfolioitem){
      $itemnode = node_load($portfolioitem['target_id']);
      if(!empty($itemnode->ed_field_competence)){
        array_push($portfolioitemsnodes, $itemnode);
      }
    }
    $competences = array();

    $vocabulary = taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('ed_competence_voc')->vid, 0, 1);

    $fullvocabulary = taxonomy_get_nested_tree(taxonomy_vocabulary_machine_name_load('ed_competence_voc')->vid);

    foreach($portfolioitemsnodes as $portfolioitem){
      foreach($portfolioitem->ed_field_competence[LANGUAGE_NONE] as $competence){

        if (!isset($competences[$competence['tid']])) {
          $competences[$competence['tid']] = array('tid' => $competence['tid'], 'evidences' => array($portfolioitem->nid));
        } else {
          $competences[$competence['tid']]['evidences'][] = $portfolioitem->nid;
        }
      }
    }

    foreach($fullvocabulary as &$highestterm){
      $leaves = array();
      get_all_leaves($leaves, $highestterm);
      $highestterm->leaves = $leaves;
      $highestterm->acquired = array_intersect(array_keys($competences), array_keys($leaves));
    }


    $content['container'] = array(
      '#type' => 'container',
      '#attributes' => array(),
      '#prefix' => '<div class="competency-profile-container">',
      '#suffix' => '</div>',
    );


    foreach($fullvocabulary as $parentterm){
      $colorcode = taxonomy_term_load($parentterm->tid)->ed_competence_color_field[LANGUAGE_NONE][0]['safe_value'];
      $content['container'][$parentterm->tid] = array(
        '#type' => 'container',
        '#attributes' => array(),
        '#prefix' => '<div class="row">',
        '#suffix' => '</div>',
      );
      $content['container'][$parentterm->tid]['progress-row'] = array(
        '#type' => 'container',
        '#attributes' => array(),
        '#prefix' => '<div class="row">',
        '#suffix' => '</div>',
      );
      $content['container'][$parentterm->tid]['progress-row']['name'] = array(
        '#type' => 'markup',
        '#markup' => l($parentterm->name, 'taxonomy/term/'.$parentterm->tid).' <i class="fa fa-angle-down"></i>',
        '#prefix' => '<div class="term-name span5">',
        '#suffix' => '</div>'
      );
      $content['container'][$parentterm->tid]['progress-row']['progress'] = array(
        '#type' => 'markup',
        '#markup' => '<div class="bar" style="width:'. round(count($parentterm->acquired)/count($parentterm->leaves)*100) .'%; background-image:none; background-color:'.$colorcode.';"></div>',
        '#prefix' => '<div class="progress span4">',
        '#suffix' => '</div>'
      );
      $content['container'][$parentterm->tid]['progress-row']['summary'] = array(
        '#type' => 'markup',
        '#markup' => '<div class="description span3 competence-profile-summary">'. round(count($parentterm->acquired)/count($parentterm->leaves)*100) .'% '.t('done').' '.count($parentterm->acquired).'/'.count($parentterm->leaves).'</div>',
      );
      if(count($parentterm->acquired)!=0){
        $content['container'][$parentterm->tid]['detailed-view'] = array(
          '#type' => 'container',
          '#attributes' => array(),
          '#prefix' => '<div style="display:none;" class="detailed-view-container">',
          '#suffix' => '</div>'
        );
        $content['container'][$parentterm->tid]['detailed-view']['heading'] = array(
          '#type' => 'markup',
          '#markup' => t('Competence'),
          '#prefix' => '<div class="detailed-view-heading"><h3>',
          '#suffix' => '</h3></div>',
        );
        $content['container'][$parentterm->tid]['detailed-view']['body'] = array(
          '#type' => 'container',
          '#attributes' => array(),
          '#prefix' => '<div class="detailed-view-body">',
          '#suffix' => '</div>',
        );

        $content['container'][$parentterm->tid]['detailed-view']['body']['competence-description'] = array(
          '#type' => 'markup',
          '#markup' => (!empty($parentterm->description)) ? t($parentterm->description): '',
          '#prefix' => '<div class="row acquired-competence-description">',
          '#suffix' => '</div>',
        );

        $rows = array();
        $number=1;
        foreach($parentterm->acquired as $acquiredcompetence){



          $evidences = $competences[$acquiredcompetence]['evidences'];
          $evidenceslinks = array();
          foreach($evidences as $evidence){
            array_push($evidenceslinks, l(url('node/'.$evidence, array('absolute' => true)), 'node/'.$evidence));
          }
          $evidences = implode('<br>', $evidenceslinks);
          $rows[] = array(
            'data' => array(
              'number' => $number,
              'comp_peace' => (!empty(taxonomy_term_load($acquiredcompetence)->description)) ? '<p title="'.t(taxonomy_term_load($acquiredcompetence)->description).'">'.t(taxonomy_term_load($acquiredcompetence)->name).'</p>' : t(taxonomy_term_load($acquiredcompetence)->name),
              'evidences' => $evidences,
            ),
          );
          $number++;
        }

        $content['container'][$parentterm->tid]['detailed-view']['body']['competence-table'] = array(
          '#theme' => 'table',
          '#rows' => $rows,
          '#header' => array(t('#'), t('Competence Piece'), t('Evidence')),
          '#prefix' => '<div class="row acquired-competence-table">',
          '#suffix' => '</div>',
        );

      }

    }

  }

  return $content;
}


function get_all_leaves(&$leaves, $term){
  if (isset($term->children)) {
    foreach($term->children as $child) {
      get_all_leaves($leaves, $child);
    }
  } else {
    $leaves[$term->tid] = $term;
  }
}


/**
 *
 * @param type $vocabulary - Competence vocabulary with term->done = true as acquired competence
 * @return type array - Full competency profile
 */
function _ed_get_competency_profile($vocabulary){

  $profile = array();
  return $profile;
}



/**
 * https://api.drupal.org/comment/50023#comment-50023
 */
function taxonomy_get_nested_tree($vid_or_terms = array(), $max_depth = NULL, $parent = 0, $parents_index = array(), $depth = 0) {

  if (!is_array($vid_or_terms)) {
    $vid_or_terms = taxonomy_get_tree($vid_or_terms);
  }

  foreach ($vid_or_terms as $term) {

    foreach ($term->parents as $term_parent) {
      if ($term_parent == $parent) {
        $return[$term->tid] = $term;
      }
      else {
        $parents_index[$term_parent][$term->tid] = $term;
      }
    }
  }

  foreach ($return as &$term) {
    if (isset($parents_index[$term->tid]) && (is_null($max_depth) || $depth < $max_depth)) {
      $term->children = taxonomy_get_nested_tree($parents_index[$term->tid], $max_depth, $term->tid, $parents_index, $depth + 1);
    }
  }

  return $return;
}

function ed_portfolio_competency_profile_access($node){
  if($node->type != 'ed_portfolio'){
    return false;
  }else{
    if($node->ed_portfolio_show_comp_profile[LANGUAGE_NONE][0]['value']){
      return true;
    }else{
      return false;
    }
  }
}


/**
 * Portfolios listing page.
 */
function ed_portfolio_listing_page(){
  menu_tree_set_path('main-menu', 'dashboard');
  //drupal_add_css('ul.links.inline {display: none;}', array('group' => CSS_THEME, 'type' => 'inline'));
  $content = array();

  $content['add-new-container'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('ed-add-new-node', 'ed-add-new-ed-portfolio'),
    ),
  );
  $content['add-new-container']['add-new-portfolio'] = array(
    '#type' => 'link',
    '#title' => t('Add new portfolio'),
    '#href' => 'node/add/ed-portfolio',
  );

  $table_type = 'pager-table';
  $user_portfolio_ids = ed_portfolio_get_user_portfolios();
  $nodes = node_load_multiple($user_portfolio_ids);
  $rows = array();
  foreach($nodes as $node){
    if($node->status=='1'){
      $status = '<span class="pub-portfolio">'.t('Public').'</span>';
    }else if($node->status=='0'){
      $status = '<span class="priv-portfolio">'.t('Private').'</span>';
    }else{
      $status = t('error');
    }
    $rows[] = array(
      'data' => array(
        'status' => $status,
        'title' => l($node->title, 'node/'.$node->nid),
        'created' => format_date($node->created, 'custom', 'd/m/Y'),
      ),
    );
  }
  $content[$table_type] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#header' => array(t('Status'), t('Title'), t('Date')),
  );
  $content['pager'] = array('#theme' => 'pager');

  drupal_add_css('span.pub-portfolio {color:green;}', array('group' => CSS_THEME, 'type' => 'inline'));
  drupal_add_css('span.priv-portfolio {color:red;}', array('group' => CSS_THEME, 'type' => 'inline'));


  return $content;
}

/**
 * User portfolio ids.
 */
function ed_portfolio_get_user_portfolios() {
  global $user;
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.type', 'ed_portfolio')
    ->condition('n.uid', $user->uid)
    ->addTag('node_access')
    ->range()
    ->orderBy('n.created', 'DESC');
  $nids = $query->execute()->fetchCol();
  return $nids;
}

function ed_portfolio_page($portfolio_id) {
  $portfolio = node_load($portfolio_id);
  if ($portfolio && $portfolio->type == 'ed_portfolio') {
    echo theme('ed_portfolio_page', array('node_view' => node_view($portfolio, 'entity_view')));
    return NULL;
  }
  return array();
}

function ed_portfolio_theme($existing, $type, $theme, $path) {
  return array(
    'ed_portfolio_page' => array(
      'variables' => array('node_view' => '', 'site_name' => variable_get('site_name', 'Drupal'), 'front_page' => variable_get('site_frontpage')),
      'template' => 'ed_portfolio_page',
      'path' => drupal_get_path('module', 'ed_portfolio'),
      'render element' => 'element',
    ),
  );
}

function ed_portfolio_get_competency_profile_bar($nid){
  $node = node_load($nid);


  if(!empty($node->ed_portfolio_field_items)){
    $portfolioitemsnodes = array();
    foreach($node->ed_portfolio_field_items[LANGUAGE_NONE] as $portfolioitem){
      $itemnode = node_load($portfolioitem['target_id']);
      if(!empty($itemnode->ed_field_competence)){
        array_push($portfolioitemsnodes, $itemnode);
      }
    }
    $competences = array();

    $vocabulary = taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('ed_competence_voc')->vid, 0, 1);

    $fullvocabulary = taxonomy_get_nested_tree(taxonomy_vocabulary_machine_name_load('ed_competence_voc')->vid);

    foreach($portfolioitemsnodes as $portfolioitem){
      foreach($portfolioitem->ed_field_competence[LANGUAGE_NONE] as $competence){

        if (!isset($competences[$competence['tid']])) {
          $competences[$competence['tid']] = array('tid' => $competence['tid'], 'evidences' => array($portfolioitem->nid));
        } else {
          $competences[$competence['tid']]['evidences'][] = $portfolioitem->nid;
        }
      }
    }

    foreach($fullvocabulary as &$highestterm){
      $leaves = array();
      get_all_leaves($leaves, $highestterm);
      $highestterm->leaves = $leaves;
      $highestterm->acquired = array_intersect(array_keys($competences), array_keys($leaves));
    }
    $acquired = 0;
    $profile = array();
    foreach($fullvocabulary as $highestlevel){
      if(count($highestlevel->acquired)!=0){
        $acquired += count($highestlevel->acquired);
        $profile[$highestlevel->tid] = array(
          'color' => taxonomy_term_load($highestlevel->tid)->ed_competence_color_field[LANGUAGE_NONE][0]['safe_value'],
          'count' => count($highestlevel->acquired),
        );
      }
    }
    foreach($profile as &$acqterm){
      $acqterm['count'] = $acqterm['count']/$acquired;
    }
    //$profile['nid'] = $nid;
    $setting = array('ed_portfolio' => array('profile' => $profile, 'nid' => $nid));
    drupal_add_js($setting, 'setting');
  }


}

function ed_portfolio_ctools_render_alter(&$info, &$page, &$context){
  if(isset($context['contexts']['argument_entity_id:node_1']) && $context['contexts']['argument_entity_id:node_1']->data->type == 'ed_portfolio'){
    $nid = $context['contexts']['argument_entity_id:node_1']->data->nid;
    $progressbar = ed_portfolio_get_competency_profile_bar($nid);
    drupal_add_js(drupal_get_path('module', 'ed_portfolio') . '/ed_portfolio_progress_bar.js', 'file');
    if(!empty($context['contexts']['argument_entity_id:node_1']->data->ed_field_cover_image)){
      $imguri = $context['contexts']['argument_entity_id:node_1']->data->ed_field_cover_image[LANGUAGE_NONE][0]['uri'];
      $imgurl = file_create_url($imguri);
      drupal_add_css('.node-type-ed-portfolio {background: white url('.$imgurl.') no-repeat;}',$option['type'] = 'inline');
    }else{
      $themepath = drupal_get_path('theme',$GLOBALS['theme']);
      $defaultimagepath = $themepath.'/images/portfolio_bg.jpg';
      $defimageurl = file_create_url($defaultimagepath);
      drupal_add_css('.node-type-ed-portfolio {background: white url('.$defimageurl.') no-repeat;}',$option['type'] = 'inline');
    }
  }
}


/**
 * Implements hook_ctools_plugin_api().
 */
function ed_portfolio_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_field_widget_info().
 */
/*function ed_portfolio_field_widget_info() {
  $widgets['ed_portfolio_items'] = array(
    'label' => t('Portfolio items'),
    'description' => t('Widget for drag and drop.'),
    'field types' => array('entityreference'),
  );

  return $widgets;
}*/

/**
 * Implements hook_views_api().
 */
function ed_portfolio_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ed_portfolio') . '/includes/views',
  );
}

/**
 * Implements hook_form_alter().
 */
function ed_portfolio_form_alter(&$form, &$form_state, $form_id) {
  if ('ed_portfolio_node_form' == $form_id) {

    if (empty($form['#node']->nid)) {
      drupal_set_title(t('Create Portfolio'));
    }


    //XXX Delete this field
    $form['ed_portfolio_field_items']['#access'] = false;

    $form['ed_portfolio_competence_desc']['#access'] = false;

    $form['#tree'] = TRUE;


    $form['add_more'] = array(
      '#type' => 'button',
      '#value' => t('Select'),
      '#weight' => $form['ed_q_portfolio_field_level']['#weight'] + 1,
      '#ajax' => array(
        'callback' => 'ed_portfolio_get_competencies_ajax_callback',
        'wrapper' => 'names-fieldset-wrapper',
      ),
    );


    $form['competencies'] = array(
      '#type' => 'fieldset',
      '#title' => t('My competencies'),
      // Set up the wrapper so that AJAX will be able to replace the fieldset.
      '#prefix' => '<div id="names-fieldset-wrapper">',
      '#weight' => $form['ed_q_portfolio_field_level']['#weight'] + 2,
      '#suffix' => '</div>',
    );

  }
  return $form;
}


function ed_portfolio_get_competencies_ajax_callback($form, &$form_state) {


  $selected_level = $form_state['input']['ed_q_portfolio_field_level'][LANGUAGE_NONE];

  $terms = taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('ed_competence_voc')->vid, $selected_level, 1);

  //error_log(print_r($form_state['node']->uid, true));

  //Get user content that has category in it
//  $query = db_select('node', 'n');
//  $query->join('field_data_ed_field_category', 'cat', 'n.nid = cat.entity_id');
//
//  $query
//    ->fields('n', array('nid'))
//    ->condition('n.status', 1)
//    ->condition('n.uid', $form_state['node']->uid);
//
//  $db_or = db_or();
//  $db_or->condition('n.type', 'ed_blog');
//  $db_or->condition('n.type', 'ed_file');
//  $db_or->condition('n.type', 'ed_learning_resource');
//  $query->condition($db_or);
//
//  $nids = $query->execute()->fetchCol();
//
//  if (!empty($nids)) {
//    error_log(print_r($nids, true));
//  }




  foreach($terms as $key => $term){

    $nids = _ed_portfolio_get_content_for_parent_competency($form_state['node']->uid, $term->tid);

    error_log(print_r($nids, true));

    $form['competencies'][$key]['name'] = array(
      '#type' => 'item',
      '#markup' => $term->name,
    );
    $form['competencies'][$key]['items'] = array(
      '#type' => 'item',
      '#markup' => print_r($nids, true),
    );
  }




  return $form['competencies'];
}


function _ed_portfolio_get_content_for_parent_competency($uid, $parent_competency){

  $child_terms = array_column(taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('ed_competence_voc')->vid, $parent_competency), 'tid');

  $query = db_select('node', 'n');
  $query->join('field_data_ed_field_competence', 'com', 'n.nid = com.entity_id');
  $query->fields('n', array('nid'))
    ->condition('n.status', 1)
    ->condition('n.uid', $uid)
    ->condition('com.ed_field_competence_tid', $child_terms, 'IN');
  $db_or = db_or();
  $db_or->condition('n.type', 'ed_blog');
  $db_or->condition('n.type', 'ed_file');
  $db_or->condition('n.type', 'ed_learning_resource');
  $query->condition($db_or);

  $nids = $query->execute()->fetchCol();

  if (!empty($nids)) {
    return $nids;
  }else{
    return null;
  }
}


/*
 * Implements hook_field_info
 */

function ed_portfolio_field_info() {
  return array (
    'ed_portfolio_competence_desc' => array (
      'label' => t('Competence description'),
      'description' => t('This field stores competence description'),
      'default_widget' => 'ed_portfolio_competence_desc_widget',
      'default_formatter' => 'ed_portfolio_competence_desc_default',
      'property_type' => 'ed_portfolio_competence_desc', // we add the propert type here
      'property_callbacks' => array('ed_portfolio_competence_desc_property_info_callback'), // we add the callback
    ),
  );
}

function ed_portfolio_competence_desc_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];

  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  unset($property['query callback']);

  $property['property info']['tid'] = array(
    'type' => 'integer',
    'label' => t('tid'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $property['property info']['desc'] = array(
    'type' => 'text',
    'label' => t('desc'),
    'setter callback' => 'entity_property_verbatim_set',
  );
}

/**
 * Implements hook_field_widget_info().
 */
function ed_portfolio_field_widget_info() {
  return array(
    'ed_portfolio_competence_desc_widget' => array(
      'label' => t('Default'),
      'field types' => array('ed_portfolio_competence_desc'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function ed_portfolio_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $element['tid'] = array(
    '#type' => 'textfield',
    '#title' => t('Taxonomy id'),
    '#required' => $element['#required'],
    '#size' => 7,
    '#attributes' => array('maxlength' => 7),
  );
  $element['desc'] = array(
    '#type' => 'textfield',
    '#title' => t('Competence desc'),
    '#required' => $element['#required'],
    '#size' => 2000,
    '#attributes' => array('maxlength' => 2000),
  );
//      break;
//  }
  return $element;
}



function ed_portfolio_field_is_empty($item, $field) {
  $temp = array_keys($field['columns']);
  $key = array_shift($temp);
  return empty($item[$key]);
}

/**
 * Implements hook_field_validate().
 */
function ed_portfolio_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // Loop through field items in the case of multiple values.
  foreach ($items as $delta => $item) {
    if (isset($item['desc']) && $item['desc'] != '') {
      if (strlen($item['desc']) > 2000) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'ed_portfolio_invalid_full',
          'message' => t('%title: Competence description cannot be empty', array('%title' => $instance['label'])),
        );
      }
    }
  }

}

/**
 * Implements hook_field_formatter_info().
 */
function ed_portfolio_field_formatter_info() {
  return array(
    'ed_portfolio_competence_desc_default' => array(
      'label' => t('Default'),
      'field types' => array('ed_portfolio_competence_desc'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ed_portfolio_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'ed_portfolio_competence_desc_default' :
      foreach ($items as $delta => $item) {
        if (isset($item['tid'])) {
          $element[$delta]['#markup'] = $item['tid'] . ' ' . $item['desc'];
        }
      }
      break;
  }
  return $element;
}
