<?php


require_once('ed_page_functions.inc');


/*
 * Implements hook_install().
 */
function ed_page_install() {
  node_types_rebuild();
  $types = node_type_get_types();

  /*foreach(_ed_page_installed_fields() as $field) {
    field_create_field($field);
  }*/

  foreach (_ed_page_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = 'ed_page';
    field_create_instance($instance);
  }
  ed_page_create_vocabulary();
  ed_page_add_og_audience();
  

  variable_set('comment_ed_page', COMMENT_NODE_OPEN);
}
function ed_page_create_vocabulary(){
  $ed_page_vocabulary = taxonomy_vocabulary_machine_name_load('ed_page_tags_voc');
  if (!empty($ed_page_vocabulary)) {
    return false;
  }

  $vocabulary = new stdClass();
  $vocabulary->name = 'page tags';
  $vocabulary->description = '';
  $vocabulary->machine_name = 'ed_page_tags_voc';
  taxonomy_vocabulary_save($vocabulary);
}
function ed_page_add_og_audience(){
  if(function_exists('og_create_field') && defined('OG_AUDIENCE_FIELD')) {
    $og_field = og_fields_info(OG_AUDIENCE_FIELD);
    $og_field['instance']['label'] = t('Group');
    $og_field['instance']['required'] = TRUE;
    $og_field['instance']['settings']['behaviors']['prepopulate'] = array(
      'status' => TRUE,
      'action' => 'none',
      'fallback' => 'none',
      'skip_perm' => FALSE,
    );
    og_create_field(OG_AUDIENCE_FIELD, 'node', 'ed_page', $og_field);
  }
}

function ed_page_uninstall() {
  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition("n.type", 'ed_page')
    ->execute();

  $nids = array();
  foreach ($result as $row){
    $nids[] = $row->nid;
  }

  node_delete_multiple($nids);
/*
  foreach(array_keys(_ed_page_installed_fields()) as $field) {
    field_delete_field($field);
  }
*/
  $instances = field_info_instances('node', 'ed_page');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  node_type_delete('ed_page');

  field_purge_batch(1000);

  variable_del('comment_ed_page');
}

/**
 * Add to_group_member field instance to ed_page
 */
function ed_page_update_7100(&$sandbox) {
  $instances = _ed_page_installed_instances();
  $instance = $instances[ED_FIELD_TO_GROUP_MEMBER];
  $instance['entity_type'] = 'node';
  $instance['bundle'] = 'ed_page';
  field_create_instance($instance);
}

/**
 * Add tags field from drupal to ed_page
 */
function ed_page_update_7101(&$sandbox) {
  $instances = _ed_page_installed_instances();
  $instance = $instances['ed_page_tags'];
  $instance['entity_type'] = 'node';
  $instance['bundle'] = 'ed_page';
  field_create_instance($instance);
  
  field_delete_field('ed_page_tags');
  
  $vid = db_select('taxonomy_vocabulary', 'v')
    ->fields('v', array('vid'))
    ->condition("v.machine_name", 'ed_page_tags_voc')
    ->execute()
	  ->fetchField();
  taxonomy_vocabulary_delete($vid);
  field_purge_batch();
}

/**
 * Enable comments for ed_page.
 * Also update any existing ones to comply.
 */
function ed_page_update_7102(&$sandbox) {
  $node_type = 'ed_page';
  // Allowing comments on any new ed_page nodes by default
  variable_set('comment_ed_page', COMMENT_NODE_OPEN);

  // Initialize batch
  if (!isset($sandbox['total'])) {
    $total = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('type', $node_type)
      ->countQuery()
      ->execute()
      ->fetchField();

    $sandbox['total'] = $total;
    $sandbox['progress'] = 0;

    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return t('No %type nodes exist in database.', array('%type' => $node_type));
    }
  }

  $nids = db_select('node')
    ->fields('node', array('nid'))
    ->condition('type', $node_type)
    ->range(0, 10)
    ->execute()
    ->fetchCol();

  if (!empty($nids)) {
    $nodes = node_load_multiple($nids, NULL, TRUE);

    foreach ($nodes as $node) {
      $node->comment = COMMENT_NODE_OPEN;
      node_save($node);
    }
  }

  // Increment and check progress
  $sandbox['progress'] += count($nids);
  if (empty($nids) || $sandbox['progress'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
    return t('Updated @count nodes of type %type.', array('@count' => $sandbox['progress'], '%type' => $node_type));
  } else {
    $sandbox['#finished'] = $sandbox['progress'] / $sandbox['total'];
  }
}

