<?php

/**
 * @file
 * eDidaktikum module.
 */

require("edf.php");

/**
 * Email to be used with automatic system messages
 */
define('EDIDAKTIKUM_NO_REPLY_EMAIL', 'no-reply@edidaktikum.ee');

/**
 * Implements hook_init().
 */
function edidaktikum_init()
{
  //Used by ed_g_drive Google Drive files integration
  drupal_add_js('https://apis.google.com/js/api.js', array('type' => 'external', 'defer' => 'defer', 'async' => 'async'));
  drupal_add_js('https://accounts.google.com/gsi/client', array('type' => 'external', 'defer' => 'defer', 'async' => 'async'));



  $uservoice_api_key = variable_get('ed_uservoice_api_key');
  if (!empty($uservoice_api_key)) {
    global $language;
    drupal_add_js(array(
        'edidaktikum' => array(
            'ed_uservoice_api_key' => $uservoice_api_key,
            'locale' => $language->language,
        ),
    ), 'setting');
    if (user_is_logged_in()) {
      $acc = $GLOBALS['user'];
      drupal_add_js(array(
          'edidaktikum' => array(
              'authenticated' => true,
              'email' => $acc->mail,
              'name' => edidaktikum_get_full_name_for_user_account($acc),
              'created_at' => $acc->created,
              'id' => $acc->uid,
          ),
      ), 'setting');
    }
  }
  if (isset($_COOKIE['Drupal_visitor_edidaktikum_logoff'])) {
    if ($_COOKIE['Drupal_visitor_edidaktikum_logoff'] == 1) {
      drupal_set_message(t('Goodbye! You are now logged out from eDidaktikum'));
      user_cookie_save(array('edidaktikum.logoff' => '0'));
    }
  }
}

function edidaktikum_page_build(&$page)
{
  if (variable_get('ed_home_page_intro_notification_message') && variable_get('ed_show_home_page_intro_notification_message', FALSE) && drupal_is_front_page()) {
    $page['page_top']['ed_notice'] = array(
        '#type' => 'markup',
        '#markup' => '<div class="ed-front-page-notice-container"><div class="ed-front-page-notice">' . variable_get('ed_home_page_intro_notification_message') . '</div></div>'
    );
  }
}


/**
 * Implements hook_menu().
 */
function edidaktikum_menu()
{
  $items['admin/config/edidaktikum'] = array(
      'title' => 'eDidaktikum',
      'description' => 'Administer eDidaktikum modules.',
      'position' => 'right',
      'weight' => -10,
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/edidaktikum/home-page'] = array(
      'title' => 'eDidaktikum home page',
      'description' => 'Configure eDidaktikum home page.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('edidaktikum_home_page_admin_form'),
      'access arguments' => array('access administration pages'),
      'file' => 'edidaktikum.admin.inc',
      'type' => MENU_NORMAL_ITEM,
      'weight' => 0,
  );
  $items['admin/config/edidaktikum/contact-page'] = array(
      'title' => 'eDidaktikum contact page',
      'description' => 'Configure edidaktikum contact page.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('edidaktikum_contact_page_admin_form'),
      'access arguments' => array('access administration pages'),
      'file' => 'edidaktikum.admin.inc',
      'type' => MENU_NORMAL_ITEM,
      'weight' => 1,
  );
  $items['admin/config/edidaktikum/faq-page'] = array(
      'title' => 'eDidaktikum FAQ page',
      'description' => 'Configure edidaktikum FAQ page.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('edidaktikum_faq_page_admin_form'),
      'access arguments' => array('access administration pages'),
      'file' => 'edidaktikum.admin.inc',
      'type' => MENU_NORMAL_ITEM,
      'weight' => 2,
  );
  $items['admin/config/edidaktikum/pp-page'] = array(
      'title' => 'eDidaktikum Privacy Policy page',
      'description' => 'Configure edidaktikum Privacy Policy page.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('edidaktikum_pp_page_admin_form'),
      'access arguments' => array('access administration pages'),
      'file' => 'edidaktikum.admin.inc',
      'type' => MENU_NORMAL_ITEM,
      'weight' => 2,
  );
  $items['admin/config/edidaktikum/statistics'] = array(
      'title' => 'eDidaktikum Statistics',
      'description' => 'Statistics about the eDidaktikum web page',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('edidaktikum_statistics_page_admin_form'),
      'access arguments' => array('access administration pages'),
      'file' => 'edidaktikum.admin.inc',
      'type' => MENU_NORMAL_ITEM,
      'weight' => 6,
  );
  $items['admin/config/edidaktikum/configuration'] = array(
      'title' => 'eDidaktikum Configuration',
      'description' => 'Configuration settings for eDidatkikum',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('edidaktikum_configuration_page_admin_form'),
      'access arguments' => array('access administration pages'),
      'file' => 'edidaktikum.admin.inc',
      'type' => MENU_NORMAL_ITEM,
      'weight' => 7,
  );
  $items['home'] = array(
      'title' => 'Home',
      'page callback' => 'edidaktikum_home_page',
      'access callback' => TRUE,
      'file' => 'edidaktikum.pages.inc',
      'weight' => 0,
      'menu_name' => 'main-menu',
      'type' => MENU_NORMAL_ITEM,
  );
  $items['schools'] = array(
      'title' => 'Schools',
      'page callback' => 'edidaktikum_schools_page',
      'access callback' => TRUE,
      'file' => 'edidaktikum.pages.inc',
      'weight' => 15,
    //'menu_name' => 'main-menu',
    //'type' => MENU_NORMAL_ITEM,
      'type' => MENU_CALLBACK,
  );
  $items['contact'] = array(
      'title' => 'Contact',
      'page callback' => 'edidaktikum_contact_page',
      'access callback' => TRUE,
      'file' => 'edidaktikum.pages.inc',
      'weight' => 25,
      'menu_name' => 'main-menu',
      'type' => MENU_NORMAL_ITEM,
  );
  $items['faq'] = array(
      'title' => 'FAQ',
      'page callback' => 'edidaktikum_faq_page',
      'access callback' => TRUE,
      'file' => 'edidaktikum.pages.inc',
      'weight' => -25,
      'menu_name' => 'user-menu',
  );
  $items['privacy'] = array(
      'title' => 'Privacy Policy',
      'page callback' => 'edidaktikum_pp_page',
      'access callback' => TRUE,
      'file' => 'edidaktikum.pages.inc',
      'weight' => -25,
      'menu_name' => 'user-menu',
  );
  $items['node/%/edidaktikum/action/like'] = array(
      'page callback' => 'edidaktikum_node_like',
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
      'access callback' => 'user_is_logged_in',
  );
  $items['edidaktikum/autocomplete/from/group/%'] = array(
      'page callback' => 'testimeee',
      'page arguments' => array(4),
      'theme callback' => 'ajax_base_page_theme',
      'access callback' => 'user_access',
      'access arguments' => array('access user profiles'),
      'type' => MENU_CALLBACK,
  );
  $items['ed-delete/%/%'] = array(
      'title' => '',
      'page callback' => 'edidaktikum_node_delete_page',
      'access callback' => true,
      'page arguments' => array(1, 2),
  );

  $items['user/%user/groups'] = array(
      'title' => 'My groups',
      'type' => MENU_LOCAL_TASK,
      'access callback' => 'profile_groups_access',
      'access arguments' => array(1),
      'page callback' => 'ed_cluster_my_listing_page',
      'weight' => 5,
  );

  //Hide Track page visits
  $items['user/%user/track/navigation'] = array(
      'title' => 'Track page visits',
      'page callback' => 'statistics_user_tracker',
      'access callback' => 'false',
      'access arguments' => array('access statistics'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 2,
      'file' => 'statistics.pages.inc',
  );


  return $items;
}


function edidaktikum_node_delete_page($groups, $deletedtitle)
{

  $content = array();
  parse_str($groups, $groupsarray);

  $groups = node_load_multiple($groupsarray);

  drupal_set_title($deletedtitle);
  $content['delete-page'] = array(
      '#type' => 'markup',
      '#markup' => t('Continue to group page: '),
  );
  $content['delete-page-groups']['wrapper'] = array(
      '#type' => 'markup',
      '#markup' => '',
      '#prefix' => '<ul>',
      '#suffix' => '</ul>',
  );
  foreach ($groups as $group) {
    $content['delete-page2-groups']['wrapper'][$group->nid] = array(
        '#type' => 'markup',
        '#markup' => l($group->title, 'node/' . $group->nid),
        '#prefix' => '<li>',
        '#suffix' => '</li>',
    );
  }

  return $content;
}


//Based on user_edit_access
function profile_groups_access($account)
{
  return (($GLOBALS['user']->uid == $account->uid)) && $account->uid > 0;
}


function testimeee($gid, $string = '')
{
  //used some code from Views module.
  $group_members_ids = og_get_group_members_properties(node_load($gid), array(), 'members', 'node');
  $group_members = user_load_multiple($group_members_ids);

  $array = drupal_explode_tags($string);
  $last_string = trim(array_pop($array));

  $allmembers = array();
  foreach ($group_members as $member) {
    $allmembers[$member->uid] = check_plain($member->ed_field_full_name[LANGUAGE_NONE][0]['safe_value']);
  }
  $result = array();
  foreach ($allmembers as $uid => $name) {
    if (strpos(strtolower($name), strtolower($last_string)) !== FALSE) {
      $result[$uid] = check_plain($name);
    }
  }

  $matches = array();
  $prefix = count($array) ? implode(', ', $array) . ', ' : '';
  foreach ($result as $uid => $account) {
    $n = $account;
    $userobj = user_load($uid);
    if (strpos($account, ',') !== FALSE || strpos($account, '"') !== FALSE) {
      $n = '"' . str_replace('"', '""', $userobj->name) . '"';
    }
    $matches[$prefix . $userobj->name] = check_plain($account);
  }

  drupal_json_output($matches);
}

/**
 * Custom callback for user label.
 * Uses fullname if available.
 * Defaults to format_username.
 */
function edidaktikum_user_label_callback($account)
{
  $fullnames = field_get_items('user', $account, 'ed_field_full_name');
  if (isset($fullnames[0]['value'])) {
    return $fullnames[0]['value'];
  }
  return format_username($account);
}

/**
 * Tries to return user full_name for an account if possible.
 * In case there is not full_name set formatted username is returned.
 */
function edidaktikum_get_full_name_for_user_account(&$account)
{
  if (isset($account->ed_field_full_name['und'][0]['safe_value'])) {
    return $account->ed_field_full_name['und'][0]['safe_value'];
  }
  return format_username($account);
}

function edidaktikum_entity_info_alter(&$entity_info)
{
  $entity_info['node']['view modes']['featured'] = array(
      'label' => t('Featured'),
      'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['front'] = array(
      'label' => t('Front'),
      'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['dashboard'] = array(
      'label' => t('Dashboard'),
      'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['eref_contained'] = array(
      'label' => t('Entity Reference Contained'),
      'custom settings' => TRUE,
  );
  if (isset($entity_info['user'])) {
    $entity_info['user']['label callback'] = 'edidaktikum_user_label_callback';
  }
}

function edidaktikum_node_view($node, $view_mode, $langcode)
{
  $typestochange = array('ed_learning_resource', 'ed_event', 'ed_news');
  if (in_array($node->type, $typestochange) && $view_mode == 'teaser') {
    if (!empty($node->ed_field_featured_image)) {
      $imgpath = image_style_url('thumbnail', $node->ed_field_featured_image[LANGUAGE_NONE][0]['uri']);

      $node->content['cover-image'] = array(
          '#type' => 'markup',
          '#weight' => 55,
          '#markup' => '<img src="' . $imgpath . '"/>',
          '#prefix' => '<div class="cover-image">',
          '#suffix' => '</div>',
      );

    }
  }
}

/**
 * Implements ctools_render_alter().
 *
 * This is done since hook_node_view never gets called if the node is rendered by Ctools.
 */
function edidaktikum_ctools_render_alter($info, $page, $context)
{


  $node = node_load($context['args'][0]);

  if (!empty($node) && $node->status == 0) {
    $nodetype = node_type_get_type($node);

    $markup = '<p class="unpublished-warning">' . t('@type <b>@title</b> has been created, but not published. At the moment, only you can see it.', array('@type' => $nodetype->name, '@title' => $node->title)) . '</p>';

    drupal_set_message($markup);
  }
}

/**
 * Implements hook_preprocess_node().
 */
function edidaktikum_preprocess_node(&$vars)
{

  if ('teaser' === $vars['view_mode'] && $vars['type'] !== 'ed_portfolio') {
    if (TRUE === $vars['logged_in'] && $vars['uid'] === $vars['user']->uid) {
      $vars['classes_array'][] = 'ed-node-mine';
    }

    if ($vars['type'] == 'ed_learning_resource') {
      $vars['theme_hook_suggestions'][] = 'node__ed_learning_resource_teaser';
    } else {
      $vars['theme_hook_suggestions'][] = 'node__teaser';
    }

  }

  if ($vars['view_mode'] == 'eref_contained') {
    $vars['eref_contained'] = TRUE;
    $vars['theme_hook_suggestions'][] = 'node__eref_contained';
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__eref_contained';
  }

  if (in_array($vars['view_mode'], array('teaser'))) {
    $vars['user_picture'] = '';
  }
}

function ed_get_paging_nr()
{
  return variable_get('ed_paging');
}

function ed_get_grid_paging_nr()
{
  return variable_get('ed_grid_paging');
}

function _ed_get_sorting_options($form_state)
{
  $form = array();
  $form['select'] = array(
      '#type' => 'select',
      '#options' => drupal_map_assoc(array(t('Latest First'), t('Earliest First'), t('Title (A-Z)'))),
      '#prefix' => '<div class="ed_sort_select">',
      '#suffix' => '</div>'
  );
  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Sort'),
      '#prefix' => '<div class="ed_sort_submit">',
      '#suffix' => '</div>'
  );
  return $form;
}


function _ed_get_sorting_by_group($form, &$form_state)
{
  $form = array();
  $form['select'] = array(
      '#prefix' => '<div class="span4 ed_filter_select">',
      '#suffix' => '</div>',
      '#type' => 'select',
      '#options' => isset($form_state['build_info']['args'][0]) ? $form_state['build_info']['args'][0] : array(),
  );
  $form['submit'] = array(
      '#prefix' => '<div class="span4 ed_filter_button">',
      '#suffix' => '</div>',
      '#type' => 'submit',
      '#value' => t('Filter'),
  );
  return $form;
}

function _ed_get_sorting_by_group_submit($form, &$form_state)
{

  $sortorder = $form_state['values']['select'];

  if ($sortorder != 0) {
    drupal_goto(current_path(), array('query' => array('group' => $sortorder)));
  } else {
    drupal_goto(current_path());
  }

}

function ed_get_group_sorting_type(&$content)
{
  $group = 0;

  $content['sorting']['select']['#value'] = 0;
  if (isset($_GET['group'])) {
    $group = $_GET['group'];
    $content['sorting']['select']['#value'] = $group;

  }
  return $group;
}


function _ed_get_sorting_options_submit($form, &$form_state)
{

  $sortorder = $form_state['values']['select'];
  switch ($sortorder) {
    case t('Latest First'):
      $sortordermn = 'DESC';
      break;
    case t('Earliest First'):
      $sortordermn = 'ASC';
      break;
    case t('Title (A-Z)'):
      $sortordermn = 'title';
      break;
  }
  drupal_goto(current_path(), array('query' => array('order' => $sortordermn)));
}

/**
 * Determine ordering for sql query and modify sorting form.
 * @param array $content A drupal Form API array of the page content.
 * @return string Ordering type.
 */
function ed_get_sorting_type(&$content)
{
  $sql_order = 'DESC';
  if (isset($_GET['order'])) {
    $order = $_GET['order'];
    switch ($order) {
      case 'ASC':
        $content['sorting']['select']['#value'] = t('Earliest First');
        $sql_order = 'ASC';
        break;
      case 'title':
        $content['sorting']['select']['#value'] = t('Title (A-Z)');
        $sql_order = 'title';
        break;
      case 'DESC':
      default:
        $content['sorting']['select']['#value'] = t('Latest First');
        $sql_order = 'DESC';
        break;
    }
  }
  return $sql_order;
}


/**
 * Implements hook_form_alter().
 */
function edidaktikum_form_alter(&$form, $form_state, $form_id)
{
  if ($form_id == 'views_exposed_form') {
    if ($form_state['view']->name == 'og_members_admin') {
      $form['uid']['#autocomplete_path'] = 'edidaktikum/autocomplete/from/group/' . $form_state['view']->args[1];
    }
  }

  // If not a blog post, then student can only set Group content visibility to private
  // Remove any other options from the node edit form
  if (!empty($form['#node_edit_form']) && isset($form['group_content_access'])) {
    $account = $GLOBALS['user'];
    if (!(in_array('teacher', $account->roles) || in_array('administrator', $account->roles))) {
      if ($form['type']['#value'] != 'ed_blog') {
        unset($form['group_content_access']['und']['#options'][0]);
        unset($form['group_content_access']['und']['#options'][1]);
      }

    }
  }

  // Allow any to set node published or not
  if (!empty($form['#node_edit_form'])) {
    $account = $GLOBALS['user'];
    if (!in_array('administrator', $account->roles)) {
      $form['options']['#access'] = TRUE;
      $form['options']['promote']['#access'] = FALSE;
      $form['options']['sticky']['#access'] = FALSE;
    }
  }

  $form['#attached']['js'][] = drupal_get_path('module', 'edidaktikum') . '/edidaktikum.js';
  $form['#attached']['css'][] = drupal_get_path('module', 'edidaktikum') . '/edidaktikum.css';

  // Alter node delete form and add own redirect handler logic
  if ('node_delete_confirm' == $form_id) {
    $form['actions']['submit']['#submit'][] = 'node_delete_confirm_submit';
    $form['actions']['submit']['#submit'][] = '_edidaktikum_node_delete_redirect';
  }
}

/*
 * Implements hook_attach_submit().
 */

function edidaktikum_field_attach_submit($entity_type, $entity, $form, &$form_state)
{
  if (isset($entity->ed_field_category) && $entity->ed_field_category) {
    $parentArray = array();
    $parents = array();
    foreach ($entity->ed_field_category[LANGUAGE_NONE] as $ta) {
      _check_for_parents($ta['tid'], $parentArray);
    }
    if (is_array($parentArray) && sizeof($parentArray) > 0) {
      foreach ($parentArray as $stid) {
        if (!in_array(array('tid' => $stid), $entity->ed_field_category[LANGUAGE_NONE])) {
          array_push($entity->ed_field_category[LANGUAGE_NONE], array('tid' => $stid));
        }
      }
    }
  }
}

function _check_for_parents($tid, &$parentArray)
{
  $parent = taxonomy_get_parents($tid);
  if (!empty($parent)) {
    $parent = reset($parent);
    array_push($parentArray, $parent->tid);
    _check_for_parents($parent->tid, $parentArray);
  }
}

/**
 * Returns identifiers for promoted node of type provided or false.
 * @param $node_type
 *   Node type to check promoted for
 */
function ed_get_promoted_by_node_type($node_type)
{
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'))
      ->addTag('node_access')
      ->condition('n.type', $node_type)
      ->condition('n.status', 1)
      ->condition('n.promote', 1)
      ->orderBy('n.created', 'DESC');
  $nids = $query->execute()->fetchCol();
  if (!empty($nids)) {
    return $nids;
  }
  return FALSE;
}

/**
 * Returns identifiers for draft nodes of type provided or false.
 * @param $node_type
 *   Node type to check promoted for
 */
function ed_get_drafts_by_node_type($node_type)
{
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'))
      ->addTag('node_access')
      ->condition('n.type', $node_type)
      ->condition('n.status', 0)
      ->orderBy('n.created', 'DESC');
  $nids = $query->execute()->fetchCol();
  if (!empty($nids)) {
    return $nids;
  }
  return FALSE;
}

/**
 * Implements hook_user_login().
 */
function edidaktikum_user_login(&$edit, $account)
{
  // Redirect to dashboard in case of user login
  if (isset($edit['values']['form_id']) && 'user_login' == $edit['values']['form_id']) {
    $edit['redirect'] = 'dashboard';
  }
}

/**
 * Implements hook_user_view_alter().
 */
function edidaktikum_user_view_alter(&$build)
{

  if ('full' == $build['#view_mode']) {
    if (isset($build['ed_field_full_name'])) {
      $build['email'][0]['#markup'] = '<a href="mailto:' . $build['#account']->mail . '?subject=eDidaktikum e-mail">' . $build['#account']->mail . '</a>';
    }
    if (isset($build['og_user_node']) && is_array($build['og_user_node']) && !empty($build['og_user_node']) && !empty($build['og_user_node']['#items'])) {
      $build['og_user_node']['#label_display'] = 'hidden';

      // Create two "virtual" elements that would clone the logic of groups field and copy data for active and inactive groups
      $build['og_user_node_active'] = [
          '#title' => '',
          '#items' => [],
      ];
      $build['og_user_node_inactive'] = [
          '#title' => '',
          '#items' => [],
      ];

      foreach (array_keys($build['og_user_node']) as $key) {
        if (in_array($key, ['#theme', '#weight', '#access', '#label_display', '#view_mode', '#language', '#field_name', '#field_type', '#field_translatable', '#entity_type', '#bundle', '#object', '#formatter',])) {
          $build['og_user_node_active'][$key] = $build['og_user_node'][$key];
          $build['og_user_node_inactive'][$key] = $build['og_user_node'][$key];
        }
      }

      $items_nodes = node_load_multiple(array_map(function ($item) {
        return $item['target_id'];
      }, $build['og_user_node']['#items']));

      // Group items and link elements do not have the same order, thus we need an array of links that is keyed by group id
      $group_links = array_filter($build['og_user_node'], function($item) {
        return is_array($item) && isset($item['#gid']) && isset($item['#type']) && $item['#type'] == 'link';
      });
      $group_links = array_combine(array_map(function($item) {
        return $item['#gid'];
      }, $group_links), $group_links);

      foreach (array_values($items_nodes) as $index => $item_node) {
        if (isset($item_node->ed_field_group_state) && $item_node->ed_field_group_state[LANGUAGE_NONE][0]['value'] == 1) {
          $build['og_user_node_active']['#items'][] = $build['og_user_node']['#items'][$index];
          $build['og_user_node_active'][sizeof($build['og_user_node_active']['#items']) - 1] = $group_links[$item_node->nid];
        } else if (isset($item_node->ed_field_group_state) && $item_node->ed_field_group_state[LANGUAGE_NONE][0]['value'] == 0) {
          $build['og_user_node_inactive']['#items'][] = $build['og_user_node']['#items'][$index];
          $build['og_user_node_inactive'][sizeof($build['og_user_node_inactive']['#items']) - 1] = $group_links[$item_node->nid];
        }
      }
    }
    if (isset($build['summary'])) {
      $build['summary']['#title'] = '';
      $build['summary']['member_for']['#title'] = '';
      $build['summary']['member_for']['#markup'] = '<p>' . $build['summary']['member_for']['#markup'] . '</p>';
    }
    if (isset($build['field_institution'])) {
      $build['field_institution']['#label_display'] = 'hidden';
      $build['field_institution'][0]['#markup'] = '<p>' . $build['#account']->field_institution[LANGUAGE_NONE][0]['safe_value'] . '</p>';

    }
    if (isset($build['hybridauth_identities'])) {
      unset($build['hybridauth_identities']);
    }

    if (isset($build['ed_field_study_group'])) {
      $build['ed_field_study_group']['#label_display'] = 'hidden';
    }


  }
}

/**
 * Set redirect location on delete of own node types.
 */
function _edidaktikum_node_delete_redirect($form, &$form_state)
{

  if (!empty($form['#node']->og_group_ref[LANGUAGE_NONE])) {
    $groups = array();
    foreach ($form['#node']->og_group_ref[LANGUAGE_NONE] as $group) {
      array_push($groups, $group['target_id']);
    }
    $groups = drupal_http_build_query($groups);
    $form_state['redirect'] = 'ed-delete/' . $groups . '/' . $form['#node']->title;
  } else {
    $form_state['redirect'] = 'dashboard';
  }
}

/**
 * Implements hook_username_alter().
 */
function edidaktikum_username_alter(&$name, $account)
{
  // Don't alter anonymous users or objects that do not have any user ID.
  if (empty($account->uid)) {
    return;
  }

  // UPD 2022-10-04: Added for #895 and #921
  if (strpos($_GET['q'], 'user/register') !== 0) {
    $account2 = user_load($account->uid);
    if (!empty($account2->ed_field_full_name['und'][0]['safe_value'])) {
      $name = $account2->ed_field_full_name['und'][0]['safe_value'];
    }
  }


}

function edidaktikum_preprocess_field(&$variables)
{
  $field_name = $variables['element']['#field_name'];
  if ($field_name === 'ed_answer_field_time_spent') {

    $minutes = $variables['element']['#items'][0]['mins'];

    //convert minutes to hours and minutes
    $hours = floor($minutes / 60);
    $minutes = $minutes % 60;

    $variables['items'][0]['#markup'] = $hours . 't ' . $minutes . 'm';
  }
}

/**
 * Returns translated node type name by node type.
 * If type is not known a general name content will be used instead.
 *
 * @param string $node_type Node type (machine name)
 * @param boolean $capitalize Capitalize words or not
 *
 * @return string
 */
function edidaktikum_get_node_type_name($node_type)
{
  $node_type_name = t('Content');
  switch ($node_type) {
    case "ed_blog":
      $node_type_name = t('Blog Post');
      break;
    case "ed_bookmark":
      $node_type_name = t('Bookmark');
      break;
    case "ed_event":
      $node_type_name = t('Event');
      break;
    case "ed_news":
      $node_type_name = t('News');
      break;
    case "ed_learning_resource":
      $node_type_name = t('Learning Resource');
      break;
    case "ed_page":
      $node_type_name = t('Page');
      break;
    case "ed_forum":
      $node_type_name = t('Discussion');
      break;
    case "ed_file":
      $node_type_name = t('File');
      break;
    case "ed_portfolio":
      $node_type_name = t('Portfolio');
      break;
    case "ed_task":
      $node_type_name = t('Task');
      break;
    case "ed_answer":
      $node_type_name = t('Answer');
      break;
    case "ed_q_portfolio":
      $node_type_name = t('Qualification Portfolio');
      break;
  }


  return $node_type_name;
}

/**
 * Returns node title. Handles special case of ed_answer node type
 * that does not have a title of its own.
 *
 * @param object $node A node object passed by reference.
 *
 * @return string
 */
function edidaktikum_get_node_title(&$node)
{
  if ('ed_answer' == $node->type) {
    return ed_get_answer_title($node);
  }

  return $node->title;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function edidaktikum_ctools_plugin_directory($module, $plugin)
{
  if (('content_types' == $plugin && 'ctools' == $module)) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Ajax endpoint for add/remove node like.
 */
function edidaktikum_node_like($nid)
{
  $account = $GLOBALS['user'];
  $response = array(
      'success' => FALSE,
  );

  $count = db_select('ed_node_like', 'enl')
      ->fields('enl', array('nid'))
      ->condition('enl.nid', $nid)
      ->condition('enl.uid', $account->uid)
      ->countQuery()
      ->execute()->fetchField();

  if (!$count) {
    db_insert('ed_node_like')
        ->fields(array(
            'nid' => $nid,
            'uid' => $account->uid,
            'timestamp' => REQUEST_TIME,
        ))
        ->execute();

    $response['success'] = TRUE;
  } else {
    $deleted = db_delete('ed_node_like')
        ->condition('nid', $nid)
        ->condition('uid', $account->uid)
        ->execute();

    if ($deleted) {
      $response['success'] = TRUE;
    }
  }

  if ($response['success']) {
    $likes = db_select('ed_node_like', 'enl')
        ->fields('enl', array('uid'))
        ->condition('enl.nid', $nid)
        ->countQuery()->execute()->fetchField();
    $response['count'] = $likes;
  }

  drupal_json_output($response);
}

/**
 * Determines if current case is a special comment delete one and
 * the user is allowed to delete a comment.
 * The logic is everyone is allowed to delete own comments and a
 * teacher role user is allowed to delte comments by students (any
 * user having no special roles).
 *
 * @param Object $comment Comment object
 * @return boolean
 */
function _edidaktikum_can_special_delete_comment(&$comment)
{
  if (!user_is_logged_in()) {
    return FALSE;
  }
  $account = $GLOBALS['user'];

  if ($account->uid === $comment->uid) {
    // Show delete link to owner
    return TRUE;
  } else if (in_array('teacher', $account->roles)) {
    $owner = user_load($comment->uid);
    // Show delete link to teacher if creator is a student
    if (!(in_array('teacher', $owner->roles) || in_array('administrator', $owner->roles))) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Implements hook_comment_view_alter().
 */
function edidaktikum_comment_view_alter(&$build)
{
  if (!user_is_logged_in()) {
    return;
  }

  if (isset($build['links']['comment']['#links']['comment-delete'])) {
    return;
  }

  $comment = $build['#comment'];

  if (_edidaktikum_can_special_delete_comment($comment)) {
    $build['links']['comment']['#links']['comment-delete'] = array(
        'title' => t('delete'),
        'href' => "comment/$comment->cid/delete",
        'html' => TRUE,
    );
  }
}

/**
 * Implements hook_user_logout().
 */
function edidaktikum_user_logout($account)
{
  user_cookie_save(array('edidaktikum.logoff' => '1'));
}

/**
 * Determines if comment can be removed.
 * Used as an access check.
 * @param int $cid Comment id
 * @return boolean
 */
function edidaktikum_comment_delete_access($cid)
{
  if (user_access('administer comments')) {
    return TRUE;
  }

  if (!user_is_logged_in()) {
    return FALSE;
  }

  $comment = comment_load($cid);

  return _edidaktikum_can_special_delete_comment($comment);
}

/**
 * Implements hook_menu_alter().
 */
function edidaktikum_menu_alter(&$items)
{
  if (user_is_logged_in()) {
    $items['comment/%/delete']['access callback'] = 'edidaktikum_comment_delete_access';
    $items['comment/%/delete']['access arguments'] = array(1);
  }
  //$items['user/%user/hybridauth']['access callback'] = false;
}


//function edidaktikum_menu_local_tasks_alter(&$data, $router_item, $root_path) {
//  foreach ($data['tabs'] as $key1 => $tabs) {
//    foreach ($tabs['output'] as $key2 => $item) {
//
//      // Conditionally change link title
//      if (drupal_match_path($item['#link']['path'], 'user/*')) {
//
//        $item['#prefix'] = '<div class="tabbable tabs-left"><ul class="nav nav-tabs">';
//        $item['#suffix'] = '</ul></div>';
//        drupal_render($item);
//        //kpr($item);
//      }
//    }
//  }
//  kpr($item);
//}


/**
 * Implements hook_pathauto_alias_alter.
 * Set the language of our alias to neutral so that the alias is generated for all languages.
 * We do not force language neutral if we have a node type being managed by other
 * translation modules so we return early.
 */
function edidaktikum_pathauto_alias_alter(&$alias, array &$context)
{
  if ((module_exists('i18n_node')
          && i18n_node_type_enabled($context['data']['node']->type))
      || (module_exists('entity_translation')
          && entity_translation_node_supported_type($context['data']['node']->type))) {
    return;
  }
  $context['language'] = LANGUAGE_NONE;
}


function ed_get_likes($nid)
{
  $likescount = db_select('ed_node_like', 'enl')
      ->fields('enl', array('uid'))
      ->condition('enl.nid', $nid)
      ->countQuery()->execute()->fetchField();

  return $likescount;
}

function ed_get_views($nid)
{
  $viewscount = db_select('node_counter', 'nc')
      ->fields('nc', array('totalcount'))
      ->condition('nid', $nid)
      ->execute()->fetchField();
  if ($viewscount > 0) {
    return $viewscount;
  } else {
    return 0;
  }

}

/**
 * Returns totalcount and daycount values for a node.
 *
 * @param $nid
 * @return string[]
 */
function ed_get_views_total_and_days_counts($nid): array
{
  $data = db_select('node_counter', 'nc')
      ->fields('nc', ['totalcount', 'daycount'])
      ->condition('nid', $nid)
      ->execute()->fetchAssoc();

  return $data ?: [
      'totalcount' => '0',
      'daycount' => '0',
  ];
}

/**
 * Returns totalcount and daycount values for a node.
 * Both keys are prepended by @ symbol so that the resulting array could be use arguments parameter of t() function.
 *
 * @param $nid
 * @return array
 */
function ed_get_views_total_and_days_counts_t_args($nid): array
{
  $data = [];
  $counts = ed_get_views_total_and_days_counts($nid);

  foreach ($counts as $key => $count) {
    $data['@' . $key] = $count;
  }

  return $data;
}

/*
function edidaktikum_views_query_alter(&$view, &$query){
  dpm($view, __FUNCTION__);
  dpm($query, __FUNCTION__);
}*/

//  used for arrays of keyed arrays
//  concentrates a member of the keyed arrays into an array
//  useful for things like left joined sql results
//  example:
//    ed_util_array_concentrate_member([ ['id' => 1, 'value' => 1], ['id' => 1, 'value' => 2] ], 'id', 'value')
//    returns: ['id' => 1, 'value' => [1, 2]];
function ed_util_array_concentrate_members($arr, $primary_key, $concentrate_keys)
{
  $map = [];
  $ret = [];

  foreach ($arr as &$item) {
    $key = $item[$primary_key];

    if (!isset($map[$key])) {
      foreach ($concentrate_keys as &$concentrate_key) {
        $item[$concentrate_key] = empty($item[$concentrate_key]) ? [] : [$item[$concentrate_key]];
      }
      $ret [] =& $item;
      $map[$key] =& $item;
    } else {
      $original =& $map[$key];
      foreach ($concentrate_keys as &$concentrate_key) {
        if (!empty($item[$concentrate_key])) {
          if (!in_array($item[$concentrate_key], $original[$concentrate_key])) {
            $original[$concentrate_key] [] = $item[$concentrate_key];
          }
        }
      }
    }
  }

  return $ret;
}


//  used for arrays of keyed arrays
//  concentrates a member of the keyed arrays into an array
//  useful for things like left joined sql results
//  example:
//    ed_util_array_concentrate_member([ ['id' => 1, 'value' => 1], ['id' => 1, 'value' => 2] ], 'id', 'value')
//    returns: ['id' => 1, 'value' => [1, 2]];
function ed_util_array_concentrate_member($arr, $primary_key, $concentrate_key)
{
  $map = [];
  $ret = [];

  foreach ($arr as &$item) {
    $key = $item[$primary_key];

    if (!isset($map[$key])) {
      $item[$concentrate_key] = empty($item[$concentrate_key]) ? [] : [$item[$concentrate_key]];
      $ret [] =& $item;
      $map[$key] =& $item;
    } else {
      $original =& $map[$key];
      if (!empty($item[$concentrate_key])) $original[$concentrate_key] [] = $item[$concentrate_key];
    }
  }

  return $ret;
}

//  used for arrays of keyed arrays
//  renames a key of the keyed arrays in array
function ed_util_rename_key_of_arrays($arr, $old_name, $new_name)
{
  foreach ($arr as &$item) {
    $item[$new_name] = $item[$old_name];
    unset($item[$old_name]);
  }
  return $arr;
}

function ed_get_user($uid)
{
  $q = db_select('users', 'u');
  $q->condition('u.uid', $uid);
  $q->fields('u', ['uid', 'data']);
  $q->leftJoin('field_data_ed_field_full_name', 'fn', 'fn.entity_id = u.uid');
  $q->fields('fn', ['ed_field_full_name_value']);
  $q->leftJoin('field_data_ed_field_study_group', 'sg', 'sg.entity_id = u.uid');
  $q->fields('sg', ['ed_field_study_group_value']);
  $user = $q->execute()->fetchAll(PDO::FETCH_ASSOC);
  unset($q);

  //  change names of things + concentrate
  $user = ed_util_array_concentrate_member($user, 'uid', 'study_groups');
  $user = ed_util_rename_key_of_arrays($user, 'ed_field_full_name_value', 'full_name');
  $user = ed_util_rename_key_of_arrays($user, 'ed_field_study_group_value', 'study_groups');
  $user = $user[0];

  //  if no name given, try fetch from hybridauth data
  if ($user['full_name'] == NULL) {
    $data = unserialize($user['data']);
    if (isset($data['hybridauth']['displayName'])) {
      $user['full_name'] = $data['hybridauth']['displayName'];
    }
  }

  return $user;
}

//  gets group members ['uid']
//  $gid: the group id
//  $b_full_name: optionally adds full names ['full_name']
//  $b_roles: optionally adds group roles ['roles']
//  $b_study_groups_ optionally adds study groups ['study_groups']
function ed_get_group_members($gid, $b_full_name = false, $b_roles = false, $b_study_groups = false)
{
  //  get group members
  $q = db_select('og_membership', 'ogm');
  $q->condition('ogm.gid', $gid);
  $q->condition('ogm.entity_type', 'user');
  $q->condition('ogm.state', 1, '=');
  $q->join('users', 'u', 'u.uid = ogm.etid AND u.status = 1');
  $q->fields('u', ['uid']);

  //  optionally with full names
  if ($b_full_name) {
    $q->leftJoin('field_data_ed_field_full_name', 'fn', 'fn.entity_id = ogm.etid');
    $q->fields('fn', ['ed_field_full_name_value']);
    //  $q->orderBy('ed_field_full_name_value', 'ASC'); cant order by name if doesn't exist
  }

  //  optionally with study groups
  if ($b_study_groups) {
    $q->leftJoin('field_data_ed_field_study_group', 'sg', 'sg.entity_id = ogm.etid');
    $q->fields('sg', ['ed_field_study_group_value']);
  }

  $members = $q->execute()->fetchAll(PDO::FETCH_ASSOC);
  unset($q);

  //  if full name not present, get data from user blob
  if ($b_full_name) {
    $missing = [];
    foreach ($members as &$member) {
      if ($member['ed_field_full_name_value'] == NULL) {
        $missing [] = $member['uid'];
      }
    }

    if (count($missing) > 0) {
      $members_with_datas = db_query('SELECT uid, data FROM users WHERE uid IN (:uids)', [':uids' => $missing])->fetchAll(PDO::FETCH_ASSOC);
      foreach ($members_with_datas as &$member_with_data) {
        $data = unserialize($member_with_data['data']);
        $display_name = $data['hybridauth']['displayName'];
        foreach ($members as &$member) {
          if ($member['uid'] == $member_with_data['uid']) {
            $member['ed_field_full_name_value'] = $display_name;
            break;
          }
        }
      }
    }
  }

  //  order
  if ($b_full_name) {
    usort($members, function ($a, $b) {
      return strnatcasecmp($a['ed_field_full_name_value'], $b['ed_field_full_name_value']);
    });
  }

  //  fetch roles
  if ($b_roles) {

    //  get group creator id
    $q = db_select('node', 'n');
    $q->condition('n.nid', $gid);
    $q->fields('n', ['uid']);
    $creator_uid = $q->execute()->fetchCol()[0];
    unset($q);

    //  get group role names
    $og_role_names = [];
    $q = db_select('og_role', 'ogr');
    $q->fields('ogr', ['rid', 'name']);
    $tmp = $q->execute()->fetchAll(PDO::FETCH_ASSOC);
    unset($q);
    foreach ($tmp as $role) $og_role_names[$role['rid']] = $role['name'];

    //  process members
    foreach ($members as &$member) {
      //  from og user roles
      $q = db_select('og_users_roles', 'ogur');
      $q->condition('uid', $member['uid']);
      $q->condition('gid', $gid);
      $q->fields('ogur', ['rid']);
      $role_ids = $q->execute()->fetchCol();
      $member['roles'] = [];
      foreach ($role_ids as $id) array_push($member['roles'], $og_role_names[$id]);

      //  or if creator
      if ($member['uid'] == $creator_uid) array_push($member['roles'], OG_ADMINISTRATOR_ROLE);
    }
  }

  //  roll up
  if ($b_full_name) {
    $members = ed_util_rename_key_of_arrays($members, 'ed_field_full_name_value', 'full_name');
  }

  if ($b_study_groups) {
    $members = ed_util_rename_key_of_arrays($members, 'ed_field_study_group_value', 'study_groups');
    $members = ed_util_array_concentrate_member($members, 'uid', 'study_groups');
  }

  return $members;
}

function ed_filter_admins(&$members)
{
  $admins = [];
  for ($i = count($members) - 1; $i >= 0; $i--) {
    if (in_array(OG_ADMINISTRATOR_ROLE, $members[$i]["roles"])) {
      $admins [] = $members[$i];
      unset($members[$i]);
    }
  }
  return $admins;
}

//  gets group tasks ['nid', 'title']
//  $gid: the group id
//  $b_due_date: optionally adds due dates ['due_date']
//  $b_study_group: optionally adds study groups ['study_groups']
//  $b_targeted_members: optionally adds targeted members ['targeted_member_ids']
function ed_get_group_tasks($gid, $b_due_date = false, $b_study_groups = false, $b_targeted_members = false, $desc = false)
{
  //  get group tasks
  $q = db_select('og_membership', 'ogm');
  $q->condition('ogm.gid', $gid);
  $q->condition('ogm.entity_type', 'node');
  $q->join('node', 'n', 'n.nid = ogm.etid AND n.type = \'ed_task\' AND n.status = 1');
  $q->fields('n', ['nid', 'title']);

  //  optionally with due date
  if ($b_due_date) {
    $q->join('field_data_ed_task_due_date', 'dd', 'dd.entity_id = ogm.etid');
    $q->fields('dd', ['ed_task_due_date_value']);
    $q->orderBy('dd.ed_task_due_date_value', ($desc) ? 'DESC' : 'ASC');
  }

  //  optionally with study groups
  if ($b_study_groups) {
    $q->leftJoin('field_data_ed_task_field_study_group', 'sg', 'sg.entity_id = ogm.etid');
    $q->fields('sg', ['ed_task_field_study_group_value']);
  }

  //  optionally with targeted members
  if ($b_targeted_members) {
    $q->leftJoin('field_data_ed_field_to_group_member', 'tm', 'tm.entity_id = ogm.etid');
    $q->fields('tm', ['ed_field_to_group_member_target_id']);
  }

  if ($desc) $q->orderBy('ogm.created', 'DESC');

  $tasks = $q->execute()->fetchAll(PDO::FETCH_ASSOC);

  $concentrate_keys = [];
  if ($b_study_groups) {

    $tasks = ed_util_rename_key_of_arrays($tasks, 'ed_task_field_study_group_value', 'study_groups');
    $concentrate_keys[] = 'study_groups';
    //$tasks = ed_util_array_concentrate_member($tasks, 'nid', 'study_groups');

  }

  if ($b_targeted_members) {

    $tasks = ed_util_rename_key_of_arrays($tasks, 'ed_field_to_group_member_target_id', 'targeted_member_ids');
    $concentrate_keys[] = 'targeted_member_ids';
    // $tasks = ed_util_array_concentrate_member($tasks, 'nid', 'targeted_member_ids');

  }

  if (!empty($concentrate_keys)) {

    $tasks = ed_util_array_concentrate_members($tasks, 'nid', $concentrate_keys);
  }

  if ($b_due_date) $tasks = ed_util_rename_key_of_arrays($tasks, 'ed_task_due_date_value', 'due_date');

  return $tasks;
}


//  checks if task is applicable to member
//  $task: result item of ed_get_group_tasks with study groups and targeted member ids
//  $member: result item of ed_get_group_members with study groups
function ed_is_task_applicable($task, $member)
{
  $applicable = true;                                             //  default true

  if (count($task['study_groups']) > 0) {
    $applicable = false;                                          //  excluded by presence of groups
    foreach ($member['study_groups'] as $study_group) {
      if (in_array($study_group, $task['study_groups'])) {
        $applicable = true;                                     //  included if member is in group
        break;
      }
    }
  }

  if (count($task['targeted_member_ids']) > 0) {
    foreach ($task['targeted_member_ids'] as $tid) {
      if ($tid == $member['uid']) {
        $applicable = true;                                     //  included if member is targeted
        break;
      } else {
        $applicable = false;
      }
    }
  }

  return $applicable;
}

//  gets a task answer ['nid', 'created', 'changed']
//  $task_id: the task id
//  $uid: the user id
//  $b_content: optionally adds answer content ['content']
//  $status: optionally adds answer status ['status'], ['grade']
function ed_get_answer($task_id, $uid, $b_content = false, $status = false)
{

  //  find answer id from task id and user id
  $q = db_select('field_data_field_ref_to_task', 'rt');
  $q->condition('rt.field_ref_to_task_target_id', $task_id);
  $q->join('node', 'n', 'n.nid = rt.entity_id AND n.uid = :uid AND n.status = 1', ['uid' => $uid]);
  $q->fields('n', ['nid', 'created', 'changed']);
  $q->range(0, 1);

  //  optionally with content
  if ($b_content) {
    $q->join('field_data_ed_field_content', 'fc', 'fc.entity_id = rt.entity_id');
    $q->fields('fc', ['ed_field_content_value']);
  }

  $answers = $q->execute()->fetchAll(PDO::FETCH_ASSOC);
  unset($q);

  //  if no answer
  if (count($answers) == 0) return ['status' => 'unanswered'];
  $answer = $answers[0];

  //  process
  if ($b_content) {
    $answer['content'] = $answer['ed_field_content_value'];
    unset($answer['ed_field_content_value']);
  }

  if ($status) {
    //Get status
    $answer['status'] = 'unchecked';
    $answer['grade'] = 0;
    $wrapper = entity_metadata_wrapper('node', $answer['nid']);
    if ($wrapper->__isset('ed_answer_last_status')) {
      $last_status = $wrapper->ed_answer_last_status->value();

      if (!empty($last_status)) {
        $answer['status'] = $last_status['status'];
        $answer['grade'] = $last_status['grade'] != null ? $last_status['grade'] : 0;
      }

    }
  }

  return $answer;
}

function ed_get_taxonomy_tree($vid)
{
  $q = db_select("taxonomy_term_data", "td");
  $q->fields("td", ["tid", "name", "weight"]);
  $q->condition("vid", $vid);
  $q->join("taxonomy_term_hierarchy", "h", "h.tid = td.tid");
  $q->fields("h", ["parent"]);
  $nodes = $q->execute()->fetchAll(PDO::FETCH_ASSOC);
  unset($q);
  usort($nodes, function ($a, $b) {
    if ($a["parent"] == $b["parent"]) {
      return (intval($a["weight"]) - intval($b["weight"]));
    } else {
      return (intval($a["parent"]) - intval($b["parent"]));
    }
  });


  $root = ["tid" => "0", "name" => "", "children" => []];
  $map = ["0" => & $root];

  foreach ($nodes as &$node) {
    $n = ["tid" => $node["tid"], "name" => $node["name"], "children" => isset($map[$node["tid"]]) ? $map[$node["tid"]]["children"] : []];
    $map[$node["parent"]]["children"] [] =& $n;
    $map[$node["tid"]] =& $n;
    unset($n);
  }

  return $root;
}

function ed_get_group_bookmarks($gid)
{
  //  get group bookmarks
  $q = db_select('og_membership', 'ogm');
  $q->condition('ogm.gid', $gid);
  $q->condition('ogm.entity_type', 'node');
  $q->orderBy('ogm.created', 'DESC');
  $q->join('node', 'n', 'n.nid = ogm.etid AND n.type = \'ed_bookmark\' AND n.status = 1');
  $q->fields('n', ['nid', 'title']);

  $q->join('field_data_ed_bookmark_url', 'dd', 'dd.entity_id = ogm.etid');
  $q->fields('dd', ['ed_bookmark_url_value']);

  $bookmarks = $q->execute()->fetchAll(PDO::FETCH_ASSOC);

  $bookmarks = ed_util_rename_key_of_arrays($bookmarks, 'ed_bookmark_url_value', 'url');

  return $bookmarks;
}


function ed_get_group_files($gid)
{
  //  get group files
  $q = db_select('og_membership', 'ogm');
  $q->condition('ogm.gid', $gid);
  $q->condition('ogm.entity_type', 'node');
  $q->orderBy('ogm.created', 'DESC');
  $q->join('node', 'n', 'n.nid = ogm.etid AND n.type = \'ed_files\' AND n.status = 1');
  $q->fields('n', ['nid', 'title']);


  $files = $q->execute()->fetchAll(PDO::FETCH_ASSOC);

  return $files;
}


function ed_get_group_learning_resources($gid)
{
  //  get group learning resources
  $q = db_select('og_membership', 'ogm');
  $q->condition('ogm.gid', $gid);
  $q->condition('ogm.entity_type', 'node');
  $q->orderBy('ogm.created', 'DESC');
  $q->join('node', 'n', 'n.nid = ogm.etid AND n.type = \'ed_learning_resource\' AND n.status = 1');
  $q->fields('n', ['nid', 'title']);


  $learning_resources = $q->execute()->fetchAll(PDO::FETCH_ASSOC);

  return $learning_resources;
}

/**
 * Implements hook_query_node_access_alter().
 *
 * Used module "Node View Permissions" as a base for implementation logic
 */
function edidaktikum_query_node_access_alter(QueryAlterableInterface $query)
{
  global $user;

  // Read meta-data from query, if provided.
  if (!$account = $query->getMetaData('account')) {
    $account = $user;
  }
  if (!$op = $query->getMetaData('op')) {
    $op = 'view';
  }

  // If $account can bypass node access, or there are no node access modules,
  // or the operation is 'view' and the $acount has a global view grant (i.e.,
  // a view grant for node ID 0), we don't need to alter the query.
  if (user_access('bypass node access', $account)) {
    return;
  }

  //if viewing the node, deny anonymous access to certain types
  if ($op == 'view' && !(bool)$user->uid) {
    $tables = $query->getTables();
    // @see _node_query_node_access_alter().
    $node_table_alias = FALSE;
    foreach ($tables as $alias => $table) {
      if ($table['table'] == 'node') {
        $node_table_alias = $alias;
        break;
      }
    }

    if (!$node_table_alias) {
      //The array internal pointer should be reset before getting the first key bacause it can be NULL here.
      reset($tables);
      // If the query has 'node_access' meta tag, we can assume that there should be a nid field.
      $query->join('node', 'n', 'n.nid = ' . key($tables) . '.nid');
      $node_table_alias = 'n';
    }

    if ($node_table_alias) {
      $alias = $node_table_alias;
      $query->condition("$alias.type", 'ed_blog', '<>');
      $query->condition("$alias.type", 'ed_answer', '<>');
      $query->condition("$alias.type", 'ed_file', '<>');
    }
  }
}

/**
 * Implements hook_hybridauth_user_insert().
 */
function edidaktikum_hybridauth_user_insert($account, $data)
{
  $wrapper = entity_metadata_wrapper('user', $account->uid);

  if (!$wrapper->ed_field_full_name->value()) {
    $wrapper->ed_field_full_name->set($data['displayName']);
    $wrapper->save();
  }
}

function edidaktikum_get_short_content_or_excerpt($node)
{
  if (!empty($node->ed_field_excerpt)) {
    return strlen($node->ed_field_excerpt['und'][0]['safe_value']) > 150 ? substr($node->ed_field_excerpt['und'][0]['safe_value'], 0, 150) . "..." : $node->ed_field_excerpt['und'][0]['safe_value'];
  } else {
    if (!empty($node->ed_field_content)) {
      if (strpos($node->ed_field_content['und'][0]['safe_value'], 'iframe') !== false) {
        return '';
      }
      return strlen($node->ed_field_content['und'][0]['safe_value']) > 250 ? strip_tags(substr($node->ed_field_content['und'][0]['safe_value'], 0, 250) . "...") : strip_tags($node->ed_field_content['und'][0]['safe_value']);
    } else {
      return '';
    }

  }
}

/**
 * Implements hook_theme()
 * Used by by module templates
 */
function edidaktikum_theme_bs3_theme()
{

  //global $user;
  return array(
      'ed_collection' => array(
          'template' => 'templates/ed_collection',
          'variables' => array('nodes' => null),
      ),
      'video-bricks' => array(
          'template' => 'templates/video-bricks',
          'variables' => array('nodes' => null),
      ),

      'user_profile_form' => array(
        // Forms always take the form argument.
          'arguments' => array('form' => NULL),
          'render element' => 'form',
          'template' => 'templates/user-profile-edit',
      ),
  );
}


/**
 * Implement hook_form_user_profile_form_alter().
 *
 */
function edidaktikum_form_user_profile_form_alter(&$form, &$form_state)
{
  $form['og_user_node']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function edidaktikum_form_user_register_form_alter(&$form, &$form_state, $form_id)
{
  if (user_is_anonymous()) {
    $form['#attached']['js'][] = drupal_get_path('module', 'edidaktikum') . '/js/ed_site_policy_agreement.js';
    $form['site_policy_agreement'] = [
        '#type' => 'container',
        '#weight' => 10,
    ];
    $form['site_policy_agreement']['label'] = [
        '#type' => 'item',
        '#title' => t('Site policy agreement'),
    ];
    $form['site_policy_agreement']['privacy_policy'] = [
        '#type' => 'markup',
        '#markup' => l(t('Privacy Policy'), 'privacy', ['attributes' => ['target' => '_blank',],]),
    ];
    $form['site_policy_agreement']['policy_agreement'] = [
        '#type' => 'checkbox',
        '#title' => t('I understand and agree'),
        '#required' => TRUE,
    ];
  }
}

/**
 * Returns answer node title.
 * Handles three cases: references task exists and task not removed,
 * task removed but own title is not empty, task removed and own
 * title is empty (returns default fallback text).
 *
 * @param $node
 *   Node for ed_task object
 *
 * @return
 *   Task title string
 */
function ed_get_answer_title($node, $teaser = FALSE)
{
  $task_title = NULL;

  if (isset($node->field_ref_to_task[LANGUAGE_NONE][0]['entity'])) {
    $task_title = $node->field_ref_to_task[LANGUAGE_NONE][0]['entity']->title;
  } else if (isset($node->field_ref_to_task[LANGUAGE_NONE][0]['target_id']) && $single_task = node_load($node->field_ref_to_task[LANGUAGE_NONE][0]['target_id'])) {
    $task_title = $single_task->title;
  }

  if (isset($task_title)) {
    if (!$teaser) {
      return t('!task-title - Answer', array(
          '!task-title' => $task_title,
      ));
    } else {
      return t('!task-title', array(
          '!task-title' => $task_title,
      ));
    }
  }

  return t('Answer with task removed');
}

function ed_rows_table_render($nodes)
{
  $rows = array();
  foreach ($nodes as $node) {
    if ($node->type == 'ed_blog') {
      $rows[] = array(
          'data' => array(
              'type' => _get_type($node),
              'post_name' => l($node->title, 'node/' . $node->nid),
              'created' => format_date($node->created, 'short'),
          ),
      );
    } else {
      if (!empty($node->field_ref_to_task['und']['0']['target_id'])) {
        $dueDateText = "";
        $dueDateTS = _ed_get_due_date($node->field_ref_to_task['und']['0']['target_id']);
        if (!empty($dueDateTS)) {
          $dueDateText = " (" . t('Due Date: ') . format_date($dueDateTS[0], 'short') . ") ";
        }
      }

      if (isset($dueDateText)) {
        $rows[] = array(
            'data' => array(
                'type' => edidaktikum_get_node_type_name($node->type),
                'post_name' => l(edidaktikum_get_node_title($node), 'node/' . $node->nid) . $dueDateText,
                'created' => format_date($node->created, 'short'),
            ),
        );
      } else {
        $rows[] = array(
            'data' => array(
                'type' => edidaktikum_get_node_type_name($node->type),
                'post_name' => l(edidaktikum_get_node_title($node), 'node/' . $node->nid),
                'created' => format_date($node->created, 'short'),
            ),
        );
      }

    }
  }
  return $rows;
}


/**
 * Return an array of curriculums (study groups) for TLU
 */
function ed_get_curriculums_for_tlu()
{
  return _ed_cluster_universities_with_curriculums_structure()[19]['curriculums'];
}


/**
 * Remove ed_portfolio from search results
 * @param QueryAlterableInterface $query
 * @return void
 */
function edidaktikum_query_alter(QueryAlterableInterface $query) {
  if (!$query->hasTag('custom_search_ignore') && $query->hasTag('node_access') && $query->hasTag('pager')) {

      $tables = $query->getTables();
      foreach ($tables as $table) {
        if ($table['table'] == 'search_index') {
          $query->condition('n.type', ['ed_portfolio'], 'NOT IN');
        }
      }

  }
}
