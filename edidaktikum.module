<?php

/**
 * @file
 * eDidaktikum module.
 */

/**
 * Implements hook_init().
 */
function edidaktikum_init() {
  $uservoice_api_key = variable_get('ed_uservoice_api_key');
  if (!empty($uservoice_api_key)) {
    global $language;
    drupal_add_js(array(
      'edidaktikum' => array(
        'ed_uservoice_api_key' => $uservoice_api_key,
        'locale' => $language->language,
      ),
    ), 'setting');
    if (user_is_logged_in()) {
      $acc = $GLOBALS['user'];
      drupal_add_js(array(
        'edidaktikum' => array(
          'authenticated' => true,
          'email' => $acc->mail,
          'name' => edidaktikum_get_full_name_for_user_account($acc),
          'created_at' => $acc->created,
          'id' => $acc->uid,
        ),
      ), 'setting');
    }
  }
}

/**
 * Implements hook_menu().
 */
function edidaktikum_menu() {
  $items['admin/config/edidaktikum'] = array(
    'title' => 'eDidaktikum',
    'description' => 'Administer eDidaktikum modules.',
    'position' => 'right',
    'weight' => -10,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/edidaktikum/home-page'] = array(
    'title' => 'eDidaktikum home page',
    'description' => 'Configure eDidaktikum home page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edidaktikum_home_page_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'edidaktikum.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
  );
  $items['admin/config/edidaktikum/contact-page'] = array(
    'title' => 'eDidaktikum contact page',
    'description' => 'Configure edidaktikum contact page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edidaktikum_contact_page_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'edidaktikum.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 1,
  );
  $items['admin/config/edidaktikum/faq-page'] = array(
    'title' => 'eDidaktikum FAQ page',
    'description' => 'Configure edidaktikum FAQ page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edidaktikum_faq_page_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'edidaktikum.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 2,
  );

  $items['admin/config/edidaktikum/promoted-news'] = array(
    'title' => 'eDidaktikum Promoted News',
    'description' => 'Choose front page News',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edidaktikum_promoted_news_page_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'edidaktikum.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 3,
  );
  $items['admin/config/edidaktikum/promoted-events'] = array(
    'title' => 'eDidaktikum Promoted Events',
    'description' => 'Choose front page Event',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edidaktikum_promoted_events_page_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'edidaktikum.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 4,
  );
  $items['admin/config/edidaktikum/promoted-resources'] = array(
    'title' => 'eDidaktikum Promoted Resources',
    'description' => 'Choose front page Learning Resource',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edidaktikum_promoted_resources_page_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'edidaktikum.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 5,
  );
  $items['admin/config/edidaktikum/statistics'] = array(
    'title' => 'eDidaktikum Statistics',
    'description' => 'Statistics about the eDidaktikum web page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edidaktikum_statistics_page_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'edidaktikum.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 6,
  );
  $items['admin/config/edidaktikum/configuration'] = array(
    'title' => t('eDidaktikum Configuration'),
    'description' => t('Configuration settings for eDidatkikum'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edidaktikum_configuration_page_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'edidaktikum.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 7,
  );
  $items['home'] = array(
    'title' => 'Home',
    'page callback' => 'edidaktikum_home_page',
    'access callback' => TRUE,
    'file' => 'edidaktikum.pages.inc',
    'weight' => 0,
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['contact'] = array(
    'title' => 'Contact',
    'page callback' => 'edidaktikum_contact_page',
    'access callback' => TRUE,
    'file' => 'edidaktikum.pages.inc',
    'weight' => 25,
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['faq'] = array(
    'title' => 'FAQ',
    'page callback' => 'edidaktikum_faq_page',
    'access callback' => TRUE,
    'file' => 'edidaktikum.pages.inc',
    'weight' => -25,
    'menu_name' => 'user-menu',
  );

  return $items;
}

/**
 * Custom callback for user label.
 * Uses fullname if available.
 * Defaults to format_username.
 */
function edidaktikum_user_label_callback($account) {
  $fullnames = field_get_items('user', $account, 'ed_field_full_name');
  if (isset($fullnames[0]['value'])) {
    return $fullnames[0]['value'];
  }
  return format_username($account);
}

/**
 * Tries to return user full_name for an account if possible.
 * In case there is not full_name set formatted username is returned.
 */
function edidaktikum_get_full_name_for_user_account(&$account) {
  if (isset($account->ed_field_full_name['und'][0]['safe_value'])) {
    return $account->ed_field_full_name['und'][0]['safe_value'];
  }
  return format_username($account);
}

function edidaktikum_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['featured'] = array(
    'label' => t('Featured'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['front'] = array(
    'label' => t('Front'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['dashboard'] = array(
    'label' => t('Dashboard'),
    'custom settings' => TRUE,
  );
  if (isset($entity_info['user'])) {
    $entity_info['user']['label callback'] = 'edidaktikum_user_label_callback';
  }
}

function edidaktikum_preprocess_node(&$vars) {
  if ($vars['view_mode'] == 'featured') {
    $vars['featured'] = TRUE;
    $vars['theme_hook_suggestions'][] = 'node__featured';
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__featured';
  }
  if ($vars['view_mode'] == 'front') {
    $vars['front'] = TRUE;
    $vars['theme_hook_suggestions'][] = 'node__front';
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__front';
  }
  if ($vars['view_mode'] == 'dashboard') {
    $vars['dashboard'] = TRUE;
    $vars['theme_hook_suggestions'][] = 'node__dashboard';
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__dashboard';
  }
  if ('teaser' === $vars['view_mode'] && $vars['type'] !== 'ed_portfolio') {
    if (TRUE === $vars['logged_in'] && $vars['uid'] === $vars['user']->uid) {
      $vars['classes_array'][] = 'ed-node-mine';
    }
  }
}

function ed_get_paging_nr(){
  return variable_get('ed_paging');
}

/**
 * Implements hook_form_alter().
 */
function edidaktikum_form_alter(&$form, $form_state, $form_id) {
  // Student can only set Group content visibility to private
  // Remove any other options from the node edit form
  if (!empty($form['#node_edit_form']) && isset($form['group_content_access'])) {
    $account = $GLOBALS['user'];
    if (!(in_array('teacher', $account->roles) || in_array('administrator', $account->roles))) {
      unset($form['group_content_access']['und']['#options'][0]);
      unset($form['group_content_access']['und']['#options'][1]);
    }
  }

  $form['#attached']['js'] = array(drupal_get_path('module', 'edidaktikum') . '/edidaktikum.js',);
  $form['#attached']['css'] = array(drupal_get_path('module', 'edidaktikum') . '/edidaktikum.css',);

  // Alter node delete form and add own redirect handler logic
  if ('node_delete_confirm' == $form_id) {
    $form['actions']['submit']['#submit'][] = 'node_delete_confirm_submit';
    $form['actions']['submit']['#submit'][] = '_edidaktikum_node_delete_redirect';
  }
}

/*
 * Implements hook_attach_submit().
 */

function edidaktikum_field_attach_submit($entity_type, $entity, $form, &$form_state){
  if(isset($entity->ed_field_category) && $entity->ed_field_category){
    $parentArray = array();
    $parents = array(); 
    foreach($entity->ed_field_category[LANGUAGE_NONE] as $ta){    
      _check_for_parents($ta['tid'], $parentArray);
    }
    if (is_array($parentArray) && sizeof($parentArray) > 0) {
      foreach ($parentArray as $stid) {
        if(!in_array(array('tid' => $stid), $entity->ed_field_category[LANGUAGE_NONE])){
          array_push($entity->ed_field_category[LANGUAGE_NONE], array('tid' => $stid));
        }        
      }
    }
  }
}

function _check_for_parents($tid, &$parentArray){
  $parent = taxonomy_get_parents($tid);
  if(!empty($parent)) {
    $parent = reset($parent);    
    array_push($parentArray, $parent->tid);
    _check_for_parents($parent->tid, $parentArray);
  }
}

/**
 * Returns identifiers for promoted node of type ptovided or false.
 * @param $node_type
 *   Node type to check promoted for
 */
function ed_get_promoted_by_node_type($node_type) {
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'))
    ->addTag('node_access')
    ->condition('n.type', $node_type)
    ->condition('n.status', 1)
    ->condition('n.promote', 1)
    ->orderBy('n.created', 'DESC');
  $nids = $query->execute()->fetchCol();
  if( !empty($nids) ) {
    return $nids;
  }
  return FALSE;
}

/**
 * Implements hook_user_login().
 */
function edidaktikum_user_login(&$edit, $account) {
  // Redirect to dashboard in case of user login
  if (isset($edit['values']['form_id']) && 'user_login' == $edit['values']['form_id']) {
    $edit['redirect'] = 'dashboard';
  }
}

/**
 * Implements hook_user_view_alter().
 */
function edidaktikum_user_view_alter(&$build) {
  if ('full' == $build['#view_mode']) {
    if (isset($build['og_user_node']) && is_array($build['og_user_node']) && !empty($build['og_user_node']) && !empty($build['og_user_node']['#items'])) {
      // Checks if last element of the array is just a #markup
      // and removes if that is true
      $last = end($build['og_user_node']);
      reset($build['og_user_node']);
      if (isset($last['#markup'])) {
        array_pop($build['og_user_node']);
      }
      unset($last);
    }
    if (isset($build['summary'])) {
      $build['summary']['#title'] = '';
    }
    if (isset($build['hybridauth_identities'])) {
      unset($build['hybridauth_identities']);
    }
  }
}

/**
 * Set redirect location on delete of own node types.
 */
function _edidaktikum_node_delete_redirect($form, &$form_state) {
  // Check if group set and grab first group URL
  if (!empty($form['#node']->og_group_ref[LANGUAGE_NONE])) {
    $group_url = url('node/' . $form['#node']->og_group_ref[LANGUAGE_NONE][0]['target_id'], array('absolute' => TRUE));
  }

  // Set $redirect_url if possible
  switch($form['#node']->type) {
      case 'ed_answer':
        $redirect_url = 'dashboard/tasks';
        break;
      case 'ed_blog':
        if (!empty($group_url)) {
          $redirect_url = $group_url . '/blog';
        } else {
          $redirect_url = 'dashboard/blogs';
        }
        break;
      case 'ed_bookmark':
        if (!empty($group_url)) {
          $redirect_url = $group_url . '/bookmark';
        }
        break;
      case 'ed_forum':
        if (!empty($group_url)) {
          $redirect_url = $group_url . '/forum';
        }
        break;
      case 'ed_event':
        if (!empty($group_url)) {
          $redirect_url = $group_url . '/event';
        } else {
          $redirect_url = 'events';
        }
        break;
      case 'ed_file_folder':
        $redirect_url = 'dashboard/files';
        break;
      case 'ed_file':
        $redirect_url = 'dashboard/files';
        break;
      case 'ed_cluster':
        $redirect_url = 'clusters';
        break;
      case 'ed_learning_resource':
        if (!empty($group_url)) {
          $redirect_url = $group_url . '/learning-resource';
        } else {
          $redirect_url = 'resources';
        }
        break;
      case 'ed_news':
        if (!empty($group_url)) {
          $redirect_url = $group_url . '/news';
        } else {
          $redirect_url = 'news';
        }
        break;
      case 'ed_page':
        if (!empty($group_url)) {
          $redirect_url = $group_url . '/page';
        }
        break;
      case 'ed_portfolio':
        $redirect_url = 'dashboard/portfolio';
        break;
      case 'ed_task':
        if (!empty($group_url)) {
          $redirect_url = $group_url . '/task-manager';
        } else {
          $redirect_url = 'dashboard/tasks';
        }
        break;
  }
  
  // Force redirect if $redirect_url not empty
  if (!empty($redirect_url)) {
    $form_state['redirect'] = $redirect_url;
  }
}

