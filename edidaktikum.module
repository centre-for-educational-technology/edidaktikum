<?php

/**
 * @file
 * eDidaktikum module.
 */

/**
 * Implements hook_init().
 */
function edidaktikum_init() {
  $uservoice_api_key = variable_get('ed_uservoice_api_key');
  if (!empty($uservoice_api_key)) {
    global $language;
    drupal_add_js(array(
      'edidaktikum' => array(
        'ed_uservoice_api_key' => $uservoice_api_key,
        'locale' => $language->language,
      ),
    ), 'setting');
    if (user_is_logged_in()) {
      $acc = $GLOBALS['user'];
      drupal_add_js(array(
        'edidaktikum' => array(
          'authenticated' => true,
          'email' => $acc->mail,
          'name' => edidaktikum_get_full_name_for_user_account($acc),
          'created_at' => $acc->created,
          'id' => $acc->uid,
        ),
      ), 'setting');
    }
  }
  if(isset($_COOKIE['Drupal_visitor_edidaktikum_logoff'])){
    if($_COOKIE['Drupal_visitor_edidaktikum_logoff'] == 1){
      drupal_set_message(t('Goodbye! You are now logged out from eDidaktikum'));
      user_cookie_save(array('edidaktikum.logoff' => '0'));
    }
  }
}

/**
 * Implements hook_menu().
 */
function edidaktikum_menu() {
  $items['admin/config/edidaktikum'] = array(
    'title' => 'eDidaktikum',
    'description' => 'Administer eDidaktikum modules.',
    'position' => 'right',
    'weight' => -10,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/edidaktikum/home-page'] = array(
    'title' => 'eDidaktikum home page',
    'description' => 'Configure eDidaktikum home page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edidaktikum_home_page_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'edidaktikum.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
  );
  $items['admin/config/edidaktikum/contact-page'] = array(
    'title' => 'eDidaktikum contact page',
    'description' => 'Configure edidaktikum contact page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edidaktikum_contact_page_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'edidaktikum.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 1,
  );
  $items['admin/config/edidaktikum/faq-page'] = array(
    'title' => 'eDidaktikum FAQ page',
    'description' => 'Configure edidaktikum FAQ page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edidaktikum_faq_page_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'edidaktikum.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 2,
  );

  $items['admin/config/edidaktikum/promoted-news'] = array(
    'title' => 'eDidaktikum Promoted News',
    'description' => 'Choose front page News',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edidaktikum_promoted_news_page_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'edidaktikum.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 3,
  );
  $items['admin/config/edidaktikum/promoted-events'] = array(
    'title' => 'eDidaktikum Promoted Events',
    'description' => 'Choose front page Event',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edidaktikum_promoted_events_page_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'edidaktikum.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 4,
  );
  $items['admin/config/edidaktikum/promoted-resources'] = array(
    'title' => 'eDidaktikum Promoted Resources',
    'description' => 'Choose front page Learning Resource',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edidaktikum_promoted_resources_page_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'edidaktikum.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 5,
  );
  $items['admin/config/edidaktikum/statistics'] = array(
    'title' => 'eDidaktikum Statistics',
    'description' => 'Statistics about the eDidaktikum web page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edidaktikum_statistics_page_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'edidaktikum.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 6,
  );
  $items['admin/config/edidaktikum/configuration'] = array(
    'title' => t('eDidaktikum Configuration'),
    'description' => t('Configuration settings for eDidatkikum'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edidaktikum_configuration_page_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'edidaktikum.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 7,
  );
  $items['home'] = array(
    'title' => 'Home',
    'page callback' => 'edidaktikum_home_page',
    'access callback' => TRUE,
    'file' => 'edidaktikum.pages.inc',
    'weight' => 0,
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['contact'] = array(
    'title' => 'Contact',
    'page callback' => 'edidaktikum_contact_page',
    'access callback' => TRUE,
    'file' => 'edidaktikum.pages.inc',
    'weight' => 25,
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['faq'] = array(
    'title' => 'FAQ',
    'page callback' => 'edidaktikum_faq_page',
    'access callback' => TRUE,
    'file' => 'edidaktikum.pages.inc',
    'weight' => -25,
    'menu_name' => 'user-menu',
  );
  $items['node/%/edidaktikum/action/like'] = array(
    'page callback' => 'edidaktikum_node_like',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_is_logged_in',
  );

  return $items;
}

/**
 * Custom callback for user label.
 * Uses fullname if available.
 * Defaults to format_username.
 */
function edidaktikum_user_label_callback($account) {
  $fullnames = field_get_items('user', $account, 'ed_field_full_name');
  if (isset($fullnames[0]['value'])) {
    return $fullnames[0]['value'];
  }
  return format_username($account);
}

/**
 * Tries to return user full_name for an account if possible.
 * In case there is not full_name set formatted username is returned.
 */
function edidaktikum_get_full_name_for_user_account(&$account) {
  if (isset($account->ed_field_full_name['und'][0]['safe_value'])) {
    return $account->ed_field_full_name['und'][0]['safe_value'];
  }
  return format_username($account);
}

function edidaktikum_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['featured'] = array(
    'label' => t('Featured'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['front'] = array(
    'label' => t('Front'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['dashboard'] = array(
    'label' => t('Dashboard'),
    'custom settings' => TRUE,
  );
  if (isset($entity_info['user'])) {
    $entity_info['user']['label callback'] = 'edidaktikum_user_label_callback';
  }
}

/**
 * Implements hook_preprocess_node().
 */
function edidaktikum_preprocess_node(&$vars) {
  if ($vars['view_mode'] == 'featured') {
    $vars['featured'] = TRUE;
    $vars['theme_hook_suggestions'][] = 'node__featured';
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__featured';
    $vars['user_picture'] = '';
  }
  if ($vars['view_mode'] == 'front') {
    $vars['front'] = TRUE;
    $vars['theme_hook_suggestions'][] = 'node__front';
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__front';
    $vars['user_picture'] = '';
  }
  if ($vars['view_mode'] == 'dashboard') {
    $vars['dashboard'] = TRUE;
    $vars['theme_hook_suggestions'][] = 'node__dashboard';
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__dashboard';
  }
  if ('teaser' === $vars['view_mode'] && $vars['type'] !== 'ed_portfolio') {
    if (TRUE === $vars['logged_in'] && $vars['uid'] === $vars['user']->uid) {
      $vars['classes_array'][] = 'ed-node-mine';
    }
  }
  if (in_array($vars['view_mode'], array('teaser'))) {
    $vars['user_picture'] = '';
  }
}

function ed_get_paging_nr(){
  return variable_get('ed_paging');
}

function ed_get_grid_paging_nr(){
  return variable_get('ed_grid_paging');
}

function _ed_get_sorting_options($form_state){
  $form = array();
  $form['select'] = array(
    '#type' => 'select',
    '#options' => drupal_map_assoc(array(t('Latest First'), t('Earliest First'), t('Title (A-Z)'))),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Sort'),    
  );
  return $form;
}


function _ed_get_sorting_options_submit($form, &$form_state) {
  
  $sortorder = $form_state['values']['select'];
  switch($sortorder){
    case t('Latest First'):
      $sortordermn = 'DESC';
    break;
    case t('Earliest First'):
      $sortordermn = 'ASC';
    break;
    case t('Title (A-Z)'):
      $sortordermn = 'title';
    break;
  }
  drupal_goto(current_path(),array('query' => array('order' => $sortordermn)));
}

/**
 * Determine ordering for sql query and modify sorting form.
 * @param array $content A drupal Form API array of the page content.
 * @return string Ordering type.
 */
function ed_get_sorting_type(&$content){
  $sql_order = 'DESC';
  if(isset($_GET['order'])){
    $order = $_GET['order'];
    switch($order){
      case 'ASC':
        $content['sorting']['select']['#value'] = t('Earliest First');
        $sql_order = 'ASC';
      break;
      case 'title':
        $content['sorting']['select']['#value'] = t('Title (A-Z)');
        $sql_order = 'title';
      break;
      case 'DESC':
      default:
        $content['sorting']['select']['#value'] = t('Latest First');
        $sql_order = 'DESC';
      break;
    }
  }
  return $sql_order;
}



/**
 * Implements hook_form_alter().
 */
function edidaktikum_form_alter(&$form, $form_state, $form_id) {
  // Student can only set Group content visibility to private
  // Remove any other options from the node edit form
  if (!empty($form['#node_edit_form']) && isset($form['group_content_access'])) {
    $account = $GLOBALS['user'];
    if (!(in_array('teacher', $account->roles) || in_array('administrator', $account->roles))) {
      unset($form['group_content_access']['und']['#options'][0]);
      unset($form['group_content_access']['und']['#options'][1]);
    }
  }

  // Allow any to set node published or not
  if (!empty($form['#node_edit_form'])) {
    $account = $GLOBALS['user'];
    if (!in_array('administrator', $account->roles)) {
      $form['options']['#access'] = TRUE;
      $form['options']['promote']['#access'] = FALSE;
      $form['options']['sticky']['#access'] = FALSE;
    }
  }

  $form['#attached']['js'] = array(drupal_get_path('module', 'edidaktikum') . '/edidaktikum.js',);
  $form['#attached']['css'] = array(drupal_get_path('module', 'edidaktikum') . '/edidaktikum.css',);

  // Alter node delete form and add own redirect handler logic
  if ('node_delete_confirm' == $form_id) {
    $form['actions']['submit']['#submit'][] = 'node_delete_confirm_submit';
    $form['actions']['submit']['#submit'][] = '_edidaktikum_node_delete_redirect';
  }
}

/*
 * Implements hook_attach_submit().
 */

function edidaktikum_field_attach_submit($entity_type, $entity, $form, &$form_state){
  if(isset($entity->ed_field_category) && $entity->ed_field_category){
    $parentArray = array();
    $parents = array(); 
    foreach($entity->ed_field_category[LANGUAGE_NONE] as $ta){    
      _check_for_parents($ta['tid'], $parentArray);
    }
    if (is_array($parentArray) && sizeof($parentArray) > 0) {
      foreach ($parentArray as $stid) {
        if(!in_array(array('tid' => $stid), $entity->ed_field_category[LANGUAGE_NONE])){
          array_push($entity->ed_field_category[LANGUAGE_NONE], array('tid' => $stid));
        }        
      }
    }
  }
}

function _check_for_parents($tid, &$parentArray){
  $parent = taxonomy_get_parents($tid);
  if(!empty($parent)) {
    $parent = reset($parent);    
    array_push($parentArray, $parent->tid);
    _check_for_parents($parent->tid, $parentArray);
  }
}

/**
 * Returns identifiers for promoted node of type ptovided or false.
 * @param $node_type
 *   Node type to check promoted for
 */
function ed_get_promoted_by_node_type($node_type) {
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'))
    ->addTag('node_access')
    ->condition('n.type', $node_type)
    ->condition('n.status', 1)
    ->condition('n.promote', 1)
    ->orderBy('n.created', 'DESC');
  $nids = $query->execute()->fetchCol();
  if( !empty($nids) ) {
    return $nids;
  }
  return FALSE;
}

/**
 * Implements hook_user_login().
 */
function edidaktikum_user_login(&$edit, $account) {
  // Redirect to dashboard in case of user login
  if (isset($edit['values']['form_id']) && 'user_login' == $edit['values']['form_id']) {
    $edit['redirect'] = 'dashboard';
  }
}

/**
 * Implements hook_user_view_alter().
 */
function edidaktikum_user_view_alter(&$build) {
  if ('full' == $build['#view_mode']) {
    if (isset($build['og_user_node']) && is_array($build['og_user_node']) && !empty($build['og_user_node']) && !empty($build['og_user_node']['#items'])) {
      // Checks if last element of the array is just a #markup
      // and removes if that is true
      $last = end($build['og_user_node']);
      reset($build['og_user_node']);
      if (isset($last['#markup'])) {
        array_pop($build['og_user_node']);
      }
      unset($last);
    }
    if (isset($build['summary'])) {
      $build['summary']['#title'] = '';
    }
    if (isset($build['hybridauth_identities'])) {
      unset($build['hybridauth_identities']);
    }
  }
}

/**
 * Set redirect location on delete of own node types.
 */
function _edidaktikum_node_delete_redirect($form, &$form_state) {
  // Check if group set and grab first group URL
  if (!empty($form['#node']->og_group_ref[LANGUAGE_NONE])) {
    $group_url = url('node/' . $form['#node']->og_group_ref[LANGUAGE_NONE][0]['target_id'], array('absolute' => TRUE));
  }

  // Set $redirect_url if possible
  switch($form['#node']->type) {
      case 'ed_answer':
        $redirect_url = 'dashboard/tasks';
        break;
      case 'ed_blog':
        if (!empty($group_url)) {
          $redirect_url = $group_url . '/blog';
        } else {
          $redirect_url = 'dashboard/blogs';
        }
        break;
      case 'ed_bookmark':
        if (!empty($group_url)) {
          $redirect_url = $group_url . '/bookmark';
        }
        break;
      case 'ed_forum':
        if (!empty($group_url)) {
          $redirect_url = $group_url . '/forum';
        }
        break;
      case 'ed_event':
        if (!empty($group_url)) {
          $redirect_url = $group_url . '/event';
        } else {
          $redirect_url = 'events';
        }
        break;
      case 'ed_file_folder':
        $redirect_url = 'dashboard/files';
        break;
      case 'ed_file':
        $redirect_url = 'dashboard/files';
        break;
      case 'ed_cluster':
        $redirect_url = 'clusters';
        break;
      case 'ed_learning_resource':
        if (!empty($group_url)) {
          $redirect_url = $group_url . '/learning-resource';
        } else {
          $redirect_url = 'resources';
        }
        break;
      case 'ed_news':
        if (!empty($group_url)) {
          $redirect_url = $group_url . '/news';
        } else {
          $redirect_url = 'news';
        }
        break;
      case 'ed_page':
        if (!empty($group_url)) {
          $redirect_url = $group_url . '/page';
        }
        break;
      case 'ed_portfolio':
        $redirect_url = 'dashboard/portfolio';
        break;
      case 'ed_task':
        if (!empty($group_url)) {
          $redirect_url = $group_url . '/task-manager';
        } else {
          $redirect_url = 'dashboard/tasks';
        }
        break;
  }
  
  // Force redirect if $redirect_url not empty
  if (!empty($redirect_url)) {
    $form_state['redirect'] = $redirect_url;
  }
}

/**
 * Implements hook_username_alter().
 */
function edidaktikum_username_alter(&$name, $account) {
  // Don't alter anonymous users or objects that do not have any user ID.
  if (empty($account->uid)) {
      return;
  }

  $account2 = user_load($account->uid);
  if (!empty($account2->ed_field_full_name['und'][0]['safe_value'])) {
    $name = $account2->ed_field_full_name['und'][0]['safe_value'];
  }
}

/**
 * Returns translated node type name by node type.
 * If type is not known a general name content will be used instead.
 *
 * @param string  $node_type  Node type (machine name)
 * @param boolean $capitalize Capitalize words or not
 *
 * @return string
 */
function edidaktikum_get_node_type_name($node_type, $capitalize = FALSE) {
  $node_type_name = t('content');
  switch ($node_type) {
  case "ed_blog":
    $node_type_name = t('blog post');
    break;
  case "ed_bookmark":
    $node_type_name = t('bookmark');
    break;
  case "ed_event":
    $node_type_name = t('event');
    break;
  case "ed_news":
    $node_type_name = t('news');
    break;
  case "ed_learning_resource":
    $node_type_name = t('learning resource');
    break;
  case "ed_page":
    $node_type_name = t('page');
    break;
  case "ed_forum":
    $node_type_name = t('discussion');
    break;
  case "ed_file":
    $node_type_name = t('file');
    break;
  case "ed_portfolio":
    $node_type_name = t('portfolio');
    break;
  case "ed_task":
    $node_type_name = t('task');
    break;
  case "ed_answer":
    $node_type_name = t('answer');
    break;
  }

  if ($capitalize) {
    $node_type_name = ucwords($node_type_name);
  }

  return $node_type_name;
}

/**
 * Returns node title. Handles special case of ed_answer node type
 * that does not have a title of its own.
 *
 * @param object $node A node object passed by reference.
 *
 * @return string
 */
function edidaktikum_get_node_title(&$node) {
  if ('ed_aswer' == $node->type) {
    return ed_answer_get_answer_title($node);
  }

  return $node->title;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function edidaktikum_ctools_plugin_directory($module, $plugin) {
  if(('content_types' == $plugin && 'ctools' == $module)) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Ajax endpoint for add/remove node like.
 */
function edidaktikum_node_like($nid) {
  $account = $GLOBALS['user'];
  $response = array(
    'success' => FALSE,
  );

  $count = db_select('ed_node_like', 'enl')
    ->fields('enl', array('nid'))
    ->condition('enl.nid', $nid)
    ->condition('enl.uid', $account->uid)
    ->countQuery()
    ->execute()->fetchField();

  if (!$count) {
    db_insert('ed_node_like')
      ->fields(array(
        'nid' => $nid,
        'uid' => $account->uid,
        'timestamp' => REQUEST_TIME,
      ))
      ->execute();

    $response['success'] = TRUE;
  } else {
    $deleted = db_delete('ed_node_like')
      ->condition('nid', $nid)
      ->condition('uid', $account->uid)
      ->execute();

    if ($deleted) {
      $response['success'] = TRUE;
    }
  }

  if ($response['success']) {
    $likes = db_select('ed_node_like', 'enl')
      ->fields('enl', array('uid'))
      ->condition('enl.nid', $nid)
      ->countQuery()->execute()->fetchField();
    $response['count'] = $likes;
  }

  drupal_json_output($response);
}

/**
 * Determines if current case is a special comment delete one and
 * the user is allowed to delete a comment.
 * The logic is everyone is allowed to delete own comments and a
 * teacher role user is allowed to delte comments by students (any
 * user having no special roles).
 *
 * @param Object $comment Comment object
 * @return boolean
 */
function _edidaktikum_can_special_delete_comment(&$comment) {
  if (!user_is_logged_in()) {
    return FALSE;
  }
  $account = $GLOBALS['user'];

  if ($account->uid === $comment->uid) {
    // Show delete link to owner
    return TRUE;
  } else if (in_array('teacher', $account->roles)) {
    $owner = user_load($comment->uid);
    // Show delete link to teacher if creator is a student
    if (!(in_array('teacher', $owner->roles) || in_array('administrator', $owner->roles))) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Implements hook_comment_view_alter().
 */
function edidaktikum_comment_view_alter(&$build) {
  if (!user_is_logged_in()) {
    return;
  }

  if (isset($build['links']['comment']['#links']['comment-delete'])) {
    return;
  }

  $comment = $build['#comment'];

  if (_edidaktikum_can_special_delete_comment($comment)) {
    $build['links']['comment']['#links']['comment-delete'] = array(
      'title' => t('delete'),
      'href' => "comment/$comment->cid/delete",
      'html' => TRUE,
    );
  }
}

/**
 * Implements hook_user_logout().
 */
function edidaktikum_user_logout($account){
  user_cookie_save(array('edidaktikum.logoff' => '1'));
}

/**
 * Determines if comment can be removed.
 * Used as an access check.
 * @param int $cid Comment id
 * @return boolean
 */
function edidaktikum_comment_delete_access($cid) {
  if (user_access('administer comments')) {
    return TRUE;
  }

  if (!user_is_logged_in()) {
    return FALSE;
  }

  $comment = comment_load($cid);

  return _edidaktikum_can_special_delete_comment($comment);
}

/**
 * Implements hook_menu_alter().
 */
function edidaktikum_menu_alter(&$items) {
  if (user_is_logged_in()) {
    $items['comment/%/delete']['access callback'] = 'edidaktikum_comment_delete_access';
    $items['comment/%/delete']['access arguments'] = array(1);
  }
}

function ed_get_likes($nid){
  $likescount = db_select('ed_node_like', 'enl')
      ->fields('enl', array('uid'))
      ->condition('enl.nid', $nid)
      ->countQuery()->execute()->fetchField();
  
  return $likescount;
}

function ed_get_views($nid){
  $viewscount = db_select('node_counter', 'nc')
    ->fields('nc', array('totalcount'))
    ->condition('nid', $nid)
    ->countQuery()->execute()->fetchField();
      
  return $viewscount;
}

