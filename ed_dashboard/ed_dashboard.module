<?php

/**
 * @file
 * eDidaktikum dashboard module.
 */

/**
 * Implements hook_menu().
 */
function ed_dashboard_menu() {
  $items['dashboard'] = array(
    'title' => 'Dashboard',
    'page callback' => 'ed_dashboard_page',
    'access callback' => 'user_is_logged_in',
    'weight' => -5,
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  //Duplicates the same Dashboard item in $primary_nav
//  $items['dashboard/home'] = array(
//    'title' => 'Dashboard',
//    'page callback' => 'ed_dashboard_page',
//    'access callback' => 'user_is_logged_in',
//    'weight' => 0,
//    'menu_name' => 'ed-dashboard-menu',
//    'type' => MENU_NORMAL_ITEM,
//  );
  $items['dashboard/drafts'] = array(
    'title' => 'Drafts',
    'page callback' => 'ed_dashboard_drafts_page',
    'access callback' => 'user_is_logged_in',
    'weight' => 30,
    'menu_name' => 'ed-dashboard-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['dashboard/discover'] = array(
    'title' => 'Discover',
    'page callback' => 'drupal_get_form',
    'access callback' => 'user_is_logged_in',
    'page arguments' => array('ed_dashboard_discover_page', 2),
    'weight' => 40,
    'menu_name' => 'ed-dashboard-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['dashboard/search/delete/%'] = array(
    'page callback' => 'ed_dashboard_delete_search',
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_is_logged_in',
  );
	$items['dashboard/student'] = array(
			'page callback' => 'ed_dashboard_get_student_dashboard',
			'type' => MENU_CALLBACK,
			'access callback' => 'user_is_logged_in',
	);
	$items['dashboard/student/rating'] = array(
			'page callback' => 'ed_dashboard_get_task_rating',
			'type' => MENU_CALLBACK,
			'access callback' => 'user_is_logged_in',
	);

  return $items;
}

/**
 * Dashboard page.
 */
function ed_dashboard_page() {
  menu_tree_set_path('main-menu', 'dashboard');

  $content = array();

	drupal_add_css(drupal_get_path('module', 'ed_dashboard').'/css/bootstrap-table.min.css');
	drupal_add_js(drupal_get_path('module', 'ed_dashboard') . '/js/bootstrap-table.min.js', 'file');
	drupal_add_js(drupal_get_path('module', 'ed_dashboard') . '/js/snap.svg-min.js', 'file');


	drupal_add_js(drupal_get_path('module', 'ed_dashboard') . '/js/ed_dashboard_student.js');

//  $group_nids = _ed_dashboard_get_current_user_groups();
//  if (!empty($group_nids)) {
//    $groups = node_load_multiple($group_nids);
//  }
//
//  if (!empty($groups)) {
//    $content['groups-listing'] = node_view_multiple($groups, 'dashboard');
//
//
//    foreach ($content['groups-listing']['nodes'] as $node){
//      if (isset($node['#node']->picture)) {
//        //Hide user picture
//        $node['#node']->picture = ['#printed' => false];
//      }
//    }
//    $content['groups-listing']['pager'] = array(
//      '#theme' => 'pager',
//      '#weight' => 5,
//    );
//
//  } else {
//    $content['groups-not-found'] = array(
//      '#type' => 'markup',
//      '#prefix' => '<div class="ed-message ed-message-notice">',
//      '#markup' => t('Hi! Nothing to show here at the moment. Join some group to see latest updates from it.'),
//      '#suffix' => '</div>',
//    );
//  }



	$group_nids = _ed_dashboard_get_current_user_groups();
	if (!empty($group_nids)) {

		$check_groups = ed_get_groups_by_user_no_subgroups();

		if(!empty($check_groups)){

			$this_semester_months = _ed_get_months_of_current_semester();
			$this_semester_months_markup = '';
			foreach ($this_semester_months as $key=>$value){
				$this_semester_months_markup.='<th data-field="'.$key.'">'.$value.'</th>';
			}

			$content['student_dashboard']['charts']['done'] = array(
					'#type' => 'markup',
					'#markup' => '<div class="col-md-4"><h4 class="text-center">'.t("Submitted tasks").'</h4><svg id="animated-chart-done" class="animated-chart" viewbox="0 0 100 100">
			  <circle cx="50" cy="50" r="45"/>
			  <path id="progress-done" stroke-linecap="round" stroke-width="5" stroke="#fff" fill="none"
			        d="M50 10
			           a 40 40 0 0 1 0 80
			           a 40 40 0 0 1 0 -80">
			  </path>
			  <text id="count-done" x="50" y="50" text-anchor="middle" dy="7" font-size="20">0%</text>
			</svg></div>',
			);

			$content['student_dashboard']['charts']['success'] = array(
					'#type' => 'markup',
					'#markup' => '<div class="col-md-4"><h4 class="text-center">'.t("Accepted tasks").'</h4><svg id="animated-chart-success" class="animated-chart" viewbox="0 0 100 100">
			  <circle cx="50" cy="50" r="45"/>
			  <path id="progress-success" stroke-linecap="round" stroke-width="5" stroke="#fff" fill="none"
			        d="M50 10
			           a 40 40 0 0 1 0 80
			           a 40 40 0 0 1 0 -80">
			  </path>
			  <text id="count-success" x="50" y="50" text-anchor="middle" dy="7" font-size="20">0%</text>
			</svg></div>',

			);


			$content['student_dashboard']['charts']['satisfaction'] = array(
					'#type' => 'markup',
					'#markup' => '<div class="col-md-4"><h4 class="text-center">'.t("Task satisfaction").'</h4><svg id="animated-chart-satisfaction" class="animated-chart" viewbox="0 0 100 100">
			  <circle cx="50" cy="50" r="45"/>
			  <path id="progress-satisfaction" stroke-linecap="round" stroke-width="5" stroke="#fff" fill="none"
			        d="M50 10
			           a 40 40 0 0 1 0 80
			           a 40 40 0 0 1 0 -80">
			  </path>
			  <text id="count-satisfaction" x="50" y="50" text-anchor="middle" dy="7" font-size="20">0%</text>
			</svg></div>',

			);

			$content['student_dashboard']['table'] = array(
					'#type' => 'markup',
					'#prefix' => '<table id="student-dash-table" data-toggle="table" data-url="'.url("/dashboard/student/").'">',
					'#markup' => '<thead>
	    <tr>
	        <th data-field="group" data-formatter="nameFormatter">'.t("Group").'</th>'.$this_semester_months_markup.'
	    </tr>
	    </thead>',
					'#suffix' => '</table>',
			);


		}else{
			$groups = node_load_multiple($group_nids);

			if (!empty($groups)) {
				$content['groups-listing'] = node_view_multiple($groups, 'dashboard');


				foreach ($content['groups-listing']['nodes'] as $node){
					if (isset($node['#node']->picture)) {
						//Hide user picture
						$node['#node']->picture = ['#printed' => false];
					}
				}
				$content['groups-listing']['pager'] = array(
						'#theme' => 'pager',
						'#weight' => 5,
				);

			}
		}



	}else {
		$content['groups-not-found'] = array(
				'#type' => 'markup',
				'#prefix' => '<div class="ed-message ed-message-notice">',
				'#markup' => t('Hi! Nothing to show here at the moment. Join some group to see latest updates from it.'),
				'#suffix' => '</div>',
		);
	}


  return $content;
}


/**
 * Student dashboard api
 */
function ed_dashboard_get_student_dashboard(){

	$response = array(
			'success' => false,
	);


	$my_groups = array_values(ed_get_groups_by_user_no_subgroups());




	$months_in_this_semester = array_keys(_ed_get_months_of_current_semester());

	$total_tasks = 0;
	$tasks_accepted = 0;
	$tasks_answered = 0;
	$satisfaction_rate = 0;
	$tasks_submitted = 0;

	$my_groups_names_tasks = array();

	if(!empty($my_groups)){
		foreach ($my_groups as $my_group){


			$months_tasks = array();

			//  get members and separate out admins
			$members = ed_get_group_members($my_group, true, true, true);
			$admins = ed_filter_admins($members);


			foreach ($months_in_this_semester as $month){
				$group_tasks = _ed_get_group_tasks_for_month_year($my_group, $month, date('Y'));

				$group_tasks_markup = '';

				foreach ($group_tasks as $key=>$group_task){
					$total_tasks++;


					$answer = ed_get_answer($group_task, $GLOBALS['user']->uid, false, $admins);



					switch($answer['status']) {
						case 'unanswered':

							$group_tasks_markup .= "<a href='".url('node/'.$group_task)."' data-toggle='popover' data-title='".t('Student rating')."' task=".$group_task." data-trigger='hover' data-poload='".url("/dashboard/student/rating")."'><button type='button' class='btn btn-default btn-circle'></button></a>";
							break;

						case 'unchecked':
							$group_tasks_markup .= "<a href='".url('node/'.$answer['nid'])."' data-toggle='popover' data-title='".t('Student rating')."' task=".$group_task." data-trigger='hover' data-poload='".url("/dashboard/student/rating")."'><button type='button' class='btn btn-warning unchecked btn-circle'></button>";
							$satisfaction_rate+=_ed_get_average_satisfaction_for_task($answer['nid']);
							$tasks_answered++;
							$tasks_submitted++;
							break;

						case 'accepted':
							$group_tasks_markup .= "<a href='".url('node/'.$answer['nid'])."' data-toggle='popover' data-title='".t('Student rating')."' task=".$group_task." data-trigger='hover' data-poload='".url("/dashboard/student/rating")."'><button type='button' class='btn btn-success btn-circle'></button>";
							$group_tasks[$key] = array('status' => 'accepted');
							$satisfaction_rate+=_ed_get_average_satisfaction_for_task($answer['nid']);
							$tasks_accepted++;
							$tasks_submitted++;
							break;

						case 'checked':
							$group_tasks_markup .= "<a href='".url('node/'.$answer['nid'])."' data-toggle='popover' data-title='".t('Student rating')."' task=".$group_task." data-trigger='hover' data-poload='".url("/dashboard/student/rating")."'><button type='button' class='btn btn-primary btn-circle'></button>";
							$satisfaction_rate+=_ed_get_average_satisfaction_for_task($answer['nid']);
							$tasks_submitted++;
							break;

						case 'rejected':

							$group_tasks_markup .= "<a href='".url('node/'.$answer['nid'])."' data-toggle='popover' data-title='".t('Student rating')."' task=".$group_task." data-trigger='hover' data-poload='".url("/dashboard/student/rating")."'><button type='button' class='btn btn-danger btn-circle'></button>";

							$group_tasks[$key] = array('status' => 'rejected');
							$satisfaction_rate+=_ed_get_average_satisfaction_for_task($answer['nid']);
							$tasks_submitted++;
							break;

					}

				}



				$months_tasks[$month] = $group_tasks_markup;

			}

			//Add group title
			$wrapper = entity_metadata_wrapper('node', $my_group);
			$group_name = $wrapper->title->value();
			$months_tasks['group'] = [$group_name, $my_group];



			array_push($my_groups_names_tasks, $months_tasks);

		}

	}


	$response['success'] = true;
	$response['data'] = $my_groups_names_tasks;

	if($tasks_submitted>0){
		$satisfaction_rate = $satisfaction_rate/$tasks_submitted;
	}else{
		$satisfaction_rate = 0;
	}


	if($total_tasks>0){
		$response['stats'] = array('tasks_accepted' => $tasks_accepted*100/$total_tasks, 'tasks_answered' => $tasks_answered*100/$total_tasks, 'satisfaction_rate' => $satisfaction_rate);
	}else{
		$response['stats'] = array('tasks_accepted' => 0, 'tasks_answered' => 0, 'satisfaction_rate' => 0);
	}



	return drupal_json_output($response);

}



function _ed_get_average_satisfaction_for_task($answer_id){

	$difficulty = 0;
	$time_eff = 0;
	$satisfaction = 0;

	$wrapper = entity_metadata_wrapper('node', $answer_id);


	if($wrapper->__isset('ed_field_difficulty_feedb')){
		//100 - very difficult - lower rating
		$difficulty = 100 - $wrapper->ed_field_difficulty_feedb->value()*100/4;
	}

	if($wrapper->__isset('ed_field_time_eff_feedb')){
		//100 - very time consuming - lower rating
		$time_eff = 100 - $wrapper->ed_field_time_eff_feedb->value()*100/4;
	}

	if($wrapper->__isset('ed_field_satisf_feedb')){
		$satisfaction = $wrapper->ed_field_satisf_feedb->value()*100/4;
	}



	$rating = ($difficulty+$time_eff+$satisfaction)/3;

	return $rating;
}


/*
 * Used by student dashboard, excludes inactive groups, subgroups
 * groups where current user is a creator or manager
 */
function ed_get_groups_by_user_no_subgroups() {
	global $user;
	$usergroups = og_get_groups_by_user();

  if($usergroups){

    $query = db_select('node', 'n')
        ->fields('n', array('nid'))
        ->condition('n.status', 1);

    //Exclude inactive groups
    $exclude_query = new EntityFieldQuery();
    $exclude_query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'ed_cluster')
        ->fieldCondition('ed_field_group_state', 'value', 0);
    $exclude_result = $exclude_query->execute();
    $excluded = array_keys($exclude_result['node']);
    if ( $excluded ) {
      $query->condition('n.nid', $excluded, 'NOT IN');
    }



      $query->condition('n.nid', $usergroups['node'], 'in');

    $query->condition('n.type', 'ed_cluster');
    $query->orderBy('TRIM(title)', 'ASC');


    $nids = $query->execute()->fetchCol();

    //Exclude groups where current user is a group creator or manager
    foreach ($nids as $key=>$nid){
      $wrapper = entity_metadata_wrapper('node', $nid);

      if($user->uid == $wrapper->value()->uid){
        unset($nids[$key]);
      }
      if(in_array(OG_ADMINISTRATOR_ROLE, og_get_user_roles('node', $nid, $user->uid, FALSE))){
        unset($nids[$key]);
      }

    }
    return $nids;
  }
	return false;

}




/**
 * Get task rating used in student dashboard
 */
function ed_dashboard_get_task_rating(){

	$response = array(
			'success' => false,
	);

	$rating = 0;

	$answers_count = 0;


	if(isset($_POST['task_id'])){
		$answers = _get_all_answers_to_task($_POST['task_id']);



		if(!empty($answers)){

			foreach ($answers as $answer){

				$answers_count++;

				$rating += _ed_get_average_satisfaction_for_task( $answer->nid);

			}

			$response['rating'] = $rating/$answers_count;

		}else{
			$response['rating'] = 0;
		}
	}else{
		$response['rating'] = 0;
	}





	$response['success'] = true;

	return drupal_json_output($response);
}



function _get_all_answers_to_task($task){
	$query = db_select('node', 'n');
	$query->join('field_data_field_ref_to_task', 'b', 'n.nid = b.entity_id');
	$query->fields('n', array('nid'))
			->condition('n.type', 'ed_answer');
	$query->condition('b.field_ref_to_task_target_id', $task);

	$result = $query->execute()->fetchAll();
	return $result;
}




function _ed_get_group_tasks_for_month_year($gid, $month, $year){

  //January case - should be next year
  if($month == 1){
    $year = $year + 1;
  }
	$year_month = $year.'-'.$month;

	$date = date_parse_from_format ("Y-m" ,  $year_month);
	$num = cal_days_in_month(CAL_GREGORIAN, $date['month'], $date['year']);
	$first_minute = mktime(0, 0, 0, $date['month'], 1, $date['year']);
	$last_minute = mktime(23, 59, 59, $date['month'], $num, $date['year']);


	$query = db_select('node', 'n');
	$query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type = 'node'");
  $query->join('field_data_ed_task_due_date', 'dd', 'dd.entity_id = ogm.etid');
	$query->fields('n', array('nid'))
			->condition('ogm.gid', $gid)
			->condition('n.nid', $gid, '!=')
			->condition('n.type', 'ed_task')
			->condition('n.created', array($first_minute, $last_minute), 'BETWEEN')
			->addTag('node_access')
      ->orderBy('dd.ed_task_due_date_value', 'ASC');
	$query->distinct();
	$result = $query->execute()->fetchCol();
	return $result;
}


/**
 * Return a list of the months in this semester
 */
function _ed_get_months_of_current_semester(){

	$current_month = format_date(time(), 'medium','n');


	if($current_month >= 2 && $current_month <= 7){
		//Second semester, Feb-Jul
		return array(2 => t('February'), 3 => t('March'), 4 => t('April'), 5 => t('May'), 6 => t('June'), 7 => t('July'));


	}else{
		//First semester, Aug-Jan
		return array(8 => t('August'), 9 => t('September'), 10 => t('October'), 11 => t('November'), 12 => t('December'), 1 => t('January'));
	}

}

/**
 * Dashboard drafts page.
 */
function ed_dashboard_drafts_page() {
  menu_tree_set_path('main-menu', 'dashboard');

  $account = $GLOBALS['user'];
  $content = array();


  // Get all user drafts
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.status', 0)
    ->condition('n.uid', $account->uid);

  $nids = $query->execute()->fetchCol();


  $groups = array();
  $groups[0] = '- '.t('All').' -';

  if (!empty($nids)) {


    //Get unique groups
    foreach ($nids as $nid){

      $wrapper = entity_metadata_wrapper('node', $nid);

      if($wrapper->__isset('og_group_ref')){
        $group_refs = $wrapper->og_group_ref->raw();

        foreach ($group_refs as $group_ref){

          if(!in_array($group_ref, $groups)){
            $groups[$group_ref] = _ed_get_group_name_from_id($group_ref);
          }
        }
      }

    }

    $content['sorting'] = drupal_get_form('_ed_get_sorting_by_group', $groups);

    $group_sorting = ed_get_group_sorting_type($content);

    if($group_sorting != 0){


      //Select items with certain group ref
      $query = new EntityFieldQuery();
      $result = $query->entityCondition('entity_type', 'node')
          ->propertyCondition('uid',  $account->uid)
          ->propertyCondition('status', 0, '=')
          ->fieldCondition('og_group_ref', 'target_id', $group_sorting)
          ->propertyOrderBy('created', 'DESC')
          ->pager(ed_get_paging_nr())
          ->execute();


    }else{
      //Or select all with ordering and pagination
      $query = new EntityFieldQuery();
      $result = $query->entityCondition('entity_type', 'node')
          ->propertyCondition('uid',  $account->uid)
          ->propertyCondition('status', 0, '=')
          ->propertyOrderBy('created', 'DESC')
          ->pager(ed_get_paging_nr())
          ->execute();
    }




    $nodes = node_load_multiple(array_keys($result['node']));
    $build = node_view_multiple($nodes);
    $build['pager'] = array(
      '#theme' => 'pager',
      '#weight' => 5,
    );
    $content['drafts-listing'] = $build;
  }

  return $content;
}

/**
 * Dashboard discover page.
 */
function ed_dashboard_discover_page($form, &$form_state, $tag = '') {
  menu_tree_set_path('main-menu', 'dashboard');

  $form['search_tag'] = array(
    '#type' => 'textfield',
    '#title' => t('Search tag'),
    '#default_value' => $tag,
    '#size' => 60,
    '#maxlength' => 128,
		  '#attributes' => array(
				  'class' => array('reply-form__name'),
				  'placeholder' => t('Search'),
		  ),
  );


  $form['buttons']['submit'] = array(
    '#name' => 'op-search',
	  '#type' => 'submit',
	  '#value' => t('Search'),
	  '#attributes'=>array('style'=>"display:none"),
  );

  if (!empty($tag)) {
    $term = taxonomy_get_term_by_name($tag, 'tags');

    if ($term) {
      $form['buttons']['submit-save-search'] = array(
        '#type' => 'submit',
        '#value' => t('Save Search'),
        '#name' => 'op-save-search',
        '#attributes' => array(
          'class' => array('btn-link'),
        ),
      );

      $term = array_shift($term);

      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->propertyCondition('status', 1)
        ->fieldCondition('field_tags', 'tid', $term->tid, '=')
        ->pager(ed_get_paging_nr());

      $result = $query->execute();
      if (isset($result['node'])) {
        $nids = array_keys($result['node']);
        $nodes = node_load_multiple($nids);

        if($nodes) {
          foreach ($nodes as $node) {
            $user = user_load($node->uid);

            $rows []= array(
              'data' => t('@node_type_name !node by !user', array(
                '@node_type_name' => edidaktikum_get_node_type_name($node->type, TRUE),
                '!node' => l(edidaktikum_get_node_title($node), 'node/' . $node->nid),
                '!user' => l(edidaktikum_get_full_name_for_user_account($user), 'user/' . $user->uid)
              )),
            );
          }
          $form['result-listing']['list'] = array(
            '#theme' => 'item_list',
            '#type' => 'ul',
            '#attributes' => array(
              'class' => array('ed-discover-nodes-listing'),
            ),
            '#items' => $rows,
          );
          $form['result-listing']['pager'] = array(
            '#theme' => 'pager',
            '#weight' => 5,
          );
        }
      }
    }
  }

  return $form;
}

/**
 * Deals with dashboard discover page submit.
 * Redirects on op-search and saves a new search on
 * op-save-search button press.
 */
function ed_dashboard_discover_page_submit($form, &$form_state) {
  switch($form_state['triggering_element']['#name']) {
    case 'op-search':
      $form_state['redirect'] = 'dashboard/discover';
      if (!empty($form_state['input']['search_tag'])) {
        $form_state['redirect'] .= '/' . $form_state['input']['search_tag'];
      }
      break;
    case 'op-save-search':
      if (!empty($form_state['input']['search_tag'])) {
        $account = $GLOBALS['user'];
        db_insert('ed_user_tag_search')
          ->fields(array(
            'uid' => $account->uid,
            'tag' => truncate_utf8(strip_tags($form_state['input']['search_tag']), 128),
            'timestamp' => REQUEST_TIME,
          ))
          ->execute();
      }
      break;
    default:
      $form_state['rebuild'] = TRUE;
  }
}

/**
 * Returns ed_cluster node identifiers that current user is an active
 * member of.
 * Uses pager extender.
 */
function _ed_dashboard_get_current_user_groups() {
  $acc = $GLOBALS['user'];
  $query = db_select('node', 'n')
    ->extend('PagerDefault')
    ->limit(ed_get_paging_nr());
  $query->join('og_membership', 'ogm', "n.nid = ogm.gid AND ogm.entity_type = 'user' AND ogm.group_type = 'node' AND ogm.state = :active AND ogm.etid = :uid", array(':active' => OG_STATE_ACTIVE, ':uid' => $acc->uid));
  $query->fields('n', array('nid'))
    ->condition('n.type', 'ed_cluster')
    ->addTag('node_access');
  $query->orderBy('n.created','DESC');

  return $query->execute()->fetchCol();
}

/**
 * Implements hook_block_info().
 */
function ed_dashboard_block_info() {
  $blocks['ed_dashboard_saved_searches'] = array(
    'info' => t('Saved searches'),
    'status' => TRUE,
    'title' => '<none>',
    'region' => 'sidebar_second',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "dashboard/discover\ndashboard/discover/*",
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ed_dashboard_block_view($block_name='') {
  if ('ed_dashboard_saved_searches' == $block_name) {
    $account = $GLOBALS['user'];

    $content['heading'] = array(
      '#type' => 'markup',
      '#prefix' => '<h2>',
      '#markup' => t('Saved searches'),
      '#suffix' => '</h2>',
    );

    $query = db_select('ed_user_tag_search', 'uts')
      ->fields('uts', array('sid', 'tag'))
      ->condition('uts.uid', $account->uid);

    $result = $query->execute()->fetchAll();

    if (!empty($result)) {
      // Not using #attached as it does not load translations
      drupal_add_js(drupal_get_path('module', 'ed_dashboard') . '/js/ed_dashboard_discover.js', 'file');
      foreach ($result as $key => $single) {
        $listing_items []= l('<i class="fa fa-times"></i>', '', array('attributes' => array('class' => array('ed-remove-search'), 'data-id' => $single->sid), 'html' => TRUE))
          . l($single->tag, 'dashboard/discover/' . $single->tag);
      }
      $content['searches-list'] = array(
        '#theme' => 'item_list',
        '#items' => $listing_items,
        '#attributes' => array(
          'class' => array('ed-saved-searches'),
        ),
        '#attached' => array(
          'css' => array(
            drupal_get_path('module', 'ed_dashboard') . '/css/ed_dashboard_discover.css'
          ),
        ),
      );
    }

    $block = array(
      'subject' => 'Saved searches',
      'content' => $content,
    );

    return $block;

  }
}

/**
 * Deals with ajax callback to delete a search.
 */
function ed_dashboard_delete_search($sid) {
  $response = array(
    'success' => false,
  );

  if (!$sid) {
    return drupal_json_output($response);
  }

  $account = $GLOBALS['user'];
  $num_deleted = db_delete('ed_user_tag_search')
    ->condition('sid', $sid)
    ->condition('uid', $account->uid)
    ->execute();

  if ($num_deleted) {
    $response['success'] = true;
  }

  return drupal_json_output($response);
}

/**
 * Implements hook_user_delete().
 */
function ed_dashboard_user_delete($account) {
  // Delete any discovery searches of the user
  db_delete('ed_user_tag_search')
    ->condition('uid', $account->uid)
    ->execute();
}
