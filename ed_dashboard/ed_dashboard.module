<?php

/**
 * @file
 * eDidaktikum dashboard module.
 */

/**
 * Implements hook_menu().
 */
function ed_dashboard_menu() {
  $items['dashboard'] = array(
    'title' => t('Dashboard'),
    'page callback' => 'ed_dashboard_page',
    'access callback' => 'user_is_logged_in',
    'weight' => -5,
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['dashboard/home'] = array(
    'title' => t('Dashboard'),
    'page callback' => 'ed_dashboard_page',
    'access callback' => 'user_is_logged_in',
    'weight' => 0,
    'menu_name' => 'ed-dashboard-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['dashboard/drafts'] = array(
    'title' => t('Drafts'),
    'page callback' => 'ed_dashboard_drafts_page',
    'access callback' => 'user_is_logged_in',
    'weight' => 30,
    'menu_name' => 'ed-dashboard-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['dashboard/discover'] = array(
    'title' => t('Discover'),
    'page callback' => 'drupal_get_form',
    'access callback' => 'user_is_logged_in',
    'page arguments' => array('ed_dashboard_discover_page', 2),
    'weight' => 40,
    'menu_name' => 'ed-dashboard-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['dashboard/search/delete/%'] = array(
    'page callback' => 'ed_dashboard_delete_search',
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_is_logged_in',
  );
  $items['dashboard/student_activity'] = [
    'title' => t('Student activity'),
    'access callback' => 'ed_current_user_is_administrator',
    'page callback' => 'ed_student_activity_page',
    'weight' => 50,
    'menu_name' => 'ed-dashboard-menu',
    'type' => MENU_NORMAL_ITEM
  ];

  return $items;
}

function ed_current_user_is_administrator() {
  return in_array('administrator', $GLOBALS['user']->roles);
}



function ed_student_activity_page() {
  menu_tree_set_path('main-menu', 'dashboard');

  $users = edf_get_users();
  $tasks = edf_get_tasks();
  edf_fill_user_tasks($users, $tasks);

  //  analyze

  foreach($users as &$user) {
    $all_tasks = [];

    foreach ($user['groups'] as $group) {
      if (!isset($group['tasks'])) continue;
      $all_tasks = array_merge($all_tasks, $group['tasks']);
    }

    if (count($all_tasks) > 0) {

      $total_accepted = 0;
      $total_checked = 0;
      $total_answered = 0;
      $total_on_time = 0;
      $total = count($all_tasks);

      $total_gradeable = 0;
      $total_grade = 0;

      foreach ($all_tasks as $task) {
        if (isset($task['answer'])) {
          $total_answered++;

          if ($task['answer']['created'] <= $task['due_date']) {
            $total_on_time++;
          }

          if ($task['grade']['status'] != 'unchecked') {
            $total_checked++;

            if (!is_null($task['grade']['grade'])) {
              $total_gradeable++;
              $total_grade += $task['grade']['grade'] / 100;
            }

            if ($task['grade']['status'] == 'accepted') {
              $total_accepted++;
            }
          }
        }
      }

      $score = [
        'answered' => round($total_answered / $total * 100),
        'on_time' => round($total_on_time / $total * 100),
      ];
      $score_total = $score['answered'] + $score['on_time'];
      $score_comp = 2;

      if ($total_checked == 0) {
        $score['accepted'] = '-';
      } else {
        $score['accepted'] = round($total_accepted / $total_checked * 100);
        $score_total += $score['accepted'];
        $score_comp++;
      }

      if ($total_gradeable == 0) {
        $score['grades'] = '-';
      } else {
        $score['grades'] = round($total_grade / $total_gradeable * 100);
        $score_total += $score['grades'];
        $score_comp++;
      }

      $score['average'] = round($score_total / $score_comp);
      $user['score'] = $score;
    } else {
      unset($users[$user['uid']]);
    }

    unset($user);
  }

  uasort($users, function($a, $b) {
    return ($b['score']['average'] - $a['score']['average']);
  });
  
  //  parse

  $table = "<table><tr><th>" . t('Name') . "</th><th>" . t('Participation') . "</th><th>" . t('Punctuality') . "</th><th>";
  $table .= t('Success') . "</th><th>" . t('Grades') . "</th><th>" . t('Average') . "</th></tr>";

  foreach($users as &$user) {
    if (!isset($user['score'])) continue;
    $table .= "<tr><td><a href=../user/" . $user['uid'] . ">" . $user['full_name'] . "</a></td><td>" . $user['score']['answered'] . "</td><td>" . $user['score']['on_time'] . "</td><td>";
    $table .= $user['score']['accepted'] . "</td><td>" . $user['score']['grades'] . "</td><td>" . $user['score']['average'] . "</td></tr>"; 
    unset($user);
  }


  $table .= "</table>";
    
  return $table;
}

/**
 * Dashboard page.
 */
function ed_dashboard_page() {
  menu_tree_set_path('main-menu', 'dashboard');
 
  $content = array();

  $group_nids = _ed_dashboard_get_current_user_groups();
  if (!empty($group_nids)) {
    $groups = node_load_multiple($group_nids);
  }

  if (!empty($groups)) {
    $content['groups-listing'] = node_view_multiple($groups, 'dashboard');
	
	
    foreach ($content['groups-listing']['nodes'] as $node){
      if (isset($node['#node']->picture)) {
        //Hide user picture
        $node['#node']->picture = ['#printed' => false];
      }
    }
    $content['groups-listing']['pager'] = array(
      '#theme' => 'pager',
      '#weight' => 5,
    );
	
  } else {
    $content['groups-not-found'] = array(
      '#type' => 'markup',
      '#prefix' => '<div class="ed-message ed-message-notice">',
      '#markup' => t('Hi! Nothing to show here at the moment. Join some group to see latest updates from it.'),
      '#suffix' => '</div>',
    );
  }

  return $content; 
}

/**
 * Dashboard drafts page.
 */
function ed_dashboard_drafts_page() {
  menu_tree_set_path('main-menu', 'dashboard');

  $account = $GLOBALS['user'];
  $content = array();

  // Get all user drafts
  $query = db_select('node', 'n')
    ->extend('PagerDefault')
    ->fields('n', array('nid'))
    ->condition('n.status', 0)
    ->condition('n.uid', $account->uid)
    ->limit(ed_get_paging_nr())
    ->orderBy('n.created', 'DESC');

  $nids = $query->execute()->fetchCol();

  if (!empty($nids)) {
    $nodes = node_load_multiple($nids);
    $build = node_view_multiple($nodes);
    $build['pager'] = array(
      '#theme' => 'pager',
      '#weight' => 5,
    );
    $content['drafts-listing'] = $build;
  }

  return $content;
}

/**
 * Dashboard discover page.
 */
function ed_dashboard_discover_page($form, &$form_state, $tag = '') {
  menu_tree_set_path('main-menu', 'dashboard');

  $form['search_tag'] = array(
    '#type' => 'textfield',
    '#title' => t('Search tag'),
    '#default_value' => $tag,
    '#size' => 60,
    '#maxlength' => 128,
  );

  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#name' => 'op-search',
  );

  if (!empty($tag)) {
    $term = taxonomy_get_term_by_name($tag, 'tags');

    if ($term) {
      $form['buttons']['submit-save-search'] = array(
        '#type' => 'submit',
        '#value' => t('Save Search'),
        '#name' => 'op-save-search',
        '#attributes' => array(
          'class' => array('btn-link'),
        ),
      );

      $term = array_shift($term);

      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->propertyCondition('status', 1)
        ->fieldCondition('field_tags', 'tid', $term->tid, '=')
        ->pager(ed_get_paging_nr());

      $result = $query->execute();
      if (isset($result['node'])) {
        $nids = array_keys($result['node']);
        $nodes = node_load_multiple($nids);

        if($nodes) {
          foreach ($nodes as $node) {
            $user = user_load($node->uid);

            $rows []= array(
              'data' => t('@node_type_name !node by !user', array(
                '@node_type_name' => edidaktikum_get_node_type_name($node->type, TRUE),
                '!node' => l(edidaktikum_get_node_title($node), 'node/' . $node->nid),
                '!user' => l(edidaktikum_get_full_name_for_user_account($user), 'user/' . $user->uid)
              )),
            );
          }
          $form['result-listing']['list'] = array(
            '#theme' => 'item_list',
            '#type' => 'ul',
            '#attributes' => array(
              'class' => array('ed-discover-nodes-listing'),
            ),
            '#items' => $rows,
          );
          $form['result-listing']['pager'] = array(
            '#theme' => 'pager',
            '#weight' => 5,
          );
        }
      }
    }
  }

  return $form;
}

/**
 * Deals with dashboard discover page submit.
 * Redirects on op-search and saves a new search on
 * op-save-search button press.
 */
function ed_dashboard_discover_page_submit($form, &$form_state) {
  switch($form_state['triggering_element']['#name']) {
    case 'op-search':
      $form_state['redirect'] = 'dashboard/discover';
      if (!empty($form_state['input']['search_tag'])) {
        $form_state['redirect'] .= '/' . $form_state['input']['search_tag'];
      }
      break;
    case 'op-save-search':
      if (!empty($form_state['input']['search_tag'])) {
        $account = $GLOBALS['user'];
        db_insert('ed_user_tag_search')
          ->fields(array(
            'uid' => $account->uid,
            'tag' => truncate_utf8(strip_tags($form_state['input']['search_tag']), 128),
            'timestamp' => REQUEST_TIME,
          ))
          ->execute();
      }
      break;
    default:
      $form_state['rebuild'] = TRUE;
  }
}

/**
 * Returns ed_cluster node identifiers that current user is an active
 * member of.
 * Uses pager extender.
 */
function _ed_dashboard_get_current_user_groups() {
  $acc = $GLOBALS['user'];
  $query = db_select('node', 'n')
    ->extend('PagerDefault')
    ->limit(ed_get_paging_nr());
  $query->join('og_membership', 'ogm', "n.nid = ogm.gid AND ogm.entity_type = 'user' AND ogm.group_type = 'node' AND ogm.state = :active AND ogm.etid = :uid", array(':active' => OG_STATE_ACTIVE, ':uid' => $acc->uid));
  $query->fields('n', array('nid'))
    ->condition('n.type', 'ed_cluster')
    ->addTag('node_access');
  $query->orderBy('n.created','DESC');

  return $query->execute()->fetchCol();
}

/**
 * Implements hook_block_info().
 */
function ed_dashboard_block_info() {
  $blocks['ed_dashboard_saved_searches'] = array(
    'info' => t('Saved searches'),
    'status' => TRUE,
    'title' => '<none>',
    'region' => 'sidebar_second',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "dashboard/discover\ndashboard/discover/*",
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ed_dashboard_block_view($block_name='') {
  if ('ed_dashboard_saved_searches' == $block_name) {
    $account = $GLOBALS['user'];

    $content['heading'] = array(
      '#type' => 'markup',
      '#prefix' => '<h2>',
      '#markup' => t('Saved searches'),
      '#suffix' => '</h2>',
    );

    $query = db_select('ed_user_tag_search', 'uts')
      ->fields('uts', array('sid', 'tag'))
      ->condition('uts.uid', $account->uid);

    $result = $query->execute()->fetchAll();

    if (!empty($result)) {
      // Not using #attached as it does not load translations
      drupal_add_js(drupal_get_path('module', 'ed_dashboard') . '/js/ed_dashboard_discover.js', 'file');
      foreach ($result as $key => $single) {
        $listing_items []= l('<i class="fa fa-times"></i>', '', array('attributes' => array('class' => array('ed-remove-search'), 'data-id' => $single->sid), 'html' => TRUE))
          . l($single->tag, 'dashboard/discover/' . $single->tag);
      }
      $content['searches-list'] = array(
        '#theme' => 'item_list',
        '#items' => $listing_items,
        '#attributes' => array(
          'class' => array('ed-saved-searches'),
        ),
        '#attached' => array(
          'css' => array(
            drupal_get_path('module', 'ed_dashboard') . '/css/ed_dashboard_discover.css'
          ),
        ),
      );
    }

    $block = array(
      'subject' => 'Saved searches',
      'content' => $content,
    );

    return $block;

  }
}

/**
 * Deals with ajax callback to delete a search.
 */
function ed_dashboard_delete_search($sid) {
  $response = array(
    'success' => false,
  );

  if (!$sid) {
    return drupal_json_output($response);
  }

  $account = $GLOBALS['user'];
  $num_deleted = db_delete('ed_user_tag_search')
    ->condition('sid', $sid)
    ->condition('uid', $account->uid)
    ->execute();

  if ($num_deleted) {
    $response['success'] = true;
  }

  return drupal_json_output($response);
}

/**
 * Implements hook_user_delete().
 */
function ed_dashboard_user_delete($account) {
  // Delete any discovery searches of the user
  db_delete('ed_user_tag_search')
    ->condition('uid', $account->uid)
    ->execute();
}

