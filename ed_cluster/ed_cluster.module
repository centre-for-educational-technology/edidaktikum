<?php

/**
 * @file
 * Cluster module.
 */

/**
 * Implements hook_menu().
 */
function ed_cluster_menu() {
  $items['clusters'] = array(
    'title' => t('Groups'),
    'page callback' => 'ed_cluster_listing_page',
    'access callback' => TRUE,
    'weight' => 20,
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['node/%node/task-manager'] = array(
    'title' => t('Task Manager'),
    'page callback' => 'ed_task_manager',    
    'access callback' => 'ed_task_manager_access',
    'page arguments' => array('node', 1),
    'access arguments' => array('node', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['node/%node/news'] = array(
    'title' => t('News'),
    'page callback' => 'ed_listing_from_group',    
    'access callback' => 'ed_group_content_listing_access',    
    'page arguments' => array('node', 1, 'ed_news'),
    'access arguments' => array('node', 1, 'ed_news'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['node/%node/events'] = array(
    'title' => t('Events'),
    'page callback' => 'ed_listing_from_group',    
    'access callback' => 'ed_group_content_listing_access',    
    'page arguments' => array('node', 1, 'ed_event'),
    'access arguments' => array('node', 1, 'ed_event'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['node/%node/blog'] = array(
    'title' => t('Blog'),
    'page callback' => 'ed_listing_from_group',
    'access callback' => 'ed_group_content_listing_access',
    'page arguments' => array('node', 1, 'ed_blog'),
    'access arguments' => array('node', 1, 'ed_blog'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['node/%node/learning-resource'] = array(
    'title' => t('Learning Resources'),
    'page callback' => 'ed_listing_from_group',    
    'access callback' => 'ed_group_content_listing_access',    
    'page arguments' => array('node', 1, 'ed_learning_resource'),
    'access arguments' => array('node', 1, 'ed_learning_resource'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['node/%node/forum'] = array(
    'title' => t('Forum'),
    'page callback' => 'ed_listing_from_group',    
    'access callback' => 'ed_group_content_listing_access',    
    'page arguments' => array('node', 1, 'ed_forum'),
    'access arguments' => array('node', 1, 'ed_forum'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['node/%node/page'] = array(
    'title' => t('Pages'),
    'page callback' => 'ed_listing_from_group',    
    'access callback' => 'ed_group_content_listing_access',
    'page arguments' => array('node', 1, 'ed_page'),
    'access arguments' => array('node', 1, 'ed_page'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['node/%node/bookmark'] = array(
    'title' => t('Bookmarks'),
    'page callback' => 'ed_listing_from_group',
    'access callback' => 'ed_group_content_listing_access',
    'page arguments' => array('node', 1, 'ed_bookmark'),
    'access arguments' => array('node', 1, 'ed_bookmark'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );

  return $items;
}

function ed_group_content_listing_access($filler, $gnode, $type){  
  $is_group = _ed_is_nid_group($gnode->nid);
  return $is_group;
}

function ed_listing_from_group($filler, $gnode, $type){
  
  $content = array();
  $content_nids = _ed_get_group_content_by_type($gnode->nid, $type);
  $nodes = node_load_multiple($content_nids);
  $build = node_view_multiple($nodes);
  $build['pager'] = array(
    '#theme' => 'pager',
    '#weight' => 5,
  );
  $content['listing'] = $build;
  
  return $content;
}

/**
 * Implements hook_field_extra_fields().
 */
function ed_cluster_field_extra_fields(){  
  $extra['node']['ed_cluster']['display'] = array(
    'ed_cluster_content' => array(
      'label' => t('Group content paged'),
      'description' => t('desc'),
      'weight' => 10,
    ),
  );
  return $extra;
}

/**
 * Implements hook_node_view().
 */
function ed_cluster_node_view($node, $view_mode, $langcode){
  
  switch ($node->type){
    case 'ed_cluster':
      if($view_mode=='full'){
        $content_nids = _ed_get_group_content($node->nid);      
        $content = node_load_multiple($content_nids);        
        $types = array();
        foreach($content as $content_single){        
          $types[] = $content_single->type;
        }
        $types_unique = array_unique($types);

        $options = array(
          'attributes' => array(),
          'query' => array(
            'og_group_ref' => $node->nid,
            'destination' => 'node/'.$node->nid,
          ),
        );

        // Check if current user is a member of the group
        $is_group_member = og_is_member('node', $node->nid);

        foreach($types_unique as $type){
          if($type!='ed_task' && $type!='ed_answer'){
            $node->content['ed_cluster_content'][$type]['heading'] = array(
              '#type' => 'markup',
              '#markup' => '<h2 class="'.$type.'">'.t(ucwords(str_replace('ed', '', str_replace('_',' ',$type)))).'</h2>',
            );
            // Add new link is only shown to group members
            //if ($is_group_member) {
            //  $node->content['ed_cluster_content'][$type]['heading']['#markup'] .= '<em class="ed-og-add-new">'.l(t('Add new'), 'node/add/'.str_replace('_', '-',$type), $options).'</em>';
            //}
            $last_nodes = _ed_get_last_content_by_type($type, $content);
            foreach($last_nodes as $last_node_single){
                $tere = node_view($last_node_single, 'teaser');
                $node->content['ed_cluster_content'][$type][$last_node_single->nid] = $tere;
            }
          }
        }
      } else if ('dashboard' == $view_mode) {
        $recent_content = _ed_get_group_recent_content($node->nid, 5);
        $recnt_content_nodes = node_load_multiple($recent_content);
        if ($recnt_content_nodes) {
          $items = array();
          foreach ($recnt_content_nodes as $single) {
            $single_action = ($single->created == $single->changed) ? 'created' : 'changed';

            // Determine the user who really acted in case of changed
            if ('changed' == $single_action) {
              $query = db_select('node_revision', 'nrv')
                ->fields('nrv', array('uid'))
                ->condition('nid', $single->nid)
                ->condition('vid', $single->vid)
                ->range(0, 1)
                ->orderby('nrv.timestamp', 'DESC');
              $real_actor = $query->execute()->fetchObject();
              if ($real_actor) {
                $single_user_acc = user_load($real_actor->uid);
              } else {
                $single_user_acc = user_load($single->uid);
              }
            } else {
              $single_user_acc = user_load($single->uid);
            }

            $single_name = l(edidaktikum_get_full_name_for_user_account($single_user_acc), 'user/' . $single->uid);

            // Deal with ed_task that has not title
            if ('ed_answer' == $single->type) {
              // Check if task reference exists
              if (isset($single->field_ref_to_task['und'][0]['target_id'])) {
                  $single_task = node_load($single->field_ref_to_task['und'][0]['target_id']);
                  $single_title = l($single_task->title.t(' - Answer'), 'node/' . $single->nid);
              } else {
                  $single_title = l(t('Answer with task removed'), 'node/' . $single->nid);
              }
            } else {
              $single_title = l($single->title, 'node/' . $single->nid);
            }

            if ('created' == $single_action) {
              $items[] = array(
                'data' => t('!name added !node @time', array('!name' => $single_name, '!node' => $single_title, '@time' => format_date($single->created, 'short'))),
              );
            } else {
              $items[] = array(
                'data' => t('!name changed !node @time', array('!name' => $single_name, '!node' => $single_title, '@time' => format_date($single->changed, 'short'))),
              );

            }
          }
          $node->content['recent-activity'] = array(
            '#theme' => 'item_list',
            '#items' => $items,
          );
        } else {
          $node->content['recent-activity'] = array(
            '#type' => 'markup',
            '#markup' => t('No recent activity'),
          );
        }
      }
      break;      
  }
}

function _ed_get_last_content_by_type($type, $content){
  $all_latest_nids = array();
  foreach($content as $content_single){
    if($content_single->type == $type){
      $all_latest_nids[] = $content_single;
    }
  }
  usort($all_latest_nids, "cmp");  
  $count = 0;
  $latest_nids = array();
  foreach($all_latest_nids as $nid){
    $latest_nids[] = $nid;
    $count++;
    if($count==3){
      break;
    }
  }
  
  return $latest_nids;
  
}
function cmp($a, $b){
    return strcmp($b->created, $a->created);
}

/**
 * Returns recently created/modified content of the group.
 * @param $guid
 *   Group node identifier
 * @param $limit
 *   Optional number of results to be returned
 * @return
 *   An array of node identifiers if any exist
 */
function _ed_get_group_recent_content($gid, $limit = NULL){
  $query = db_select('node', 'n');
  $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type = 'node'");
  $query->fields('n', array('nid'))
      ->condition('ogm.gid', $gid)
      ->condition('n.nid', $gid, '!=')
      ->addTag('node_access')
      ->orderBy('n.changed', 'DESC')
      ->distinct();
  if ($limit) {
    $query->range(0, 5);
  }
  $result = $query->execute()->fetchCol();
  return $result;
}

function _ed_get_group_content($gid){
  $query = db_select('node', 'n');
  $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type = 'node'");
  $query->fields('n', array('nid'))
      ->condition('ogm.gid', $gid)
      ->condition('n.nid', $gid, '!=')
      ->distinct();
  $result = $query->execute()->fetchCol();
  return $result;
}

function _ed_get_group_content_by_type($gid, $type){
  $query = db_select('node', 'n');
  $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type = 'node'");
  $query->fields('n', array('nid'))
      ->condition('ogm.gid', $gid)
      ->condition('n.nid', $gid, '!=')
      ->condition('n.type', $type)
      ->distinct();
  $result = $query->execute()->fetchCol();
  return $result;
}

// XXX This method seems to be also called out while trying to view task view/edit page.
// This method is being called on a lot of pages, it needs to be optimized. Loading all
// user tasks and going those ony by one is not an option. One could create a count query
// that would fetch all user tasks count that are given to some group. This could be a lot quicker.
// In addition this method only checks the first group being references and a task can reference multiple groups.
function ed_task_manager_access($test, $node){
  $account = $GLOBALS['user'];
  $task_nids = ed_get_user_tasks($test, $node);
  
  
  if(!empty($task_nids) && (in_array('teacher', $account->roles)|| in_array('administrator', $account->roles))){
    $nodes = node_load_multiple($task_nids);
    foreach($nodes as $nodesingle){
      if(!empty($nodesingle->og_group_ref[LANGUAGE_NONE]) && $nodesingle->og_group_ref[LANGUAGE_NONE][0]['target_id'] == $node->nid){         // CHECK FOR ALL og_group_ref's
        return true;
      }
    }
    return false;
  }
  return false;
}

function ed_get_user_tasks($test, $node){
  $account = $GLOBALS['user']; 
  $query = db_select('node','n')
    ->fields('n', array('nid'))
    ->condition('n.status', 1)
    ->condition('n.type', 'ed_task')
    ->condition('n.uid', $account->uid);
  $nids = $query->execute()->fetchCol();
  return $nids;
}

/**
 * Task Manager page.
 */
function ed_task_manager($test, $node){
  drupal_add_css(drupal_get_path('module', 'ed_cluster').'/task_manager.css');
  $account = $GLOBALS['user'];
  
  $content = array();
 
  $options = array(
    'attributes' => array(),
    'query' => array(
      'og_group_ref' => $node->nid,
      'destination' => 'node/'.$node->nid,
    ),
  );
  $content['add-new'] = array(
      '#type' => 'item',
      '#title' => t(''),
      '#markup' => l(t('Add new task'), 'node/add/ed-task', $options),
      '#href' => 'node/add/ed-task',      
  );
  
  $group_members_uids = _get_users_in_group($node->nid);
  
  if (in_array($account->uid, $group_members_uids)) {
    unset($group_members_uids[array_search($account->uid, $group_members_uids)]);    
  }
  
  $group_members = user_load_multiple($group_members_uids);
   
  $header = array(t('Name'));
  $nodes = node_load_multiple(_ed_get_user_group_tasks($account->uid, $node->nid));
    
  foreach(array_values($nodes) as $key => $node_single){
    array_push($header, l($key+1, 'node/'.$node_single->nid, array('attributes' => array('title' => $node_single->title))));  
  }
  $rows = array();
  
  foreach(array_values($group_members) as $index => $member){
      $rows[] = array(
        'data' => array(
          $member->uid => l($member->ed_field_full_name[LANGUAGE_NONE][0]['safe_value'], 'user/'.$member->uid),
        ),
      );
      foreach($nodes as $node_single){
        if(_ed_check_if_answered($member->uid, $node_single->nid)=='answered'){
          $tmp_answer_nid = _ed_get_answer_nid($member->uid, $node_single->nid);
          $rows[$index]['data'][$node_single->nid] = array('data' => l('&nbsp;', 'node/' . $tmp_answer_nid[0], array('html' => TRUE)), 'class' => _ed_check_if_answered($member->uid, $node_single->nid));
        }else{
          $rows[$index]['data'][$node_single->nid] = array('data' => '', 'class' => _ed_check_if_answered($member->uid, $node_single->nid));
        }
      }
  }

  $content['table'] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#header' => $header,
  );
  return $content;
}
function _ed_get_answer_nid($uid, $tnid){
  $query = db_select('node', 'n');
  $query->join('field_data_field_ref_to_task', 'ref', 'n.nid = ref.entity_id');
  $query->fields('n', array('nid'));
  $query->condition('n.uid', $uid)
      ->condition('ref.field_ref_to_task_target_id', $tnid);
  $result = $query->execute()->fetchCol();
  return $result;
}
function _ed_check_if_answered($uid, $tnid){
  $query = db_select('node', 'n');
  $query->join('field_data_field_ref_to_task', 'ref', 'n.nid = ref.entity_id');
  $query->fields('n', array('nid'));
  $query->condition('n.uid', $uid);
  $query->condition('ref.field_ref_to_task_target_id', $tnid);
  $result = $query->execute()->fetchCol();
  if(!empty($result)){
    
    return "answered";
  }else{
    return "unanswered";
  }
  
  
}

/*
 * Get all answers from selected user.
 */
function _ed_check_for_answers($uid){
  $query = db_select('node', 'n');
  $query
      ->condition('n.type', 'ed_answer')
      ->condition('n.uid', $uid)
      ->fields('n', array('nid'));
  return $query->execute()->fetchCol();
}

/*
 * Get all tasks that the user has made for this group
 */
function _ed_get_user_group_tasks($uid, $nid){
  $query = db_select('node', 'n');
  $query
      ->condition('n.type', 'ed_task')
      ->condition('n.uid', $uid)
      ->fields('n', array('nid'));
  $result = $query->execute()->fetchCol();
  
  $nodes = node_load_multiple($result);
  $group_tasks = array();
  foreach($nodes as $node_single){
    foreach($node_single->og_group_ref[LANGUAGE_NONE] as $item){
      if($item['target_id']==$nid){
        array_push($group_tasks, $node_single->nid);
      }
    }
  }
  
  return $group_tasks;
}

/**
 * Get all users of a group
 */
function _get_users_in_group($gid) {
  $query = db_select('users', 'u');
 
  $query
    ->condition('u.uid', 0, '<>')
    ->condition('u.status', 1, '=')
    ->fields('u', array('uid', 'name'))
    ->join('og_membership', 'ogm', "ogm.gid = :gid AND u.uid = ogm.etid AND ogm.entity_type = 'user'", array(':gid' => $gid));
  $result = $query->execute()->fetchCol();
  
  return $result;
}

/**
 * Clusters listing page.
 */
function ed_cluster_listing_page() {
  $content = array();
  $og_groups = ed_cluster_get_clusters();
  $account = $GLOBALS['user'];
  if(in_array('teacher', $account->roles)||in_array('administrator', $account->roles)){
    $content['add-new'] = array(
      '#type' => 'link',
      '#title' => t('Add new group'),
      '#href' => 'node/add/ed-cluster',
      '#prefix' => '<div class="ed-add-new-node ed-add-new-cluster">',
      '#suffix' => '</div>',
    );
  }
  if (!empty($og_groups)) {
    $nodes = node_load_multiple($og_groups);
    $build = node_view_multiple($nodes);
    $build['pager'] = array(
      '#theme' => 'pager',
      '#weight' => 5,
    );
    $content['clusters'] = $build;
  }
  return $content;
}
function _ed_is_nid_group($nid){
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.type', 'ed_cluster')
    ->condition('n.nid', $nid);
  $nids = $query->execute()->fetchCol();
  if(!empty($nids)){
    return true;
  }
  return false;
  
}

/**
 *
 */
function ed_cluster_get_clusters() {
  $query = db_select('node', 'n')
    ->extend('PagerDefault')
    ->fields('n', array('nid'))
    ->condition('n.status', 1)
    ->condition('n.type', 'ed_cluster')
    ->addTag('node_access')
    ->orderBy('created', 'DESC')
    ->limit(ed_get_paging_nr());
  $nids = $query->execute()->fetchCol();
  return $nids;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function ed_cluster_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => "1");
  }
}

/**
 * Implements hooks_views_api().
 */
function ed_cluster_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ed_cluster') . '/includes/views',
  );
}
