<?php

/**
 * @file
 * Cluster module.
 */

define('ED_FIELD_PRIVATE_COMMENT', 'ed_field_private_comment');

define('ED_FIELD_TO_GROUP_MEMBER', 'ed_field_to_group_member');

define('ED_ACCESS_REALM', 'ed_access');

/**
 * Implements hook_menu().
 */
function ed_cluster_menu() {
  $items['node/%node/tasks'] = array(
    'title' => t('Tasks'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'ed_task_listing_for_students',
    'access callback' => 'ed_task_listing_for_students_access',
    'page arguments' => array('node', 1),
    'access arguments' => array('node', 1),
    'weight' => 55,
  );
  $items['clusters'] = array(
    'title' => t('Groups'),
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'ed_all_groups_listing', //ed_all_groups_listing
    'access callback' => TRUE,
    'weight' => 20,
    'menu_name' => 'main-menu',    
  );
  $items['clusters/groups'] = array(
    'title' => t('All Groups'),    
    'type' => MENU_DEFAULT_LOCAL_TASK,
    //'page callback' => 'ed_all_groups_listing',
    'access callback' => TRUE,
    'weight' => 5,
  );
  $items['clusters/mygroups'] = array(
    'title' => t('My Groups'),    
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'user_is_logged_in',
    'page callback' => 'ed_cluster_my_listing_page',
    'weight' => 0,
  );
  $items['clusters/inactivegroups'] = array(
      'title' => t('Inactive Groups'),
      'type' => MENU_LOCAL_TASK,
      'access callback' => 'user_is_logged_in',
      'page callback' => 'ed_cluster_my_inactive_listing_page',
      'weight' => 9,
  );
  $items['clusters/searchgroup'] = array(
    'title' => t('Search for a group'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => TRUE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ed_cluster_search_page'),
    'weight' => 10,
  );
  $items['node/%node/task-manager'] = array(
    'title' => t('Task Manager'),
    'page callback' => 'ed_task_manager',    
    'access callback' => 'ed_task_manager_access',
    'page arguments' => array('node', 1),
    'access arguments' => array('node', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['node/%node/q_portfolio'] = array(
      'title' => t('Qualification Portfolio'),
      'page callback' => 'ed_listing_from_group',
      'access callback' => 'ed_group_assessors_ed_q_portfolio_listing_access',
      'page arguments' => array('node', 1, 'ed_q_portfolio'),
      'access arguments' => array('node', 1, 'ed_q_portfolio'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 3,
  );
  $items['node/%node/news'] = array(
    'title' => t('News'),
    'page callback' => 'ed_listing_from_group',    
    'access callback' => 'ed_group_content_listing_access',    
    'page arguments' => array('node', 1, 'ed_news'),
    'access arguments' => array('node', 1, 'ed_news'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['node/%node/event'] = array(
    'title' => t('Events'),
    'page callback' => 'ed_listing_from_group',    
    'access callback' => 'ed_group_content_listing_access',    
    'page arguments' => array('node', 1, 'ed_event'),
    'access arguments' => array('node', 1, 'ed_event'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['node/%node/subgroups'] = array(
    'title' => t('Subgroups'),
    'page callback' => 'ed_subgroup_listing_from_group',    
    'access callback' => 'ed_group_content_listing_access',    
    'page arguments' => array('node', 1, 'ed_subgroup'),
    'access arguments' => array('node', 1, 'ed_subgroup'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['node/%node/ajax/get/events'] = array(
    'page callback' => 'ed_cluster_get_group_events_ajax',
    'access callback' => 'ed_group_content_listing_access',
    'page arguments' => array(1),
    'access arguments' => array('node', 1, 'ed_event'),
    'type' => MENU_CALLBACK,
    'file' => 'ed_cluster.pages.inc',
  );
  $items['node/%node/blog'] = array(
    'title' => t('Posts'),
    'page callback' => 'ed_listing_from_group',
    'access callback' => 'ed_group_content_listing_access',
    'page arguments' => array('node', 1, 'ed_blog'),
    'access arguments' => array('node', 1, 'ed_blog'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['node/%node/learning-resource'] = array(
    'title' => t('Learning Resources'),
    'page callback' => 'ed_listing_from_group',    
    'access callback' => 'ed_group_content_listing_access',    
    'page arguments' => array('node', 1, 'ed_learning_resource'),
    'access arguments' => array('node', 1, 'ed_learning_resource'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['node/%node/forum'] = array(
    'title' => t('Discussion Board'),
    'page callback' => 'ed_listing_from_group',    
    'access callback' => 'ed_group_content_listing_access',    
    'page arguments' => array('node', 1, 'ed_forum'),
    'access arguments' => array('node', 1, 'ed_forum'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  
  $items['node/%node/bookmark'] = array(
    'title' => t('Bookmarks'),
    'page callback' => 'ed_listing_from_group',
    'access callback' => 'ed_group_content_listing_access',
    'page arguments' => array('node', 1, 'ed_bookmark'),
    'access arguments' => array('node', 1, 'ed_bookmark'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['node/%node/file'] = array(
    'title' => t('Files'),
    'page callback' => 'ed_listing_from_group',
    'access callback' => 'ed_group_content_listing_access',
    'page arguments' => array('node', 1, 'ed_file'),
    'access arguments' => array('node', 1, 'ed_file'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['clusters/get/groups_members'] = array(
    'page callback' => 'ed_cluster_get_groups_members_ajax',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  $items['dashboard/shared'] = array(
    'title' => t('Shared with me'),
    'page callback' => 'ed_cluster_to_group_member_page',
    'access callback' => 'user_is_logged_in',
    'file' => 'ed_cluster.pages.inc',
    'weight' => 25,
    'menu_name' => 'ed-dashboard-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['clusters/user/autocomplete'] = array(
    'title' => 'User autocomplete',
    'page callback' => 'ed_cluster_user_autocomplete',
    'access callback' => 'user_access',
    'access arguments' => array('access user profiles'),
    'type' => MENU_CALLBACK,
    'file' => 'ed_cluster.pages.inc',
  );

  return $items;
}

function ed_subgroup_listing_from_group($filler, $gnode, $type){
  
  
  
  
  
  $content = array();
  $content['sorting'] = drupal_get_form('_ed_get_sorting_options');
  $sql_order = ed_get_sorting_type($content);
  $l_options = array(
    'attributes' => array(),
    'query' => array(
      'og_group_ref' => $gnode->nid,
      'destination' => _ed_cluster_destination_for_group_node_type($gnode, 'ed_subgroup'),
    ),
  );
  
  if(node_access('create', 'ed_subgroup')){
    $content['add-new'] = array(
      '#type' => 'link',
      '#title' => t('Add new subgroup'),
      '#href' => 'node/add/ed-subgroup',
      '#prefix' => '<div class="ed-add-new-node ed-add-new-subgroup">',
      '#suffix' => '</div>',
      '#options' => $l_options,
    );
  }
  drupal_add_css(drupal_get_path('module', 'ed_cluster').'/group-listing.css');
  $subgroup_nids = ed_cluster_get_subgroups($sql_order, $gnode->nid);  
  $nodes = node_load_multiple($subgroup_nids);
  $nodeschunked = array_chunk($nodes, 4);
  
  $lastchunk = end($nodeschunked);

  if($lastchunk && count($lastchunk<4)){
      foreach(range(1, 4-count($lastchunk))as $i){
        $x = new stdClass();
        array_push($lastchunk, $x);
      }
    }
    $nodeschunked[count($nodeschunked)-1] = $lastchunk;           
    $counter = 1;
    foreach($nodeschunked as $nodeschunk){      
      $build['row-'.$counter] = array(
        '#type' => 'markup',
        '#prefix' => '<div class="row" id="row-'.$counter.'">',
        '#suffix' => '</div>',
      );
      for($i=0;$i<count($nodeschunk);$i++){
        if(isset($nodeschunk[$i]->nid)){
        
          $query = new EntityFieldQuery();
          $query->entityCondition('entity_type', 'user')
              ->fieldCondition('og_user_node', 'target_id', $nodeschunk[$i]->nid, '=');
          $results = $query->execute();
          $uids = array_keys($results['user']);
          $groupnode = node_load($nodeschunk[$i]->nid);
          $groupadmins = _ed_cluster_get_group_admins($groupnode, TRUE);
          $adminimages = array();
          foreach($groupadmins as $groupadmin){
            $admin = user_load($groupadmin);
            if($admin->picture){
              $adminimages[] =l('<img src="'.image_style_url('thumbnail', $admin->picture->uri).'" title="'.$admin->ed_field_full_name[LANGUAGE_NONE][0]['safe_value'].'" />', 'user/'.$admin->uid, array('html' => TRUE));
            }else{
              $adminimages[] =l('<img src="'.$GLOBALS['base_url'].'/'.path_to_theme().'/images/user_icon_default.png" title="'.$admin->ed_field_full_name[LANGUAGE_NONE][0]['safe_value'].'"/>', 'user/'.$admin->uid, array('html' => TRUE));
            }
          }
          if($nodeschunk[$i]->group_access[LANGUAGE_NONE][0]['value']){
            $title = l($nodeschunk[$i]->title, 'node/'.$nodeschunk[$i]->nid).' <p class="private-group-title">'.t('Private Group').'</p>';
          }else{
            $title = l($nodeschunk[$i]->title, 'node/'.$nodeschunk[$i]->nid);
          }
          $build['row-'.$counter][$i] = array(
            '#type' => 'markup',          
            '#prefix' => '<div class="span3 group-div-outer">',
            '#suffix' => '</div>',
          );
          $build['row-'.$counter][$i]['top'] = array(
            '#type' => 'markup',
            '#prefix' => '<div class="group-div-top">',
            '#suffix' => '</div>',
          );
          $build['row-'.$counter][$i]['top']['top-top'] = array(
            '#type' => 'markup',
            '#prefix' => '<div class="group-div-top-cover">',
            '#markup' => !empty($nodeschunk[$i]->ed_field_featured_image) ? l('<img src="'.image_style_url('medium', $nodeschunk[$i]->ed_field_featured_image[LANGUAGE_NONE][0]['uri']).'">', 'node/'.$nodeschunk[$i]->nid, array('html' => TRUE)):l('<img src="'.$GLOBALS['base_url'].'/'.path_to_theme().'/images/icons/ed_group_icon_default.png">', 'node/'.$nodeschunk[$i]->nid, array('html' => true)),
            '#suffix' => '</div>',
          );
          $build['row-'.$counter][$i]['top']['top-bottom'] = array(
            '#type' => 'markup',
            '#prefix' => '<div class="group-div-top-title">',
            '#markup' => $title,
            '#suffix' => '</div>',
          );
          $build['row-'.$counter][$i]['bottom'] = array(
            '#type' => 'markup',          
            '#prefix' => '<div class="row group-div-bottom">',
            '#suffix' => '</div>',
          );
          $build['row-'.$counter][$i]['bottom']['bottom-left'] = array(
            '#type' => 'markup',          
            '#prefix' => '<div class="span9 group-div-bottom-left">',
            '#markup' => implode(' ', $adminimages),
            '#suffix' => '</div>',
          );
          $build['row-'.$counter][$i]['bottom']['bottom-right'] = array(
            '#type' => 'markup',          
            
            '#suffix' => '</div>',
          );
          //If user is not a member of that group:
          if(og_is_member('node', $nodeschunk[$i]->nid, 'user')){
            $build['row-'.$counter][$i]['bottom']['bottom-right']['#prefix'] = '<div class="span3 group-div-bottom-right label label-success">';
            $build['row-'.$counter][$i]['bottom']['bottom-right']['#markup'] = l(t('Join'),'group/node/'.$nodeschunk[$i]->nid.'/subscribe/og_user_node');
          }else{
            
            $build['row-'.$counter][$i]['bottom']['bottom-right']['#prefix'] = '<div class="span3 group-div-bottom-right label label-important">';
            $build['row-'.$counter][$i]['bottom']['bottom-right']['#markup'] = l(t('Leave'),'group/node/'.$nodeschunk[$i]->nid.'/unsubscribe');
          }
          
          //If user is a member of that group:
          
        }
      }
      $counter++;
    }
        
    $content['clusters'] = $build;
    $content['pager'] = array(
      '#theme' => 'pager',
    );
  
  
  
  
  
  return $content;
}


function ed_cluster_search_page($form, &$form_state){
  $searchstring = isset($_GET['search_term']) ? $_GET['search_term'] : '';
  $form['form_container'] = array(
    '#type' => 'container',
    '#attributes' => array(   
      'class' => array('container-inline'),
    ),
  );
  $form['form_container']['label'] = array(
    '#type' => 'markup',
    '#markup' => t('Group name: '),
  );
  $form['form_container']['textfield'] = array(
    '#type' => 'textfield',
    '#value' => $searchstring,
    '#size' => 60,
  );
  $form['form_container']['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#attributes' => array(
      'class' => array('btn-primary'),
    ),
  );
  $form['#submit'][] = 'ed_cluster_cluster_search_submit_handler';
  
  if( $searchstring!=''){
   
    $nids = _ed_cluster_search_for_clusters($searchstring);
    if(empty($nids)){
      $form['listing'] = array(
        '#type' => 'markup',
        '#markup' => t('<b><i> @querystring </i></b>did not return any results', array('@querystring' => $searchstring)),
        '#prefix' => '<div class="search-no-results alert alert-error">',
        '#suffix' => '</div>',
      );
    }else{
      drupal_add_css(drupal_get_path('module', 'ed_cluster').'/group-listing.css');
      $nodes = node_load_multiple($nids);
      $nodeschunked = array_chunk($nodes, 4);    
      $lastchunk = end($nodeschunked);

      if(count($lastchunk)<4){
        foreach(range(1, 4-count($lastchunk))as $i){
          $x = new stdClass();
          array_push($lastchunk, $x);
        }
      }
      
      $nodeschunked[count($nodeschunked)-1] = $lastchunk;           
      $counter = 1;
      
      foreach($nodeschunked as $nodeschunk){      
        $build['row-'.$counter] = array(
          '#type' => 'markup',
          '#prefix' => '<div class="row" id="row-'.$counter.'">',
          '#suffix' => '</div>',
        );
        for($i=0;$i<count($nodeschunk);$i++){
          if(isset($nodeschunk[$i]->nid)){

          $query = new EntityFieldQuery();
          $query->entityCondition('entity_type', 'user')
              ->fieldCondition('og_user_node', 'target_id', $nodeschunk[$i]->nid, '=');
          $results = $query->execute();
          $uids = array_keys($results['user']);
          $groupnode = node_load($nodeschunk[$i]->nid);
          $groupadmins = _ed_cluster_get_group_admins($groupnode, TRUE);
          $adminimages = array();
          foreach($groupadmins as $groupadmin){
            $admin = user_load($groupadmin);
            if($admin->picture){
              $adminimages[] =l('<img src="'.image_style_url('thumbnail', $admin->picture->uri).'" title="'.$admin->ed_field_full_name[LANGUAGE_NONE][0]['safe_value'].'" />', 'user/'.$admin->uid, array('html' => TRUE));
            }else{
              $adminimages[] =l('<img src="'.$GLOBALS['base_url'].'/'.path_to_theme().'/images/user_icon_default.png" title="'.$admin->ed_field_full_name[LANGUAGE_NONE][0]['safe_value'].'"/>', 'user/'.$admin->uid, array('html' => TRUE));
            }
          }
          if($nodeschunk[$i]->group_access[LANGUAGE_NONE][0]['value']){
            $title = l($nodeschunk[$i]->title, 'node/'.$nodeschunk[$i]->nid).' <p class="private-group-title">'.t('Private Group').'</p>';
          }else{
            $title = l($nodeschunk[$i]->title, 'node/'.$nodeschunk[$i]->nid);
          }
          $build['row-'.$counter][$i] = array(
            '#type' => 'markup',          
            '#prefix' => '<div class="span3 group-div-outer">',
            '#suffix' => '</div>',
          );
          $build['row-'.$counter][$i]['top'] = array(
            '#type' => 'markup',
            '#prefix' => '<div class="group-div-top">',
            '#suffix' => '</div>',
          );
          $build['row-'.$counter][$i]['top']['top-top'] = array(
            '#type' => 'markup',
            '#prefix' => '<div class="group-div-top-cover">',
            '#markup' => !empty($nodeschunk[$i]->ed_field_featured_image) ? l('<img src="'.image_style_url('medium', $nodeschunk[$i]->ed_field_featured_image[LANGUAGE_NONE][0]['uri']).'">', 'node/'.$nodeschunk[$i]->nid, array('html' => TRUE)):l('<img src="'.$GLOBALS['base_url'].'/'.path_to_theme().'/images/icons/ed_group_icon_default.png">', 'node/'.$nodeschunk[$i]->nid, array('html' => true)),
            '#suffix' => '</div>',
          );
          $build['row-'.$counter][$i]['top']['top-bottom'] = array(
            '#type' => 'markup',
            '#prefix' => '<div class="group-div-top-title">',
            '#markup' => $title,
            '#suffix' => '</div>',
          );
          $build['row-'.$counter][$i]['bottom'] = array(
            '#type' => 'markup',          
            '#prefix' => '<div class="row group-div-bottom">',
            '#suffix' => '</div>',
          );
          $build['row-'.$counter][$i]['bottom']['bottom-left'] = array(
            '#type' => 'markup',          
            '#prefix' => '<div class="span9 group-div-bottom-left">',
            '#markup' => implode(' ', $adminimages),
            '#suffix' => '</div>',
          );
          $build['row-'.$counter][$i]['bottom']['bottom-right'] = array(
            '#type' => 'markup',          
            '#prefix' => '<div class="span5 group-div-bottom-right label label-success">',
            '#markup' => l(t('Join'),'group/node/'.$nodeschunk[$i]->nid.'/subscribe/og_user_node'),
            '#suffix' => '</div>',
          );
          }
        }
        $counter++;
      }
      $form['listing'] = $build;
      $form['pager'] = array(
        '#theme' => 'pager',
      );
      
    }
  }else{
    $form['listing'] = ed_all_groups_listing();
    drupal_set_title(t('Search for a group'));
    unset($form['listing']['sorting']);
    unset($form['listing']['add-new']);
  }
  
  return $form;
}

function ed_cluster_cluster_search_submit_handler($form, &$form_state){
  $form_state['rebuild'] = TRUE;
  $searchstring = $form_state['input']['textfield'];
  
  drupal_goto(current_path(),array('query' => array('search_term' => $searchstring)));
}

function ed_task_listing_for_students_access($test, $node){
  $tasknids = _ed_get_group_tasks_for_group_task_page($node->nid);
  if(empty($tasknids)){
    return false;
  }
  $account = $GLOBALS['user'];
  if (in_array('administrator', $account->roles)) {
    return false;
  }

  if (in_array('supervisor', $account->roles)) {
    return false;
  }

  if ($node->uid === $account->uid) {
    return false;
  }
  
  if (!in_array(OG_ADMINISTRATOR_ROLE, og_get_user_roles('node', $node->nid, $account->uid, FALSE))) {
    return true;
  }

  return false;
}

function ed_task_listing_for_students($test, $node){
  $content = array();
  drupal_add_css(drupal_get_path('module', 'ed_cluster').'/task_manager.css');
  $tasknids = _ed_get_group_tasks_for_group_task_page($node->nid);


  global $user;


  //Get user study group field
  $wrapper = entity_metadata_wrapper('user', $user->uid);
  $user_study_group = $wrapper->ed_field_study_group->value();

  //Check if these tasks belong to this user study group
  foreach ($tasknids as $key => $tasknid){

    $wrapper = entity_metadata_wrapper('node', $tasknid);
    $task_study_groups = $wrapper->ed_task_field_study_group->raw();

    if(!empty($task_study_groups)){
      if(isset($user_study_group)){

        if(in_array($user_study_group, $task_study_groups) == false){
          unset($tasknids[$key]);
        }

      }else{
        unset($tasknids[$key]);
      }



    }
  }




  $tasknodes = node_load_multiple($tasknids);



  //attach answered data
  foreach($tasknodes as &$tasknode) {
    $answer_nid = _ed_get_answer_nid($user->uid, $tasknode->nid); 
    $tasknode->is_answered = !empty($answer_nid);
    if ($tasknode->is_answered) $tasknode->answer_nid = $answer_nid[0];
    unset($tasknode);
  }; 


  // sort by unanswered first, due date second, created last  
  uasort($tasknodes, function($a, $b) {
      if (!$a->is_answered && $b->is_answered) return -1;
      if (!$b->is_answered && $a->is_answered) return 1;
      $d = $a->ed_task_due_date[LANGUAGE_NONE][0]['value'] - $b->ed_task_due_date[LANGUAGE_NONE][0]['value'];
      if ($d == 0) return $b->created - $a->created;
      return $d;
    });

  $header = array(t('Task'), t('Due Date'), t('Status'));
  
  foreach($tasknodes as $tasknode){
    $titlelink = l($tasknode->title, 'node/'.$tasknode->nid);
    $deadline = format_date($tasknode->ed_task_due_date[LANGUAGE_NONE][0]['value'],'custom','d/m/Y');
    
    $tmp_data = array('data' => '', 'class' => '');

        if ($tasknode->is_answered) {                             
          $status = _ed_check_if_accepted($tasknode->answer_nid);

          if(empty($status)){
            $tmp_data['class'] = 'unchecked';
            $tmp_data['data'] = t('Answered, Unchecked');
            $tmp_data['title'] = t('Unchecked');
          }else{
            $last_status = _ed_last_status($status);
            switch($last_status){
              case('accepted'):
                $tmp_data['class'] = 'answered';
                $tmp_data['data'] = t('Answered, Accepted');
                $tmp_data['title'] = t('Accepted');
              break;
              case('rejected'):
                $tmp_data['class'] = 'rejected';
                $tmp_data['data'] = t('Answered, Rejected');
                $tmp_data['title'] = t('Rejected');                
              break;
              case('unchecked'):
                $tmp_data['class'] = 'unchecked';
                $tmp_data['data'] = t('Answered, Unchecked');
                $tmp_data['title'] = t('Unchecked');
              break;
            }
          }

          $grade = _ed_get_last_grade($tasknode->answer_nid);
          $grade_str = $grade == 0 ? "" : t(', Graded ') . $grade;
          $tmp_data['data'] = l($tmp_data['data'] . $grade_str, 'node/' . $tasknode->answer_nid, array('html' => TRUE));
          
        } else {

          $tmp_data['class'] = 'unanswered';
          $tmp_data['data'] = t('Not Answered');
          $tmp_data['title'] = t('Not answered');

          //Check if it is a study group case
          $wrapper = entity_metadata_wrapper('node', $tasknode->nid);
          $task_study_groups = $wrapper->ed_task_field_study_group->raw();


          if(!empty($task_study_groups)){

            $tasks_to_user = _ed_get_tasks_to_user();
            $is_to_user_task = false;
            foreach ($tasks_to_user as $task_to_user){
              if($task_to_user->nid == $tasknode->nid){
                $is_to_user_task=true;
              }
            }


            if(!$is_to_user_task){
              //Get user study group field
              $wrapper = entity_metadata_wrapper('user', $user->uid);
              $user_study_group = $wrapper->ed_field_study_group->value();


              if(isset($user_study_group)){
                if(in_array($user_study_group, $task_study_groups) == false ){
                  $tmp_data['class'] = 'na';
                  $tmp_data['title'] = t('Not applicable');
                }

              }else{
                $tmp_data['class'] = 'na';
                $tmp_data['title'] = t('Not applicable');
              }

            }

          }


          if (!empty($tasknode->{ED_FIELD_TO_GROUP_MEMBER}[LANGUAGE_NONE])) {
            if (!in_array($user->uid, array_map(function($element) { return $element['target_id']; }, $tasknode->{ED_FIELD_TO_GROUP_MEMBER}[LANGUAGE_NONE]))) {
              $tmp_data['class'] = 'can-not-be-answered';
              $tmp_data['data'] = t('Can not be answered');
              $tmp_data['title'] = t('Can not be answered');
            }
          }
        }
        
        
        
    $rows[] = array(
      'data' => array(
        'title' => $titlelink,
        'deadline' => $deadline,
        'status' => $tmp_data,
      ),
    );
    
  }

  $content['tasks-table'] = array(
        '#theme' => 'table',
        '#rows' => $rows,
        '#header' => $header,
      );
  $content['pager'] = array('#theme' => 'pager');
  return $content;
}

function ed_cluster_my_listing_page() {
  $content = array();
  $mygroups = og_get_entity_groups();
  drupal_set_title(t('My Groups A-Z'));
  
  if(empty($mygroups)){
    $content['groups-not-found'] = array(
      '#type' => 'markup',
      '#prefix' => '<div class="ed-message ed-message-notice">',
      '#markup' => t('Hi! Nothing to show here at the moment. Join some groups to see them here.'),
      '#suffix' => '</div>',
    );
    if(node_access('create', 'ed_cluster')){
      $content['add-new'] = array(
        '#type' => 'link',
        '#title' => t('Add new group'),
        '#href' => 'node/add/ed-cluster',
        '#prefix' => '<div class="ed-add-new-node ed-add-new-cluster">',
        '#suffix' => '</div>',
      );
    }
    return $content;
  }else{    
    if(node_access('create', 'ed_cluster')){
      $content['add-new'] = array(
        '#type' => 'link',
        '#title' => t('Add new group'),
        '#href' => 'node/add/ed-cluster',
        '#prefix' => '<div class="ed-add-new-node ed-add-new-cluster">',
        '#suffix' => '</div>',
      );
    }
    $mygroups = $mygroups['node'];
    
    $mygroupallnodes = node_load_multiple($mygroups);
    
    foreach($mygroupallnodes as $key => $value){
      if($value->type != 'ed_cluster'){
        unset($mygroupallnodes[$key]);
      }

    }
    //Sort groups by their state and then alphabetically by title
    uasort($mygroupallnodes, function($a, $b){
      if($a->ed_field_group_state[LANGUAGE_NONE][0] == $b->ed_field_group_state[LANGUAGE_NONE][0]){
        return (strncasecmp(trim($a->title), trim($b->title), 15));
      }
      return ($a->ed_field_group_state[LANGUAGE_NONE][0] < $b->ed_field_group_state[LANGUAGE_NONE][0]);
    });
    
//    uasort($mygroupallnodes, function($a, $b){
//      return strncasecmp(trim($a->title), trim($b->title), 15);
//    });

    $nids = array();
    foreach($mygroupallnodes as $mygroupnode){
      $nids[] = $mygroupnode->nid;
    }
    $mygroups = $nids;
    drupal_add_css(drupal_get_path('module', 'ed_cluster').'/group-listing.css');
    $per_page = ed_get_grid_paging_nr();
    $current_page = pager_default_initialize(count($mygroups), $per_page, 1);
    $chunks = array_chunk($mygroups, $per_page, TRUE);
    $nidsinpage = $chunks[$current_page];
    $nodes = node_load_multiple($nidsinpage);
    $nodeschunked = array_chunk($nodes, 4);
    $counter = 1;
    foreach($nodeschunked as $nodeschunk){
      $build['row-'.$counter] = array(
        '#type' => 'markup',
        '#prefix' => '<div class="row">',
        '#suffix' => '</div>',
      );
      for($i=0;$i<count($nodeschunk);$i++){
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'user')
            ->fieldCondition('og_user_node', 'target_id', $nodeschunk[$i]->nid, '=');
        $results = $query->execute();
        $uids = array_keys($results['user']);
        $groupnode = node_load($nodeschunk[$i]->nid);
        $groupadmins = _ed_cluster_get_group_admins($groupnode, TRUE);
        $adminimages = array();
        foreach($groupadmins as $groupadmin){
          $admin = user_load($groupadmin);
          if($admin->picture){            
            $adminimages[] =l('<img src="'.image_style_url('thumbnail', $admin->picture->uri).'" title="'.$admin->ed_field_full_name[LANGUAGE_NONE][0]['safe_value'].'" />', 'user/'.$admin->uid, array('html' => TRUE));
          }else{
            $adminimages[] =l('<img src="'.$GLOBALS['base_url'].'/'.path_to_theme().'/images/user_icon_default.png" title="'.$admin->ed_field_full_name[LANGUAGE_NONE][0]['safe_value'].'"/>', 'user/'.$admin->uid, array('html' => TRUE));
          }         
        }
        if($nodeschunk[$i]->group_access[LANGUAGE_NONE][0]['value']){
          $title = l($nodeschunk[$i]->title, 'node/'.$nodeschunk[$i]->nid).' <p class="private-group-title">'.t('Private Group').'</p>';
        }else{
          $title = l($nodeschunk[$i]->title, 'node/'.$nodeschunk[$i]->nid);
        }
        //Grey out inactive groups
        if($nodeschunk[$i]->ed_field_group_state[LANGUAGE_NONE][0]['value']==0) {
          $build['row-' . $counter][$i] = array(
              '#type' => 'markup',
              '#prefix' => '<div class="span3 group-div-outer ed_mygroup_inactive">',
              '#suffix' => '</div>',
          );
          $build['row-' . $counter][$i]['top'] = array(
              '#type' => 'markup',
              '#prefix' => '<div class="ed_mygroup_inactive_container"><div class="ed_mygroup_inactive_card" class="shadow"><div class="front face"><div class="group-div-top">',
              '#suffix' => '</div> </div>'.l('<div class="back face center">
                <p class="ed_mygroup_inactive_text">Inactive group</p>
                </div>', 'node/'.$nodeschunk[$i]->nid, array('html' => TRUE)).'
                </div>
                </div>',
          );
        }
        else {
          $build['row-' . $counter][$i] = array(
              '#type' => 'markup',
              '#prefix' => '<div class="span3 group-div-outer">',
              '#suffix' => '</div>',
          );
          $build['row-' . $counter][$i]['top'] = array(
              '#type' => 'markup',
              '#prefix' => '<div class="group-div-top">',
              '#suffix' => '</div>',
          );
        }
        $build['row-'.$counter][$i]['top']['top-top'] = array(
          '#type' => 'markup',
          '#prefix' => '<div class="group-div-top-cover">',
          '#markup' => !empty($nodeschunk[$i]->ed_field_featured_image) ? l('<img src="'.image_style_url('medium', $nodeschunk[$i]->ed_field_featured_image[LANGUAGE_NONE][0]['uri']).'">', 'node/'.$nodeschunk[$i]->nid, array('html' => TRUE)):l('<img src="'.$GLOBALS['base_url'].'/'.path_to_theme().'/images/icons/ed_group_icon_default.png">', 'node/'.$nodeschunk[$i]->nid, array('html' => true)),
          '#suffix' => '</div>',
        );
        $build['row-'.$counter][$i]['top']['top-bottom'] = array(
          '#type' => 'markup',
          '#prefix' => '<div class="group-div-top-title">',
          '#markup' => $title,
          '#suffix' => '</div>',
        );
        $build['row-'.$counter][$i]['bottom'] = array(
          '#type' => 'markup',          
          '#prefix' => '<div class="row group-div-bottom">',
          '#suffix' => '</div>',
        );
        $build['row-'.$counter][$i]['bottom']['bottom-left'] = array(
          '#type' => 'markup',          
          '#prefix' => '<div class="span7 group-div-bottom-left">',
          '#markup' => implode(' ', $adminimages),
          '#suffix' => '</div>',
        );
        $build['row-'.$counter][$i]['bottom']['bottom-right'] = array(
          '#type' => 'markup',          
          '#prefix' => '<div class="span5 group-div-bottom-right label label-important">',
          '#markup' => l(t('Leave'),'group/node/'.$nodeschunk[$i]->nid.'/unsubscribe'),
          '#suffix' => '</div>',
        );
      }
      $counter++;
    }
    
    $build['pager'] = array(
      '#theme' => 'pager',
      '#element' => 1,
      );
    //dpm($chunks);
    $content['clusters'] = $build;
    
    return $content;

  }  
}


function ed_all_groups_listing(){
  drupal_set_title(t('All Groups'));
  $content = array();
  $content['sorting'] = drupal_get_form('_ed_get_sorting_options');
  $sql_order = ed_get_sorting_type($content);
  if(node_access('create', 'ed_cluster')){
      $content['add-new'] = array(
        '#type' => 'link',
        '#title' => t('Add new group'),
        '#href' => 'node/add/ed-cluster',
        '#prefix' => '<div class="ed-add-new-node ed-add-new-cluster">',
        '#suffix' => '</div>',
      );
    }
  drupal_add_css(drupal_get_path('module', 'ed_cluster').'/group-listing.css');
  $remove_user_groups = TRUE;
  $og_groups = ed_cluster_get_clusters($sql_order, $remove_user_groups, false);
  if (!empty($og_groups)) {
    $nodes = node_load_multiple($og_groups);

    $nodeschunked = array_chunk($nodes, 4);    

    $lastchunk = end($nodeschunked);
  
    if(count($lastchunk<4)){
      foreach(range(1, 4-count($lastchunk))as $i){
        $x = new stdClass();
        array_push($lastchunk, $x);
      }
    }
    $nodeschunked[count($nodeschunked)-1] = $lastchunk;           
    $counter = 1;
    foreach($nodeschunked as $nodeschunk){

      $build['row-'.$counter] = array(
        '#type' => 'markup',
        '#prefix' => '<div class="row" id="row-'.$counter.'">',
        '#suffix' => '</div>',
      );
      for($i=0;$i<count($nodeschunk);$i++){
        if(isset($nodeschunk[$i]->nid)){
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'user')
            ->fieldCondition('og_user_node', 'target_id', $nodeschunk[$i]->nid, '=');
        $results = $query->execute();
        $uids = array_keys($results['user']);
        $groupnode = node_load($nodeschunk[$i]->nid);
        $groupadmins = _ed_cluster_get_group_admins($groupnode, TRUE);
        $adminimages = array();
        foreach($groupadmins as $groupadmin){
          $admin = user_load($groupadmin);
          if($admin->picture){
            $adminimages[] =l('<img src="'.image_style_url('thumbnail', $admin->picture->uri).'" title="'.$admin->ed_field_full_name[LANGUAGE_NONE][0]['safe_value'].'" />', 'user/'.$admin->uid, array('html' => TRUE));
          }else{
            $adminimages[] =l('<img src="'.$GLOBALS['base_url'].'/'.path_to_theme().'/images/user_icon_default.png" title="'.$admin->ed_field_full_name[LANGUAGE_NONE][0]['safe_value'].'"/>', 'user/'.$admin->uid, array('html' => TRUE));
          }
        }
        if($nodeschunk[$i]->group_access[LANGUAGE_NONE][0]['value']){
          $title = l($nodeschunk[$i]->title, 'node/'.$nodeschunk[$i]->nid).' <p class="private-group-title">'.t('Private Group').'</p>';
        }else{
          $title = l($nodeschunk[$i]->title, 'node/'.$nodeschunk[$i]->nid);
        }
        $build['row-'.$counter][$i] = array(
          '#type' => 'markup',          
          '#prefix' => '<div class="span3 group-div-outer">',
          '#suffix' => '</div>',
        );
        $build['row-'.$counter][$i]['top'] = array(
          '#type' => 'markup',
          '#prefix' => '<div class="group-div-top">',
          '#suffix' => '</div>',
        );
        $build['row-'.$counter][$i]['top']['top-top'] = array(
          '#type' => 'markup',
          '#prefix' => '<div class="group-div-top-cover">',
          '#markup' => !empty($nodeschunk[$i]->ed_field_featured_image) ? l('<img src="'.image_style_url('medium', $nodeschunk[$i]->ed_field_featured_image[LANGUAGE_NONE][0]['uri']).'">', 'node/'.$nodeschunk[$i]->nid, array('html' => TRUE)):l('<img src="'.$GLOBALS['base_url'].'/'.path_to_theme().'/images/icons/ed_group_icon_default.png">', 'node/'.$nodeschunk[$i]->nid, array('html' => true)),
          '#suffix' => '</div>',
        );
        $build['row-'.$counter][$i]['top']['top-bottom'] = array(
          '#type' => 'markup',
          '#prefix' => '<div class="group-div-top-title">',
          '#markup' => $title,
          '#suffix' => '</div>',
        );
        $build['row-'.$counter][$i]['bottom'] = array(
          '#type' => 'markup',          
          '#prefix' => '<div class="row group-div-bottom">',
          '#suffix' => '</div>',
        );
        $build['row-'.$counter][$i]['bottom']['bottom-left'] = array(
          '#type' => 'markup',          
          '#prefix' => '<div class="span7 group-div-bottom-left">',
          '#markup' => implode(' ', $adminimages),
          '#suffix' => '</div>',
        );
        if($nodeschunk[$i]->ed_field_group_state[LANGUAGE_NONE][0]['value']){
          $build['row-' . $counter][$i]['bottom']['bottom-right'] = array(
              '#type' => 'markup',
              '#prefix' => '<div class="span5 group-div-bottom-right label label-success">',
              '#markup' => l(t('Join'), 'group/node/' . $nodeschunk[$i]->nid . '/subscribe/og_user_node'),
              '#suffix' => '</div>',
          );
        }

      }
      }
      $counter++;
    }
    $content['clusters'] = $build;
    $content['pager'] = array(
      '#theme' => 'pager',
    );
    
  }
  return $content;
}


function ed_cluster_my_inactive_listing_page(){
  drupal_set_title(t('Inactive Groups'));
  $content = array();
  $content['sorting'] = drupal_get_form('_ed_get_sorting_options');
  $sql_order = ed_get_sorting_type($content);
  if(node_access('create', 'ed_cluster')){
    $content['add-new'] = array(
        '#type' => 'link',
        '#title' => t('Add new group'),
        '#href' => 'node/add/ed-cluster',
        '#prefix' => '<div class="ed-add-new-node ed-add-new-cluster">',
        '#suffix' => '</div>',
    );
  }
  drupal_add_css(drupal_get_path('module', 'ed_cluster').'/group-listing.css');
  $remove_user_groups = TRUE;
  $og_groups = ed_cluster_get_clusters($sql_order, $remove_user_groups, true);
  if (!empty($og_groups)) {
    $nodes = node_load_multiple($og_groups);



    $nodeschunked = array_chunk($nodes, 4);


    $lastchunk = end($nodeschunked);

    if(count($lastchunk<4)){
      foreach(range(1, 4-count($lastchunk))as $i){
        $x = new stdClass();
        array_push($lastchunk, $x);
      }
    }
    $nodeschunked[count($nodeschunked)-1] = $lastchunk;
    $counter = 1;
    foreach($nodeschunked as $nodeschunk){
      $build['row-'.$counter] = array(
          '#type' => 'markup',
          '#prefix' => '<div class="row" id="row-'.$counter.'">',
          '#suffix' => '</div>',
      );

      for($i=0;$i<count($nodeschunk);$i++){
        if(isset($nodeschunk[$i]->nid)){
            $query = new EntityFieldQuery();
            $query->entityCondition('entity_type', 'user')
                ->fieldCondition('og_user_node', 'target_id', $nodeschunk[$i]->nid, '=');
            $results = $query->execute();
            $uids = array_keys($results['user']);
            $groupnode = node_load($nodeschunk[$i]->nid);
            $groupadmins = _ed_cluster_get_group_admins($groupnode, TRUE);
            $adminimages = array();
            foreach ($groupadmins as $groupadmin) {
              $admin = user_load($groupadmin);
              if ($admin->picture) {
                $adminimages[] = l('<img src="' . image_style_url('thumbnail', $admin->picture->uri) . '" title="' . $admin->ed_field_full_name[LANGUAGE_NONE][0]['safe_value'] . '" />', 'user/' . $admin->uid, array('html' => TRUE));
              } else {
                $adminimages[] = l('<img src="' . $GLOBALS['base_url'] . '/' . path_to_theme() . '/images/user_icon_default.png" title="' . $admin->ed_field_full_name[LANGUAGE_NONE][0]['safe_value'] . '"/>', 'user/' . $admin->uid, array('html' => TRUE));
              }
            }

            if ($nodeschunk[$i]->group_access[LANGUAGE_NONE][0]['value']) {
              $title = l($nodeschunk[$i]->title, 'node/' . $nodeschunk[$i]->nid) . ' <p class="private-group-title">' . t('Private Group') . '</p>';
            } else {
              $title = l($nodeschunk[$i]->title, 'node/' . $nodeschunk[$i]->nid);
            }
            $build['row-' . $counter][$i] = array(
                '#type' => 'markup',
                '#prefix' => '<div class="span3 group-div-outer">',
                '#suffix' => '</div>',
            );
            $build['row-' . $counter][$i]['top'] = array(
                '#type' => 'markup',
                '#prefix' => '<div class="group-div-top">',
                '#suffix' => '</div>',
            );
            $build['row-' . $counter][$i]['top']['top-top'] = array(
                '#type' => 'markup',
                '#prefix' => '<div class="group-div-top-cover">',
                '#markup' => !empty($nodeschunk[$i]->ed_field_featured_image) ? l('<img src="' . image_style_url('medium', $nodeschunk[$i]->ed_field_featured_image[LANGUAGE_NONE][0]['uri']) . '">', 'node/' . $nodeschunk[$i]->nid, array('html' => TRUE)) : l('<img src="' . $GLOBALS['base_url'] . '/' . path_to_theme() . '/images/icons/ed_group_icon_default.png">', 'node/' . $nodeschunk[$i]->nid, array('html' => true)),
                '#suffix' => '</div>',
            );
            $build['row-' . $counter][$i]['top']['top-bottom'] = array(
                '#type' => 'markup',
                '#prefix' => '<div class="group-div-top-title">',
                '#markup' => $title,
                '#suffix' => '</div>',
            );
            $build['row-' . $counter][$i]['bottom'] = array(
                '#type' => 'markup',
                '#prefix' => '<div class="row group-div-bottom">',
                '#suffix' => '</div>',
            );
            $build['row-' . $counter][$i]['bottom']['bottom-left'] = array(
                '#type' => 'markup',
                '#prefix' => '<div class="span9 group-div-bottom-left">',
                '#markup' => implode(' ', $adminimages),
                '#suffix' => '</div>',
            );

          //Inactive group
//            $build['row-' . $counter][$i]['bottom']['bottom-right'] = array(
//                '#type' => 'markup',
//                '#prefix' => '<div class="span3 group-div-bottom-right label label-success">',
//                '#markup' => l(t('Join'), 'group/node/' . $nodeschunk[$i]->nid . '/subscribe/og_user_node'),
//                '#suffix' => '</div>',
//            );



        }
      }
      $counter++;

    }
    $content['clusters'] = $build;
    $content['pager'] = array(
        '#theme' => 'pager',
    );

  }
  return $content;
}


/**
 * Implements hook_menu_alter().
 */
function ed_cluster_menu_alter(&$items) {
  if (isset($items['node/%/group'])) {
    $items['node/%/group']['title callback'] = '_ed_cluster_group_menu_title';
    $items['node/%/group']['title arguments'] = array('node', 1);
  }
}

function ed_cluster_og_ui_get_group_admin_alter(&$data, $gid){
  global $user;
  if (!in_array('administrator', $user->roles)) {
    unset($data['roles']);
    unset($data['permissions']);
  }
}


function ed_group_content_listing_access($filler, $gnode, $type){
  $is_group = _ed_is_nid_group($gnode->nid);

  if($gnode->type=='ed_subgroup'&&$type=='ed_subgroup'){
    return false;
  }

  return $is_group;
}

/*
 * Check if this is group Hindajad and enable Qualifications Portfolio tab
 */
function ed_group_assessors_ed_q_portfolio_listing_access($filler, $gnode, $type){
  $is_group = _ed_is_nid_group($gnode->nid);

  if($gnode->type=='ed_subgroup'&&$type=='ed_subgroup'){
    return false;
  }

  if(!($gnode->title=='Hindajad')){
    $is_group = false;
  }

  return $is_group;
}

function ed_listing_from_group($filler, $gnode, $type){  
  menu_tree_set_path('main-menu', 'clusters');

  // Add settings used for group events calendar
  if ('ed_event' == $type) {
    drupal_add_js(array(
      'edidaktikum' => array(
        'ed_cluster_group_events_ajax_url' => "node/{$gnode->nid}/ajax/get/events",
      ),
    ), 'setting');
  }
  
  $content = array();

  if (node_access('create', $type) && og_is_member('node', $gnode->nid)) {
    $destination = _ed_cluster_destination_for_group_node_type($gnode, $type);

    $type_dashed = str_replace('_', '-', $type);
    $content['add-new-container'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('ed-add-new-node', 'ed-add-new-'.$type_dashed),
      ),
    );
    if($type != 'ed_q_portfolio') {
      $content['add-new-container']['add-new-link'] = array(
          '#type' => 'markup',
          '#markup' => l(t('Add new'), 'node/add/' . $type_dashed, array('query' => array('og_group_ref' => $gnode->nid, 'destination' => $destination))),
      );
    }
  }

  // This override will display both ed_blog and ed_answer
  // when blog listing is displayed
  if ('ed_blog' == $type) {
    $type = array($type);
    $type[] = 'ed_answer';
  }
  $nosorting = array('ed_news', 'ed_event', 'ed_forum', 'ed_blog', 'ed_answer', 'ed_q_portfolio');
  if(is_array($type)){
    $content_nids = _ed_get_group_content_by_type($gnode->nid, $type);
  }else{
    if(!in_array($type, $nosorting)){
      $content['sorting'] = drupal_get_form('_ed_get_sorting_options');
      $sql_order = ed_get_sorting_type($content);
      $content_nids = _ed_get_group_content_by_type($gnode->nid, $type, $sql_order);
    }else{
      $content_nids = _ed_get_group_content_by_type($gnode->nid, $type);
    }
  }
  
  //$content_nids = _ed_get_group_content_by_type($gnode->nid, $type);
  $nodes = node_load_multiple($content_nids);
  $build = node_view_multiple($nodes);
  $build['pager'] = array(
    '#theme' => 'pager',
    '#weight' => 5,
  );
  $content['listing'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('ed-group-content-listing'),
    ),
  );
  $content['listing']['content'] = $build;
  
  return $content;
}

/**
 * Implements hook_field_extra_fields().
 */
function ed_cluster_field_extra_fields(){  
  $extra['node']['ed_cluster']['display'] = array(
    'ed_cluster_content' => array(
      'label' => t('Group content paged'),
      'description' => t('desc'),
      'weight' => 10,
    ),
  );
  return $extra;
}

/**
 * Implements hook_preprocess_node().
 */
function ed_cluster_preprocess_node(&$vars) {
  if ('ed_cluster' == $vars['node']->type) {
    if (isset($vars['dashboard']) && TRUE == $vars['dashboard']) {
      $vars['user_picture'] = '';
      $vars['display_submitted'] = FALSE;
      $vars['classes_array'] []= 'node-dashboard';
    }

    if ('teaser' === $vars['view_mode'] && isset($vars['group_access'][LANGUAGE_NONE][0]['value']) && 1 == $vars['group_access'][LANGUAGE_NONE][0]['value']) {
      $vars['classes_array'][] = 'ed-group-private';
    }
  }
}

/**
 * Implements hook_node_view().
 */
function ed_cluster_node_view($node, $view_mode, $langcode){
  switch ($node->type){
    case 'ed_cluster':      
      if($view_mode=='full'){
        menu_tree_set_path('main-menu', 'clusters');
        $content_nids = _ed_get_group_content($node->nid);
        $content = node_load_multiple($content_nids);

        $extracted_study_groups_count = 0;

        // Get rid of unrelated study group tasks
        // User with task manager access sees the same number as in Task Manager (includes the tasks of all the study groups)
        if(!ed_task_manager_access('node', $node)){
          foreach ($content as $key => $content_node){
            if($content_node->type == 'ed_task'){
              if (!empty($content_node->ed_task_field_study_group)) {
                //Get user study group field
                global $user;
                $wrapper = entity_metadata_wrapper('user', $user->uid);
                $user_study_group = $wrapper->ed_field_study_group->value();

                if (isset($user_study_group)) {

                  if(in_array(array('value'=>$user_study_group), $content_node->ed_task_field_study_group[LANGUAGE_NONE]) == false){

                    unset($content[$key]);
                    $extracted_study_groups_count++;

                    //$destination = "node/{$node->nid}/tasks";

                    //$node->content['ed_cluster_content'][$type]['heading']['#markup'] = l(_ed_cluster_plural_title_for_group_node_type($type) . ' (' . t('Total') . ': ' . $type_nodes_count . ')', $destination);
                  }
                } else {
                  unset($content[$key]);
                  $extracted_study_groups_count++;

                  //$destination = "node/{$node->nid}/tasks";

                  //$node->content['ed_cluster_content'][$type]['heading']['#markup'] = l(_ed_cluster_plural_title_for_group_node_type($type) . ' (' . t('Total') . ': ' . $type_nodes_count . ')', $destination);
                }

              }
            }
          }
        }


        $types = array();
        foreach($content as $content_single){        
          $types[] = $content_single->type;
        }
        
        if (in_array('ed_task', $types)) {
          array_unshift($types, 'ed_task');
        }
        $types_unique = array_unique($types);
        $options = array(
          'attributes' => array(),
          'query' => array(
            'og_group_ref' => $node->nid,
            'destination' => 'node/'.$node->nid,
          ),
        );

        // Check if current user is a member of the group
        $is_group_member = og_is_member('node', $node->nid);

        foreach($types_unique as $type) {
          $show_link = true;
          $destination_no_ed_task_manager_access = "";
          if ($type != 'ed_answer' && $type != 'ed_subgroup') {
            if ($type == 'ed_task') {
              if (!ed_task_manager_access('node', $node)) {
                $show_link = false;
                $destination_no_ed_task_manager_access = "node/{$node->nid}/tasks";
              }
            }

            $type_nodes_count = _ed_get_group_content_by_type_count($node->nid, $type);
            //Extract unrelated study groups tasks
            if ($type == 'ed_task'){
              $type_nodes_count = $type_nodes_count - $extracted_study_groups_count;
            }


            $headingmarkup = _ed_cluster_plural_title_for_group_node_type($type) . ' (' . t('Total') . ': ' . $type_nodes_count . ')';
            if ($show_link) {
              $headingmarkup = l($headingmarkup, _ed_cluster_destination_for_group_node_type($node, $type));
            }else{
              $headingmarkup = l($headingmarkup, $destination_no_ed_task_manager_access);
            }

            $node->content['ed_cluster_content'][$type]['heading'] = array(
                '#type' => 'markup',
                '#prefix' => '<h2 class="' . $type . '">',
                '#markup' => $headingmarkup,
                '#suffix' => '</h2>',
            );
            // Add new link is only shown to group members
            //if ($is_group_member) {
            //  $node->content['ed_cluster_content'][$type]['heading']['#markup'] .= '<em class="ed-og-add-new">'.l(t('Add new'), 'node/add/'.str_replace('_', '-',$type), $options).'</em>';
            //}
            $last_nodes = _ed_get_last_content_by_type($type, $content);
            foreach ($last_nodes as $key => $last_node_single) {
              $tere = node_view($last_node_single, 'teaser');

              $node->content['ed_cluster_content'][$type][$last_node_single->nid] = $tere;


// If ed_q_portfolio does not use teaser
//                if($tere['#bundle']=='ed_q_portfolio'){
//
//                  $ed_q_portfolio_node = $tere['#node'];
//
//                  $statuses_list = _ed_q_portfolio_status_list();
//
//                  if(!empty($ed_q_portfolio_node->ed_q_portfolio_field_status)) {
//                    $node->content['ed_cluster_content'][$type][$last_node_single->nid]['status']=array(
//                        '#type' => 'markup',
//                        '#prefix' => '<div class="description">',
//                        '#markup' =>  $statuses_list[$ed_q_portfolio_node->ed_q_portfolio_field_status[LANGUAGE_NONE][0]['value']],
//                        '#suffix' => '</div>',
//                    );
//                  }else{
//                    $node->content['ed_cluster_content'][$type][$last_node_single->nid]['status']=array(
//                        '#type' => 'markup',
//                        '#prefix' => '<div class="description">',
//                        '#markup' =>  t('Published, not reviewed'),
//                        '#suffix' => '</div>',
//                    );
//                  }
//
//
//                  if(!empty($ed_q_portfolio_node->ed_field_to_group_member)) {
//                    $assessor_user = user_load($ed_q_portfolio_node->ed_field_to_group_member[LANGUAGE_NONE][0]['target_id']);
//                    $wrapper = entity_metadata_wrapper('user', $assessor_user);
//
//
//
//                    $node->content['ed_cluster_content'][$type][$last_node_single->nid]['assessor']=array(
//                        '#type' => 'markup',
//                        '#prefix' => '<div class="description">',
//                        '#markup' =>  t('Assigned to ').l($wrapper->ed_field_full_name ->value(), '/user/'.$wrapper->uid->value()),
//                        '#suffix' => '</div>',
//                    );
//                  }else{
//                    $node->content['ed_cluster_content'][$type][$last_node_single->nid]['assessor']=array(
//                        '#type' => 'markup',
//                        '#prefix' => '<div class="description">',
//                        '#markup' =>  t('Not assigned ').l('Assign an assessor', '/node/'.$ed_q_portfolio_node->nid),
//                        '#suffix' => '</div>',
//                    );
//                  }
//
//
//
//                }
            }

          }
        }

        // sort users alphabetically in js since hook_views_default_views_alter doesn't provide enough flexibility to sort by data inside a blob
        drupal_add_js('jQuery(document).ready(function(){
         var og_members_container = document.querySelector(".view-og-members .view-content");
         var og_members_sortable = [];
         for (var i = 0; i < og_members_container.childNodes.length; i++) {
            var node = og_members_container.childNodes[i];
            if (typeof node.innerHTML === "undefined") continue;
            og_members_sortable.push({"inner" : node.innerHTML, "name" : node.innerText});
         }
         og_members_sortable.sort(function(a,b){return (a.name>b.name) ? 1 : ((b.name > a.name) ? -1 : 0);});
         var og_members_used = 0;
         for (var i = 0; i < og_members_container.childNodes.length; i++) {
            var node = og_members_container.childNodes[i];
            if (typeof node.innerHTML === "undefined") continue;   
            node.innerHTML = og_members_sortable[og_members_used++].inner;        
         }
        });','inline');
      } else if ('dashboard' == $view_mode) {
        $recent_content = _ed_get_group_recent_content($node->nid, 5);
        $recnt_content_nodes = node_load_multiple($recent_content);
        if ($recnt_content_nodes) {
          $items = array();
          foreach ($recnt_content_nodes as $single) {
            $single_action = ($single->created == $single->changed) ? 'created' : 'changed';
              
            $single_type = $single->type;
            
            if($single_type == 'ed_task'){
              $single_type = t('Task');
            }
            else if($single_type == 'ed_news'){
              $single_type = t('news');
            }
            else{
              $single_type = node_type_get_name($single);
            }
            // Determine the user who really acted in case of changed
            if ('changed' == $single_action) {
              $query = db_select('node_revision', 'nrv')
                ->fields('nrv', array('uid'))
                ->condition('nid', $single->nid)
                ->condition('vid', $single->vid)
                ->range(0, 1)
                ->orderby('nrv.timestamp', 'DESC');
              $real_actor = $query->execute()->fetchObject();
              if ($real_actor) {
                $single_user_acc = user_load($real_actor->uid);
              } else {
                $single_user_acc = user_load($single->uid);
              }
            } else {
              $single_user_acc = user_load($single->uid);
            }

            $single_name = l(edidaktikum_get_full_name_for_user_account($single_user_acc), 'user/' . $single->uid);

            // Deal with special case of ed_answer
            if ('ed_answer' == $single->type) {
              $single_title = l(ed_answer_get_answer_title($single), 'node/' . $single->nid);
            } else {
              $single_title = l($single->title, 'node/' . $single->nid);
            }

            if ('created' == $single_action) {
              $items[] = array(
                'data' => t('!name added !node @time', array('!name' => $single_name, '!node' => $single_title, '@time' => format_date($single->created, 'short'))).' ('.ucfirst($single_type).')',
              );
            } else {
              $items[] = array(
                'data' => t('!name changed !node @time', array('!name' => $single_name, '!node' => $single_title, '@time' => format_date($single->changed, 'short'))).' ('.ucfirst($single_type).')',
              );

            }
          }
          $node->content['recent-activity'] = array(
            '#theme' => 'item_list',
            '#items' => $items,
            '#attributes' => array(
              'class' => array('ed-group-latest-updates-listing'),
            ),
          );
        } else {
          $node->content['recent-activity'] = array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array('ed-no-recent-activity'),
            ),
          );
          $node->content['recent-activity']['no-recent-activity'] = array(
            '#type' => 'markup',
            '#markup' => t('No recent activity'),
          );
        }
      }
      break;      
  }
}

function _ed_get_last_content_by_type($type, $content){
  $all_latest_nids = array();
  foreach($content as $content_single){
    if($content_single->type == $type){
      $all_latest_nids[] = $content_single;
    }
  }
  usort($all_latest_nids, "cmp");  
  $count = 0;
  $latest_nids = array();
  foreach($all_latest_nids as $nid){
    $latest_nids[] = $nid;
    $count++;
    if($count==3){
      break;
    }
  }
  
  return $latest_nids;
  
}
function cmp($a, $b){
    return strcmp($b->created, $a->created);
}

/**
 * Returns recently created/modified content of the group.
 * @param $guid
 *   Group node identifier
 * @param $limit
 *   Optional number of results to be returned
 * @return
 *   An array of node identifiers if any exist
 */
function _ed_get_group_recent_content($gid, $limit = NULL){
  $query = db_select('node', 'n');
  $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type = 'node'");
  $query->fields('n', array('nid'))
      ->condition('ogm.gid', $gid)
      ->condition('n.nid', $gid, '!=')
      ->addTag('node_access')
      ->orderBy('n.changed', 'DESC')
      ->distinct();
  if ($limit) {
    $query->range(0, 5);
  }
  $result = $query->execute()->fetchCol();
  return $result;
}

function _ed_get_group_content($gid){
  $query = db_select('node', 'n');
  $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type = 'node'");
  $query->fields('n', array('nid'))
      ->condition('ogm.gid', $gid)
      ->condition('n.nid', $gid, '!=')
      ->addTag('node_access')
      ->distinct();
  $result = $query->execute()->fetchCol();
  return $result;
}

function _ed_get_group_content_by_type($gid, $type, $order = 'DESC'){
  $query = db_select('node', 'n')
      ->extend('PagerDefault');
  $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type = 'node'");
  $query->fields('n', array('nid')) 
      ->condition('ogm.gid', $gid)
      ->condition('n.nid', $gid, '!=')
      ->condition('n.type', $type)
      ->addTag('node_access')
      ->orderBy('n.sticky', 'DESC');
  if($order == 'title'){
    $query->orderBy('n.title', 'ASC');
  }else{
    $query->orderBy('n.created', $order);
  }
  
  $query->limit(ed_get_paging_nr());
  $query->distinct();
  $result = $query->execute()->fetchCol();
  return $result;
}

function _ed_get_group_tasks_for_group_task_page($gid){
  $query = db_select('node', 'n');
  $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type = 'node'");
  $query->fields('n', array('nid')) 
      ->condition('ogm.gid', $gid)
      ->condition('n.nid', $gid, '!=')
      ->condition('n.type', 'ed_task')
      ->addTag('node_access')
      ->orderBy('n.sticky', 'DESC');  
  $query->distinct();
  $result = $query->execute()->fetchCol();
  return $result;
}


/**
 * Returns count for nodes of centain type within a group.
 * @param int     $gid  Group identifier
 * @param string  $type Node type
 *
 * @return int
 */
function _ed_get_group_content_by_type_count($gid, $type){
  $query = db_select('node', 'n');
  $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type = 'node'");
  $query->fields('n', array('nid'))
      ->condition('ogm.gid', $gid)
      ->condition('n.nid', $gid, '!=')
      ->condition('n.type', $type)
      ->addTag('node_access')
      ->distinct();
  return $query->countQuery()->execute()->fetchField();
}


/**
 * Check if current user is either administrator, group
 * creator or group admin.
 * @return boolean
 */
function ed_task_manager_access($test, $node){
  if ('ed_cluster' != $node->type) {
    return false;
  }

  $account = $GLOBALS['user'];
  if (in_array('administrator', $account->roles)) {
    return true;
  }

  if (in_array('supervisor', $account->roles)) {
    return true;
  }

  if ($node->uid === $account->uid) {
    return true;
  }

  if (in_array(OG_ADMINISTRATOR_ROLE, og_get_user_roles('node', $node->nid, $account->uid, FALSE))) {
    return true;
  }

  return false;
}

/**
 * Task Manager page.
 */
function ed_task_manager($test, $node){
  menu_tree_set_path('main-menu', 'clusters');
  drupal_add_css(drupal_get_path('module', 'ed_cluster').'/task_manager.css');
  drupal_add_js(drupal_get_path('module', 'ed_cluster').'/js/ed_task_manager_task_filter.js');
  $account = $GLOBALS['user'];
  $query = db_select('node', 'n');
  $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type='node' AND ogm.group_type = 'node' AND ogm.gid = :gid AND ogm.state = :active", array(':gid' => $node->nid, ':active' => OG_STATE_ACTIVE));
  $query->fields('n', array('nid'))
    ->condition('n.type', 'ed_task');
  $alltasknids = $query->execute()->fetchCol();
  
  $alltasknidswithtitle = array();
  foreach($alltasknids as $tasknid){
    $alltasknidswithtitle[$tasknid] = node_load($tasknid)->title;
  }
  $firstItem = array(0 => t('All tasks'));
  $alltasknidswithtitle = $firstItem + $alltasknidswithtitle;
  $content = array();

  $options = array(
    'attributes' => array(),
    'query' => array(
      'og_group_ref' => $node->nid,
      'destination' => _ed_cluster_destination_for_group_node_type($node, 'ed_task'),
    ),
  );
  $content['add-new-container'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('ed-add-new-node', 'ed-add-new-task'),
    ),
  );
  $content['add-new-container']['add-new'] = array(
    '#type' => 'markup',
    '#markup' => l(t('Add new'), 'node/add/ed-task', $options),
  );
  $content['task-filter-container'] = array(
    '#type' => 'container',
    '#attributes' => array(
       'class' => array('ed-filter-tasks'),
    ),
  );
  $content['task-filter-container']['container'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('row'),
    ),
  );
  $content['task-filter-container']['container']['selection-box'] = array(
    '#type' => 'select',
    '#title' => t('Select task to filter'),
    '#options' => $alltasknidswithtitle,
    '#prefix' => '<div class="span4">',
    '#suffix' => '</div>',
    '#value' => (isset($_GET['tasknid']) ? $_GET['tasknid'] : 0),
    '#attributes' => array(
      'class' => array('ed_task_selection_for_filtering'),
      'data-cluster' => $node->nid,
    ),
  );
  $content['task-filter-container']['container']['submit-button'] = array(
    '#type' => 'markup',
    '#prefix' => '<div class="span4">',
    '#suffix' => '</div>',
    '#markup' => '<button class="btn btn-primary ed_filter_tasks">'.t('Filter').'</button>',

  );
  $group_members_uids = _get_users_in_group($node->nid);
  
  // Remove creator
  if (in_array($node->uid, $group_members_uids)) {
    unset($group_members_uids[array_search($node->uid, $group_members_uids)]);
  }

  $admin_uids = _ed_cluster_get_group_admins($node);
  // Remove admins
  if (!empty($admin_uids)) {
    foreach ($admin_uids as $auid) {
      unset($group_members_uids[array_search($auid, $group_members_uids)]);
    }
  }
  
  $group_members = user_load_multiple($group_members_uids);
  sort($group_members);
  // Get all group tasks
  
  
  if(isset($_GET['tasknid'])){
    $filteredtasknid = $_GET['tasknid'];
    $query = db_select('node', 'n');
    $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND n.nid=:tasknid AND ogm.entity_type='node' AND ogm.group_type = 'node' AND ogm.gid = :gid AND ogm.state = :active", array(':gid' => $node->nid, ':active' => OG_STATE_ACTIVE, ':tasknid' => $filteredtasknid));
    $query->fields('n', array('nid'))
      ->condition('n.type', 'ed_task');
    $nids = $query->execute()->fetchCol();
  }else{
    $nids = $alltasknids;
  }
  
  
  $header = array(t('Name'));
  $nodes = node_load_multiple($nids);
  if(isset($_GET['tasknid'])){
    $node_single = node_load($_GET['tasknid']);
    array_push($header, l($node_single->title, 'node/'.$_GET['tasknid'], array('attributes' => array('title' => $node_single->title))).'<br>'.'<div class="description">'.t('Due date: ').format_date($node_single->ed_task_due_date[LANGUAGE_NONE][0]['value'], 'short').'</div>');
  }else{
    foreach(array_values($nodes) as $key => $node_single){
      array_push($header, l(t('Task').' '.($key+1), 'node/'.$node_single->nid, array('attributes' => array('title' => $node_single->title))).'<br>'.'<div class="description">'.t('Due date: ').format_date($node_single->ed_task_due_date[LANGUAGE_NONE][0]['value'], 'short').'</div>');  
    }
  }
  $rows = array();
  
  foreach(array_values($group_members) as $index => $member){
      $rows[] = array(
        'data' => array(
          $member->uid => l(edidaktikum_get_full_name_for_user_account($member), 'user/'.$member->uid),
        ),
      );
      foreach($nodes as $node_single){
        $tmp_data = array('data' => '', 'class' => '');

        if (_ed_check_if_answered($member->uid, $node_single->nid)) {
          $tmp_answer_nid = _ed_get_answer_nid($member->uid, $node_single->nid);

          $grade = _ed_get_last_grade($tmp_answer_nid[0]);
          $tmp_data['data'] = l($grade == 0 ? '&nbsp;' : $grade, 'node/' . $tmp_answer_nid[0], array('html' => TRUE));
          $status = _ed_check_if_accepted($tmp_answer_nid[0]);
          if(empty($status)){
            $tmp_data['class'] = 'unchecked';
            $tmp_data['title'] = t('Unchecked');

            //Check if it is late submission - if submitted on the due date or later
            $wrapper = entity_metadata_wrapper('node', $tmp_answer_nid[0]);
            $task_submission_time = $wrapper->changed->value();

            $due_date = $node_single->ed_task_due_date[LANGUAGE_NONE][0]['value'];

            if($task_submission_time>$due_date){
              $tmp_data['data'] = l('!&nbsp;', 'node/' . $tmp_answer_nid[0], array('html' => TRUE));
            }


          }else{
            $status_last = _ed_last_status($status);

            switch($status_last){
              case('accepted'):
                $tmp_data['class'] = 'answered';
                $tmp_data['title'] = t('Accepted');
              break;
              case('rejected'):
                $tmp_data['class'] = 'rejected';
                $tmp_data['title'] = t('Rejected');                
              break;
              case('unchecked'):
                $tmp_data['class'] = 'unchecked';
                $tmp_data['title'] = t('Unchecked');
              break;
            }

          }
          
        } else {

          $tmp_data['class'] = 'unanswered';
          $tmp_data['title'] = t('Not answered');


          //Check if it is a study group case
          $wrapper = entity_metadata_wrapper('node', $node_single->nid);
          $task_study_groups = $wrapper->ed_task_field_study_group->raw();

          if(!empty($task_study_groups)){

            $tasks_to_user = _ed_get_tasks_to_user();
            $is_to_user_task = false;
            foreach ($tasks_to_user as $task_to_user){
              if($task_to_user->nid == $node_single->nid){
                $is_to_user_task=true;
              }
            }


            if(!$is_to_user_task){
              //Get user study group field
              $wrapper = entity_metadata_wrapper('user', $member->uid);
              $user_study_group = $wrapper->ed_field_study_group->value();


              if(isset($user_study_group)){
                if(in_array($user_study_group, $task_study_groups) == false ){
                  $tmp_data['class'] = 'na';
                  $tmp_data['title'] = t('Not applicable');
                }

              }else{
                $tmp_data['class'] = 'na';
                $tmp_data['title'] = t('Not applicable');
              }

            }


          }


          if (!empty($node_single->{ED_FIELD_TO_GROUP_MEMBER}[LANGUAGE_NONE])) {
            if (!in_array($member->uid, array_map(function($element) { return $element['target_id']; }, $node_single->{ED_FIELD_TO_GROUP_MEMBER}[LANGUAGE_NONE]))) {
              $tmp_data['class'] = 'can-not-be-answered';
              $tmp_data['title'] = t('Can not be answered');
            }
          }
        }
        

        $rows[$index]['data'][$node_single->nid] = $tmp_data;
      }
  }

  $content['table'] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#header' => $header,
    '#attributes' => array('data-averaging_table' => '')
  );
  return $content;
}


function _ed_get_answer_nid($uid, $tnid){
  $query = db_select('node', 'n');
  $query->join('field_data_field_ref_to_task', 'ref', 'n.nid = ref.entity_id');
  $query->fields('n', array('nid'));
  $query->condition('n.uid', $uid)
      ->condition('ref.field_ref_to_task_target_id', $tnid);
  $result = $query->execute()->fetchCol();  
  return $result;
}


function _ed_check_if_answered($uid, $tnid){
  $query = db_select('node', 'n');
  $query->join('field_data_field_ref_to_task', 'ref', 'n.nid = ref.entity_id');
  $query->fields('n', array('nid'));
  $query->condition('n.uid', $uid)
      ->condition('n.status', 1);
  $query->condition('ref.field_ref_to_task_target_id', $tnid);
  $result = $query->execute()->fetchCol();
  if(!empty($result)){
    return TRUE;
  } else {
    return FALSE;
  }
  
  
}

function _ed_get_last_grade($answer) {
  $answernode = node_load($answer);
  $groupnid = $answernode->og_group_ref[LANGUAGE_NONE][0]['target_id'];
  $group = node_load($groupnid);
  $groupadmins = _ed_cluster_get_group_admins($group, true);

  $query = db_select('comment', 'c');
  $query->join('field_data_ed_answer_grade', 's', 'c.cid = s.entity_id');
  $query->fields('s',array('ed_answer_grade_value'));
  $query->condition('c.nid', $answer);
  $query->condition('c.uid', $groupadmins, 'IN');
  $result = $query->execute()->fetchCol();

  if (count($result) == 0) return 0;
  return $result[count($result) - 1];
}




function _ed_check_if_accepted($answer){
  $answernode = node_load($answer);
  //dpm($answernode);
  $groupnid = $answernode->og_group_ref[LANGUAGE_NONE][0]['target_id'];
  $group = node_load($groupnid);
  //dpm($group);
  $groupadmins = _ed_cluster_get_group_admins($group, true);
  //dpm($groupadmins);
  
  $query = db_select('comment', 'c');
  $query->join('field_data_ed_answer_status', 's', 'c.cid = s.entity_id');
  $query->fields('s',array('ed_answer_status_value'));
  $query->condition('c.nid', $answer);
  $query->condition('c.uid', $groupadmins, 'IN');
  $result = $query->execute()->fetchCol();

  //Useful for answer status debugging
  //print_r($answer.' comment_count '.$answernode->comment_count. ' last_comment_uid '.$answernode->last_comment_uid. '<br/>');

  return $result;
}

/*
 * Get all answers from selected user.
 */
function _ed_check_for_answers($uid){
  $query = db_select('node', 'n');
  $query
      ->condition('n.type', 'ed_answer')
      ->condition('n.uid', $uid)
      ->fields('n', array('nid'));
  return $query->execute()->fetchCol();
}

// TODO Deprecated: This function is no longer used.
// Consider removal.
/*
 * Get all tasks that the user has made for this group
 */
function _ed_get_user_group_tasks($uid, $nid){
  $query = db_select('node', 'n');
  $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type='node' AND ogm.group_type = 'node' AND ogm.gid = :gid AND ogm.state = :active", array(':gid' => $nid, ':active' => OG_STATE_ACTIVE));
  $query->fields('n', array('nid'))
    ->condition('n.type', 'ed_task')
    ->condition('n.uid', $uid);

  return $query->execute()->fetchCol();
}

/**
 * Get all users of a group
 */
function _get_users_in_group($gid) {
  $query = db_select('users', 'u');
 
  $query
    ->condition('u.uid', 0, '<>')
    ->condition('u.status', 1, '=')
    ->fields('u', array('uid', 'name'))
    ->join('og_membership', 'ogm', "ogm.gid = :gid AND u.uid = ogm.etid AND ogm.entity_type = 'user'", array(':gid' => $gid));
  $result = $query->execute()->fetchCol();
  
  return $result;
}

/**
 * Returns identifiers for all groups user has created
 * or is an administrator of.
 *
 * @param $account
 *   User account object.
 * @return array
 *   An array with group identifiers or empty array
 */
function _ed_cluster_get_all_administered_groups(&$account) {
  $administered_groups = array();
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.uid', $account->uid)
    ->condition('n.type', 'ed_cluster');

  $result = $query->execute()->fetchCol();

  if ($result) {
    foreach ($result as $nid) {
      $administered_groups[] = $nid;
    }
  }

  // Determine general role identifier (rid) for group admin
  $group_roles = og_roles('node', 'ed_cluster');
  $admin_rid = array_search(OG_ADMINISTRATOR_ROLE, $group_roles);

  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.type', 'ed_cluster');
  $query->join('og_users_roles', 'ogur', "n.nid = ogur.gid AND ogur.group_type = 'node' AND ogur.rid = :rid AND ogur.uid = :uid", array(':rid' => $admin_rid, ':uid' => $account->uid));

  $result = $query->execute()->fetchCol();

  if ($result) {
    foreach ($result as $nid) {
      $administered_groups[] = $nid;
    }
  }

  return $administered_groups;
}

/**
 * Returns an array of user identifiers that are
 * administrators of a group id provided.
 *
 * @param $node
 *   Group node
 * @param $add_creator
 *   A flag to add creator uid to admins
 * @return
 *   User identifiers or empty
 */
function _ed_cluster_get_group_admins(&$node, $add_creator = false) {
  // Determine general role identifier (rid) for group admin
  $group_roles = og_roles('node', 'ed_cluster', $node->nid);
  $admin_rid = array_search(OG_ADMINISTRATOR_ROLE, $group_roles);
  
  $query = db_select('users', 'u');
  $query->join('og_users_roles', 'ogur', "u.uid = ogur.uid AND ogur.gid = :gid AND ogur.group_type = 'node' AND ogur.rid = :rid", array(':gid' => $node->nid, ':rid' => $admin_rid));
  $query
    ->fields('u', array('uid'));
  $admins = $query->execute()->fetchCol();

  if ($add_creator && !in_array($node->uid, $admins)) {
    $admins []= $node->uid;
  }

  return $admins;
}

/**
 * Determines if user is creator or admin in any of provided groups.
 *
 * @param $uid
 *   User unique identifier
 * @param $groups
 *   Group node identifiers
 * @return
 *   Boolean value
 */
function _ed_cluster_is_groups_admin_or_creator($uid, $groups) {
  // Return FALSE if no groups provided
  if (empty($groups) || !is_array($groups)) {
    return FALSE;
  }

  // Group creator case
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.uid', $uid)
    ->condition('n.nid', $groups, 'IN')
    ->countQuery();

  if ((int) $query->execute()->fetchField() > 0) {
    return TRUE;
  }

  // Group administrator case
  $group_roles = og_roles('node', 'ed_cluster');
  $admin_rid = array_search(OG_ADMINISTRATOR_ROLE, $group_roles);
  
  $query = db_select('users', 'u');
  $query->join('og_users_roles', 'ogur', "u.uid = ogur.uid AND ogur.uid = :uid AND ogur.group_type = 'node' AND ogur.rid = :rid", array(':uid' => $uid, ':rid' => $admin_rid));
  $query
    ->fields('u', array('uid'))
    ->condition('ogur.gid', $groups, 'IN')
    ->countQuery();

  if ((int) $query->execute()->fetchField() > 0) {
    return TRUE;
  }

  return FALSE;
}


function _ed_is_nid_group($nid){
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.type', array('ed_subgroup', 'ed_cluster'), 'IN')
    ->condition('n.nid', $nid);
  $nids = $query->execute()->fetchCol();
  if(!empty($nids)){
    return true;
  }
  return false;
  
}


function _ed_cluster_search_for_clusters($searchstring){
  $query = db_select('node', 'n')
      ->extend('PagerDefault')
      ->fields('n', array('nid'))
      ->condition('n.type', 'ed_cluster')
      ->condition('n.status', 1)
      ->condition('n.title', '%' . db_like($searchstring) . '%', 'LIKE');
  $query->limit(ed_get_grid_paging_nr());
  $nids = $query->execute()->fetchCol();
  return $nids; 
  
}

/**
 * Returns paged ed_subgroup node indentifiers
 * NB! Ignores node_access
 */
function ed_cluster_get_subgroups($order, $gnid) {
  $query = db_select('node', 'n')
      ->extend('PagerDefault');
  $query->join('og_membership', 'ogm', 'n.nid = ogm.etid');
  $query->fields('n', array('nid'))
      ->condition('ogm.entity_type', 'node')
      ->condition('ogm.gid', $gnid)
      ->condition('n.status', 1)
      ->condition('n.type', 'ed_subgroup');
          
    if($order == 'title'){
      $query->orderBy('TRIM(n.title)', 'ASC');
    }else{ 
      $query->orderBy('n.created', $order);
    }
    $query->limit(ed_get_grid_paging_nr());

    $nids = $query->execute()->fetchCol();
    
    return $nids;
}


/**
 * Returns paged ed_cluster node identifiers
 * NB! Ignores node_access
 */
function ed_cluster_get_clusters($order, $remove_user_groups = FALSE, $inactive) {
  if($remove_user_groups){
    $usergroups = og_get_groups_by_user();

    $query = db_select('node', 'n')
      ->extend('PagerDefault')
      ->fields('n', array('nid'))
      ->condition('n.status', 1);

    if($inactive) {
      $exclude_query = new EntityFieldQuery();
      $exclude_query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'ed_cluster')
          ->fieldCondition('ed_field_group_state', 'value', 1);
      $exclude_result = $exclude_query->execute();
      $excluded = array_keys($exclude_result['node']);
      if ( $excluded ) {
        $query->condition('n.nid', $excluded, 'NOT IN');
      }
    }

    if($usergroups){
      $query->condition('n.nid', $usergroups['node'], 'not in');
    }
    $query->condition('n.type', 'ed_cluster');
    if($order == 'title'){
      $query->orderBy('TRIM(title)', 'ASC');
    }else{ 
      $query->orderBy('created', $order);
    }
    $query->limit(ed_get_grid_paging_nr());


    $nids = $query->execute()->fetchCol();
    
    return $nids;
  }else{
    $query = db_select('node', 'n')
      ->extend('PagerDefault')
      ->fields('n', array('nid'))
      ->condition('n.status', 1)
      ->condition('n.type', 'ed_cluster');    
    if($order == 'title'){
      $query->orderBy('TRIM(title)', 'ASC');
    }else{ 
      $query->orderBy('created', $order);
    }
    $query->limit(ed_get_grid_paging_nr());

    $nids = $query->execute()->fetchCol();
    
    return $nids;
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function ed_cluster_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => "1");
  }
}

/**
 * Implements hooks_views_api().
 */
function ed_cluster_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ed_cluster') . '/includes/views',
  );
}

/**
 * Implements hook_form_alter().
 */
function ed_cluster_form_alter(&$form, &$form_state, $form_id) {
  if ('ed_cluster_node_form' == $form_id) {
    menu_tree_set_path('main-menu', 'clusters');
    if (empty($form['#node']->nid)) {
      drupal_set_title(t('Create Group'));
    }
  }
  // Change group user add form autocomplete to our own endpoint.
  if ('og_ui_add_users' == $form_id) {
    $form['og_user']['name']['#title'] = t('Full name');
    $form['og_user']['name']['#autocomplete_path'] = 'clusters/user/autocomplete';
  }
  if('og_ui_confirm_subscribe' == $form_id){
    $group = node_load($form['gid']['#value']);
    if($group->group_access['und'][0]['value']){
      array_push($form['#submit'], 'ed_cluster_redirect_after_submit');

    }
  }
}

function ed_cluster_redirect_after_submit($form, &$form_state){
  $form_state['redirect'] = url('clusters', array('absolute' => true));
}

/**
 * Returns group menu title. Used within an override.
 */
function _ed_cluster_group_menu_title($type, $gid) {
  $pending_users_count = _ed_cluster_get_group_pending_members_count($gid);
  if ($pending_users_count > 0) {
    return t('Members (@count)', array('@count' => $pending_users_count));
  }
  return t('Members');
}

/**
 * Returns peding members count for a group.
 * @param $gid
 *   Group identifier
 * @return
 *   Pending members count
 */
function _ed_cluster_get_group_pending_members_count($gid) {
  static $count;

  if (isset($count)) {
    return $count;
  }

  $query = db_select('og_membership', 'ogm')
    ->fields('ogm', array('id'))
    ->condition('ogm.entity_type', 'user')
    ->condition('ogm.group_type', 'node')
    ->condition('ogm.gid', $gid)
    ->condition('ogm.state', OG_STATE_PENDING);

  $count = $query->countQuery()->execute()->fetchField();

  return $count;
}

/**
 * Implements hook_field_widget_alter().
 */
function ed_cluster_field_widget_form_alter(&$element, &$form_state, $context) {
  if (!empty($element['#field_name']) && ED_FIELD_TO_GROUP_MEMBER == $element['#field_name']) {
    $element['#attached']['js'][] = drupal_get_path('module', 'ed_cluster') . '/js/field_to_group_member.js';
    $element['#multiple'] = TRUE;
  }

  // This removes admin override from Organic Groups Audience field
  if (!empty($element['#field_name']) && OG_AUDIENCE_FIELD == $element['#field_name']) {
    if (!empty($element['admin'])) {
      $element['admin']['#access'] = FALSE;
    }
  }
}

/**
 * This serves data to be used by ED_FIELD_TO_GROUP_MEMBER field.
 * Field is repopulated with data once selection is made.
 */
function ed_cluster_get_groups_members_ajax() {
  $group_data = array(
    array(
      'value' => '_none',
      'name' => t('- None -'),
    ),
  );
  $groups = isset($_POST['groups']) ? $_POST['groups'] : array();

  // Remove _none from values
  if (is_array($groups)) {
    if (($key = array_search('_none', $groups)) !== FALSE) {
      unset($groups[$key]);
    }
  } else {
    if ('_none' == $groups) {
      $groups = "";
    }
  }

  if (!empty($groups)) {
    $query = db_select('users', 'u');
    $query->join('og_membership', 'ogm', "u.uid = ogm.etid AND ogm.entity_type = 'user'");
    $query->leftJoin('field_data_ed_field_full_name', 'ufn', "u.uid = ufn.entity_id AND ufn.entity_type = 'user' AND ufn.bundle = 'user'");
    $query
      ->distinct()
      ->condition('u.uid', 0, '<>')
      ->condition('u.status', 1, '=')
      ->condition('ogm.gid', $groups)
      ->fields('u', array('uid', 'name'))
      ->fields('ufn', array('ed_field_full_name_value'));
    $result = $query->execute()->fetchAll();

    if ($result) {
      foreach ($result as $single) {
        $group_data []= array(
          'value' => $single->uid,
          'name' => (!empty($single->ed_field_full_name_value)) ? $single->ed_field_full_name_value : $single->name,
        );
      }
    }
  }
  drupal_json_output($group_data);
}

/**
 * Implements hook_comment_view_alter().
 */
function ed_cluster_comment_view_alter(&$build) {
  if (isset($build['#comment']->{ED_FIELD_PRIVATE_COMMENT}[LANGUAGE_NONE][0]['value']) && 1 == $build['#comment']->{ED_FIELD_PRIVATE_COMMENT}[LANGUAGE_NONE][0]['value']) {
    global $user;
    if (!(user_is_logged_in() && ($build['#comment']->uid == $user->uid || $build['#node']->uid == $user->uid))) {

      $build['#access'] = FALSE;

      // Check if this user is group manager
      if(isset($build['#node']->og_group_ref)){
        foreach ($build['#node']->og_group_ref[LANGUAGE_NONE] as $referenced_group){

          if(ed_task_manager_access('node', node_load($referenced_group['target_id']))){

            //Group manager can see private comments
            $build['#access'] = TRUE;
          }
        }
      }

    }
  }
}

/**
 * Implements hook_node_grants().
 */
function ed_cluster_node_grants($account, $op) {
  if ('view' != $op) {
    return;
  }

  if (!field_info_field(ED_FIELD_TO_GROUP_MEMBER)) {
    return array();
  }

  $query = db_select('field_data_ed_field_to_group_member', 'tgm')
    ->fields('tgm', array('entity_type', 'entity_id'))
    ->condition('tgm.ed_field_to_group_member_target_id', $account->uid);
  $result = $query->execute()->fetchAll();

  if ($result) {
    foreach ($result as $single) {
      $realm = ED_ACCESS_REALM . ':' . $single->entity_type;
      $grants[$realm][] = $single->entity_id;
    }
  }
  $grants[ED_ACCESS_REALM . ':creator'][] = $account->uid;

  if ($administered_groups = _ed_cluster_get_all_administered_groups($account)) {
    foreach ($administered_groups as $gid) {
      $realm = ED_ACCESS_REALM . ':admin:' . 'node';
      $grants[$realm][] = $gid;
    }
  }

  return !empty($grants) ? $grants: array();
}

/**
 * Implements hook_node_access_records().
 */
function ed_cluster_node_access_records($node) {
  if (empty($node->status)) {
    return array();
  }

  if (!empty($node->{ED_FIELD_TO_GROUP_MEMBER}[LANGUAGE_NONE])) {
    $grants[] = array(
      'realm' => ED_ACCESS_REALM .':node',
      'gid' => $node->nid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1,
    );
    $grants[] = array(
      'realm' => ED_ACCESS_REALM . ':creator',
      'gid' => $node->uid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1,
    );

    $gids = og_get_entity_groups('node', $node);
    if ($gids) {
      foreach ($gids as $group_type => $values) {
        foreach ($values as $gid) {
          $grants[] = array(
            'realm' => ED_ACCESS_REALM . ':admin:' . $group_type,
            'gid' => $gid,
            'grant_view' => 1,
            'grant_update' => 0,
            'grant_delete' => 0,
            'priority' => 1,
          );
        }
      }
    }
  }

  return !empty($grants) ? $grants : array();
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ed_cluster_ctools_plugin_directory($module, $plugin) {
  if('entityreference' == $module || ('content_types' == $plugin && 'ctools' == $module)) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Returns destination for group node type.
 * Corresponds with group page for that type.
 *
 * @param $gnode
 *   Object of ed_cluster node
 * @param $type
 *   Current node page type
 *
 * @return
 *   Destination string
 */
function _ed_cluster_destination_for_group_node_type(&$gnode, $type) {
  $destination = 'node/' . $gnode->nid;
  switch($type) {
    case 'ed_blog':
    case 'ed_bookmark':
    case 'ed_forum':
    case 'ed_news':
    case 'ed_page':
    case 'ed_learning_resource':
    case 'ed_event':
    case 'ed_file':
      $type_dashed = str_replace('_', '-', $type);
      $type_dashed = substr($type_dashed, 3);
      $destination .= '/' . $type_dashed;
      break;
    case 'ed_task':
      $destination .= '/task-manager';
      break;
  }

  return $destination;
}

/**
 * Returns plural translated title string for node types.
 *
 * @param $type
 *   Current node page type
 *
 * @return
 *   Translated title string
 */
function _ed_cluster_plural_title_for_group_node_type($type) {
  switch($type) {
    case 'ed_blog':
      $title = t('Blog');
      break;
    case 'ed_forum':
      $title = t('Discussion Board');
      break;
    case 'ed_bookmark':
      $title = t('Bookmarks');
      break;
    case 'ed_news':
      $title = t('News');
      break;
    case 'ed_page':
      $title = t('Pages');
      break;
    case 'ed_learning_resource':
      $title = t('Learning Resources');
      break;
    case 'ed_event':
      $title = t('Events');
      break;
    case 'ed_file':
      $title = t('Files');
      break;
    case 'ed_task':
      $title = t('Tasks');
      break;
    case 'ed_q_portfolio':
      $title = t('Qualification portfolios');
      break;
    default:
      $title = t(ucwords(str_replace('ed', '', str_replace('_',' ',$type))));
      break;
  }

  return $title;
}

/**
 * Retruns themed group breadcrumb for node.
 *
 * @param $node
 *   Node object
 * @param $group
 *   Group node object (ed_cluster)
 *
 * @return string
 *   Themed breadcrumb
 */
function _ed_cluster_node_group_breadcrumb(&$node, &$group) {
  $destination = _ed_cluster_destination_for_group_node_type($group, $node->type);
  $breadcrumb[] = l($group->title, 'node/'. $group->nid);
  if (('node/' . $group->nid) != $destination) {
    $breadcrumb[] = l(_ed_cluster_plural_title_for_group_node_type($node->type), $destination);
  }
  $breadcrumb[] = $node->title;

  return theme_breadcrumb(array('breadcrumb' => $breadcrumb));
}

/**
 * Returns markup for node group breadcrumbs.
 *
 * @param $node
 *   A node object.
 *
 * @return array
 *   Array with markup
 */
function _ed_cluster_node_group_greadcrumbs(&$node) {
  $output = array();
  if (!empty($node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE])) {
    $groups = node_load_multiple(array_map(function($element) { return $element['target_id']; }, $node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE]));
    if (!empty($groups)) {
      $output['group-breadcrumbs'] = array(
        '#type' => 'container',
        '#attributes' => array(
        ),
      );
      foreach ($groups as $group) {
        $output['group-breadcrumbs']['bread-crumb-' . $group->nid] = array(
          '#type' => 'markup',
          '#markup' => _ed_cluster_node_group_breadcrumb($node, $group),
        );
      }
    }
  }

  return $output;
}

/**
 * Implements hook_node_presave().
 */
function ed_cluster_node_presave( $node ) {
  $account = $GLOBALS['user'];
  // Any new node created by teacher is sticky
  if (in_array('teacher', $account->roles) && $node->is_new) {
    $node->sticky = 1;
  }
}



/**
 * Implements hook_page_alter().
 */
function ed_cluster_page_alter(&$page){
  if(isset($page['content']['system_main']['#form_id']) && $page['content']['system_main']['#form_id']=='og_ui_add_users'){
    $gid = $page['content']['system_main']['gid']['#value'];
    $page['content']['system_main']['backtofront'] = array(
      '#type' => 'markup',
      '#markup' => l(t('Return to group front page'), 'node/'.$gid),
    );
  }
}

/**
 * Implements hook_node_access
 */
function ed_cluster_node_access($node, $op, $account) {
  if (in_array('supervisor', $account->roles) && $op == 'view') return NODE_ACCESS_ALLOW; 
}


/**
 * Implements hook_field_formatter_info_alter
 */
function ed_cluster_field_formatter_info_alter(&$info) {
  $info['og_group_subscribe']['module'] = 'ed_cluster';
}

/**
 * Implements hook_field_formatter_view
 */
function ed_cluster_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = og_ui_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);

  // Remove membership request if group inactive
  if (isset($element[0]) && isset($element[0]['#title']) && $element[0]['#title'] == 'Request group membership') {
    if ($entity->ed_field_group_state['und'][0]['value'] == 0) {
      unset($element[0]);
    }
  }

  return $element;
}

