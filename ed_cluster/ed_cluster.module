<?php

/**
 * @file
 * Cluster module.
 */

define('ED_FIELD_PRIVATE_COMMENT', 'ed_field_private_comment');

define('ED_FIELD_TO_GROUP_MEMBER', 'ed_field_to_group_member');

define('ED_ACCESS_REALM', 'ed_access');

/**
 * Implements hook_menu().
 */
function ed_cluster_menu()
{
  $items['node/%node/tasks'] = array(
      'title' => 'Tasks',
      'title callback' => 'ed_cluster_title_with_unseen_count',
      'title arguments' => ['Tasks', 1, 'ed_task'],
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'ed_task_listing_for_students',
      'access callback' => 'ed_task_listing_for_students_access',
      'page arguments' => array('node', 1),
      'access arguments' => array('node', 1),
      'weight' => 55,
  );
  $items['clusters'] = array(
      'title' => 'Groups',
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'ed_all_groups_listing', //ed_all_groups_listing
      'access callback' => TRUE,
      'weight' => 20,
      'menu_name' => 'main-menu',
  );
  $items['clusters/groups'] = array(
      'title' => 'All Groups',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    //'page callback' => 'ed_all_groups_listing',
      'access callback' => TRUE,
      'weight' => 0,
  );
  $items['clusters/mygroups'] = array(
      'title' => 'My active groups',
      'type' => MENU_LOCAL_TASK,
      'access callback' => 'user_is_logged_in',
      'page callback' => 'ed_cluster_my_listing_page',
      'weight' => 5,
  );
  $items['clusters/inactivegroups'] = array(
      'title' => 'My inactive groups',
      'type' => MENU_LOCAL_TASK,
      'access callback' => 'user_is_logged_in',
      'page callback' => 'ed_cluster_my_inactive_listing_page',
      'weight' => 9,
  );
  $items['clusters/searchgroup'] = array(
      'title' => 'Search for a group',
      'type' => MENU_LOCAL_TASK,
      'access callback' => TRUE,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ed_cluster_search_page'),
      'weight' => 10,
  );
  $items['clusters/add/studygroup'] = array(
      'page arguments' => [2],
      'page callback' => 'ed_cluster_group_type_create_redirect',
      'title' => t('New Degree Studies type group'),
      'type' => MENU_LOCAL_TASK,
      'access callback' => 'ed_cluster_group_type_create_redirect_access_callback',
      'weight' => 15,
  );
  $items['clusters/add/educationgroup'] = array(
      'page arguments' => [2],
      'page callback' => 'ed_cluster_group_type_create_redirect',
      'title' => t('New Continuing Education type group'),
      'type' => MENU_LOCAL_TASK,
      'access callback' => 'ed_cluster_group_type_create_redirect_access_callback',
      'weight' => 16,
  );
  $items['clusters/add/othergroup'] = array(
      'page arguments' => [2],
      'page callback' => 'ed_cluster_group_type_create_redirect',
      'title' => t('New Project-based Learning/Other type group'),
      'type' => MENU_LOCAL_TASK,
      'access callback' => 'ed_cluster_group_type_create_redirect_access_callback',
      'weight' => 17,
  );
  $items['node/%node/task-manager'] = array(
      'title' => 'Task Manager',
      'title callback' => 'ed_cluster_title_with_unseen_count',
      'title arguments' => ['Task Manager', 1, 'ed_task'],
      'page callback' => 'ed_task_manager',
      'access callback' => 'ed_task_manager_access',
      'page arguments' => array('node', 1),
      'access arguments' => array('node', 1),
      'type' => MENU_LOCAL_TASK,
      'weight' => 50,
  );
  $items['node/%node/task-manager/download'] = array(
      'title' => 'Task Manager Download csv',
      'page callback' => 'ed_task_manager_download',
      'access callback' => 'ed_task_manager_access',
      'page arguments' => array(1),
      'access arguments' => array('node', 1),
      'type' => MENU_CALLBACK,
  );
  $items['node/%node/q_portfolio'] = array(
      'title' => 'Qualification Portfolio',
      'title callback' => 'ed_cluster_title_with_unseen_count',
      'title arguments' => ['Qualification Portfolio', 1, 'ed_q_portfolio'],
      'page callback' => 'ed_listing_from_group',
      'access callback' => 'ed_group_assessors_ed_q_portfolio_listing_access',
      'page arguments' => array('node', 1, 'ed_q_portfolio'),
      'access arguments' => array('node', 1, 'ed_q_portfolio'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 3,
  );
  $items['node/%node/news'] = array(
      'title' => 'News',
      'title callback' => 'ed_cluster_title_with_unseen_count',
      'title arguments' => ['News', 1, 'ed_news'],
      'page callback' => 'ed_listing_from_group',
      'access callback' => 'ed_group_content_listing_access',
      'page arguments' => array('node', 1, 'ed_news'),
      'access arguments' => array('node', 1, 'ed_news'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 50,
  );
  $items['node/%node/event'] = array(
      'title' => 'Events',
      'title callback' => 'ed_cluster_title_with_unseen_count',
      'title arguments' => ['Events', 1, 'ed_event'],
      'page callback' => 'ed_listing_from_group',
      'access callback' => 'ed_group_content_listing_access',
      'page arguments' => array('node', 1, 'ed_event'),
      'access arguments' => array('node', 1, 'ed_event'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 50,
  );
  $items['node/%node/subgroups'] = array(
      'title' => 'Subgroups',
      'title callback' => 'ed_cluster_title_with_unseen_count',
      'title arguments' => ['Subgroups', 1, 'ed_subgroup'],
      'page callback' => 'ed_subgroup_listing_from_group',
      'access callback' => 'ed_group_content_listing_access',
      'page arguments' => array('node', 1, 'ed_subgroup'),
      'access arguments' => array('node', 1, 'ed_subgroup'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 50,
  );
  $items['node/%node/ajax/get/events'] = array(
      'page callback' => 'ed_cluster_get_group_events_ajax',
      'access callback' => 'ed_group_content_listing_access',
      'page arguments' => array(1),
      'access arguments' => array('node', 1, 'ed_event'),
      'type' => MENU_CALLBACK,
      'file' => 'ed_cluster.pages.inc',
  );
  $items['node/%node/blog'] = array(
      'title' => 'Posts',
      'title callback' => 'ed_cluster_title_with_unseen_count',
      'title arguments' => ['Posts', 1, 'ed_blog'],
      'page callback' => 'ed_listing_from_group',
      'access callback' => 'ed_group_content_listing_access',
      'page arguments' => array('node', 1, 'ed_blog'),
      'access arguments' => array('node', 1, 'ed_blog'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 50,
  );
  $items['node/%node/learning-resource'] = array(
      'title' => 'Learning Resources',
      'title callback' => 'ed_cluster_title_with_unseen_count',
      'title arguments' => ['Learning Resources', 1, 'ed_learning_resource'],
      'page callback' => 'ed_learning_resource_listing_from_group',
      'access callback' => 'ed_group_content_listing_access',
      'page arguments' => array(1),
      'access arguments' => array('node', 1, 'ed_learning_resource'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 50,
  );
  $items['node/%node/forum'] = array(
      'title' => 'Discussion Board',
      'title callback' => 'ed_cluster_title_with_unseen_count',
      'title arguments' => ['Discussion Board', 1, 'ed_forum'],
      'page callback' => 'ed_listing_from_group',
      'access callback' => 'ed_group_content_listing_access',
      'page arguments' => array('node', 1, 'ed_forum'),
      'access arguments' => array('node', 1, 'ed_forum'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 50,
  );

  $items['node/%node/bookmark'] = array(
      'title' => 'Bookmarks',
      'title callback' => 'ed_cluster_title_with_unseen_count',
      'title arguments' => ['Bookmarks', 1, 'ed_bookmark'],
      'page callback' => 'ed_listing_from_group',
      'access callback' => 'ed_group_content_listing_access',
      'page arguments' => array('node', 1, 'ed_bookmark'),
      'access arguments' => array('node', 1, 'ed_bookmark'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 50,
  );
  $items['node/%node/file'] = array(
      'title' => 'Files',
      'title callback' => 'ed_cluster_title_with_unseen_count',
      'title arguments' => ['Files', 1, 'ed_file'],
      'page callback' => 'ed_cluster_file_listing_from_group',
      'access callback' => 'ed_group_content_listing_access',
      'page arguments' => [1,],
      'access arguments' => ['node', 1, 'ed_file',],
      'type' => MENU_LOCAL_TASK,
      'weight' => 50,
      'file' => 'ed_cluster.pages.inc',
  );
  $items['clusters/get/groups_members'] = array(
      'page callback' => 'ed_cluster_get_groups_members_ajax',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
  );
  $items['clusters/get/groups_competences'] = array(
      'page callback' => 'ed_cluster_get_groups_competences_ajax',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
  );
  $items['dashboard/shared'] = array(
      'title' => 'Shared with me',
      'page callback' => 'ed_cluster_to_group_member_page',
      'access callback' => 'user_is_logged_in',
      'file' => 'ed_cluster.pages.inc',
      'weight' => 25,
      'menu_name' => 'ed-dashboard-menu',
      'type' => MENU_NORMAL_ITEM,
  );
  $items['clusters/user/autocomplete'] = array(
      'title' => 'User autocomplete',
      'page callback' => 'ed_cluster_user_autocomplete',
      'access callback' => 'user_access',
      'access arguments' => array('access user profiles'),
      'type' => MENU_CALLBACK,
      'file' => 'ed_cluster.pages.inc',
  );
  $items['node/%node/pages'] = array(
      'title' => 'Pages',
      'title callback' => 'ed_cluster_title_with_unseen_count',
      'title arguments' => ['Pages', 1, 'ed_page'],
      'page callback' => 'ed_listing_from_group',
      'access callback' => 'ed_group_content_listing_access',
      'page arguments' => array('node', 1, 'ed_page'),
      'access arguments' => array('node', 1, 'ed_page'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 50,
  );

  return $items;
}


function ed_cluster_group_type_create_redirect($type)
{
  $types = [
      'studygroup' => 1,
      'educationgroup' => 2,
      'othergroup' => 3
  ];
  drupal_goto('node/add/ed-cluster', ['query' => [
      'field_group_type' => $types[$type],
  ],]);
}

function ed_cluster_group_type_create_redirect_access_callback()
{
  return node_access('create', 'ed_cluster');
}


function ed_subgroup_listing_from_group($filler, $gnode, $type)
{


  $content = array();
  $content['sorting'] = drupal_get_form('_ed_get_sorting_options');
  $sql_order = ed_get_sorting_type($content);
  $l_options = array(
      'attributes' => array(),
      'query' => array(
          'og_group_ref' => $gnode->nid,
          'destination' => _ed_cluster_destination_for_group_node_type($gnode, 'ed_subgroup'),
      ),
  );

  if (node_access('create', 'ed_subgroup')) {
    $content['add-new'] = array(
        '#type' => 'link',
        '#title' => t('Add new subgroup'),
        '#href' => 'node/add/ed-subgroup',
        '#prefix' => '<div class="ed-add-new-node ed-add-new-subgroup">',
        '#suffix' => '</div>',
        '#options' => $l_options,
    );
  }
  drupal_add_css(drupal_get_path('module', 'ed_cluster') . '/group-listing.css');
  $subgroup_nids = ed_cluster_get_subgroups($sql_order, $gnode->nid);
  $nodes = node_load_multiple($subgroup_nids);
  $nodeschunked = array_chunk($nodes, 4);

  $lastchunk = end($nodeschunked);

  if ($lastchunk && count($lastchunk < 4)) {
    foreach (range(1, 4 - count($lastchunk)) as $i) {
      $x = new stdClass();
      array_push($lastchunk, $x);
    }
  }
  $nodeschunked[count($nodeschunked) - 1] = $lastchunk;
  $counter = 1;
  foreach ($nodeschunked as $nodeschunk) {
    $build['row-' . $counter] = array(
        '#type' => 'markup',
        '#prefix' => '<div class="row" id="row-' . $counter . '">',
        '#suffix' => '</div>',
    );
    for ($i = 0; $i < count($nodeschunk); $i++) {
      if (isset($nodeschunk[$i]->nid)) {

        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'user')
            ->fieldCondition('og_user_node', 'target_id', $nodeschunk[$i]->nid, '=');
        $results = $query->execute();
        $uids = array_keys($results['user']);
        $groupnode = node_load($nodeschunk[$i]->nid);
        $groupadmins = _ed_cluster_get_group_admins($groupnode, TRUE);
        $adminimages = array();
        foreach ($groupadmins as $groupadmin) {
          $admin = user_load($groupadmin);
          if ($admin->picture) {
            $adminimages[] = l('<img src="' . image_style_url('thumbnail', $admin->picture->uri) . '" title="' . $admin->ed_field_full_name[LANGUAGE_NONE][0]['safe_value'] . '" />', 'user/' . $admin->uid, array('html' => TRUE));
          } else {
            $adminimages[] = l('<img src="' . $GLOBALS['base_url'] . '/' . path_to_theme() . '/images/user_icon_default.png" title="' . $admin->ed_field_full_name[LANGUAGE_NONE][0]['safe_value'] . '"/>', 'user/' . $admin->uid, array('html' => TRUE));
          }
        }
        if ($nodeschunk[$i]->group_access[LANGUAGE_NONE][0]['value']) {
          $title = l($nodeschunk[$i]->title, 'node/' . $nodeschunk[$i]->nid) . ' <p class="private-group-title">' . t('Private Group') . '</p>';
        } else {
          $title = l($nodeschunk[$i]->title, 'node/' . $nodeschunk[$i]->nid);
        }
        $build['row-' . $counter][$i] = array(
            '#type' => 'markup',
            '#prefix' => '<div class="span3 group-div-outer">',
            '#suffix' => '</div>',
        );
        $build['row-' . $counter][$i]['top'] = array(
            '#type' => 'markup',
            '#prefix' => '<div class="group-div-top">',
            '#suffix' => '</div>',
        );
        $build['row-' . $counter][$i]['top']['top-top'] = array(
            '#type' => 'markup',
            '#prefix' => '<div class="group-div-top-cover">',
            '#markup' => !empty($nodeschunk[$i]->ed_field_featured_image) ? l('<img src="' . image_style_url('medium', $nodeschunk[$i]->ed_field_featured_image[LANGUAGE_NONE][0]['uri']) . '">', 'node/' . $nodeschunk[$i]->nid, array('html' => TRUE)) : l('<img src="' . $GLOBALS['base_url'] . '/' . path_to_theme() . '/images/icons/ed_group_icon_default.png">', 'node/' . $nodeschunk[$i]->nid, array('html' => true)),
            '#suffix' => '</div>',
        );
        $build['row-' . $counter][$i]['top']['top-bottom'] = array(
            '#type' => 'markup',
            '#prefix' => '<div class="group-div-top-title">',
            '#markup' => $title,
            '#suffix' => '</div>',
        );
        $build['row-' . $counter][$i]['bottom'] = array(
            '#type' => 'markup',
            '#prefix' => '<div class="row group-div-bottom">',
            '#suffix' => '</div>',
        );
        $build['row-' . $counter][$i]['bottom']['bottom-left'] = array(
            '#type' => 'markup',
            '#prefix' => '<div class="span9 group-div-bottom-left">',
            '#markup' => implode(' ', $adminimages),
            '#suffix' => '</div>',
        );
        $build['row-' . $counter][$i]['bottom']['bottom-right'] = array(
            '#type' => 'markup',

            '#suffix' => '</div>',
        );
        //If user is not a member of that group:
        if (og_is_member('node', $nodeschunk[$i]->nid, 'user')) {
          $build['row-' . $counter][$i]['bottom']['bottom-right']['#prefix'] = '<div class="span3 group-div-bottom-right label label-success">';
          $build['row-' . $counter][$i]['bottom']['bottom-right']['#markup'] = l(t('Join'), 'group/node/' . $nodeschunk[$i]->nid . '/subscribe/og_user_node');
        } else {

          $build['row-' . $counter][$i]['bottom']['bottom-right']['#prefix'] = '<div class="span3 group-div-bottom-right label label-important">';
          $build['row-' . $counter][$i]['bottom']['bottom-right']['#markup'] = l(t('Leave'), 'group/node/' . $nodeschunk[$i]->nid . '/unsubscribe');
        }

        //If user is a member of that group:

      }
    }
    $counter++;
  }

  $content['clusters'] = $build;
  $content['pager'] = array(
      '#theme' => 'pager',
  );


  return $content;
}


function ed_cluster_search_page($form, &$form_state)
{
  $searchstring = isset($_GET['search_term']) ? $_GET['search_term'] : '';
  $form['form_container'] = array(
      '#type' => 'container',
      '#attributes' => array(
          'class' => array('input-group input-group-lg'),
      ),
  );
//  $form['form_container']['label'] = array(
//    '#type' => 'markup',
//    '#markup' => t('Group name: '),
//  );
  $form['form_container']['textfield'] = array(
      '#type' => 'textfield',
      '#value' => $searchstring,
      '#attributes' => array(
          'class' => array('reply-form__name input-group-lg'),
          'placeholder' => t('Search'),
      ),
  );
  $form['form_container']['submit_button'] = array(
      '#type' => 'submit',
      '#value' => t('Search'),
      '#prefix' => '<span class="input-group-btn">',
      '#suffix' => '</span>',
      '#attributes' => array(
          'id' => array('search_button'),
      ),
  );
  $form['#submit'][] = 'ed_cluster_cluster_search_submit_handler';

  if ($searchstring != '') {

    $nids = _ed_cluster_search_for_clusters($searchstring);
    if (empty($nids)) {
      $form['listing'] = array(
          '#type' => 'markup',
          '#markup' => t('<b><i> @querystring </i></b>did not return any results', array('@querystring' => $searchstring)),
          '#prefix' => '<div class="alert alert-warning" role="alert">',
          '#suffix' => '</div>',
      );
    } else {

      $nodes = node_load_multiple($nids);


      $form['listing'] = ed_generate_grid_of_groups($nodes);
      $form['pager'] = array(
          '#theme' => 'pager',
      );

    }


  } else {
    $form['listing'] = ed_all_groups_listing();
    drupal_set_title(t('Search for a group'));
    unset($form['listing']['sorting']);
    unset($form['listing']['add-new']);
  }

  return $form;
}

function ed_cluster_cluster_search_submit_handler($form, &$form_state)
{
  $form_state['rebuild'] = TRUE;
  $searchstring = $form_state['input']['textfield'];

  drupal_goto(current_path(), array('query' => array('search_term' => $searchstring)));
}

function ed_task_listing_for_students_access($test, $node)
{
  $tasknids = _ed_get_group_tasks_for_group_task_page($node->nid);
  if (empty($tasknids)) {
    return false;
  }
  $account = $GLOBALS['user'];
  if (in_array('administrator', $account->roles)) {
    return false;
  }

  if (in_array('supervisor', $account->roles)) {
    return false;
  }

  if ($node->uid === $account->uid) {
    return false;
  }

  if (!in_array(OG_ADMINISTRATOR_ROLE, og_get_user_roles('node', $node->nid, $account->uid, FALSE))) {
    return true;
  }

  return false;
}

function ed_task_listing_for_students($test, $node)
{
  $content = array();
  drupal_add_css(drupal_get_path('module', 'ed_cluster') . '/task_manager.css');
  $tasknids = _ed_get_group_tasks_for_group_task_page($node->nid);


  global $user;


  //Get user study group field
  $wrapper = entity_metadata_wrapper('user', $user->uid);
  $user_study_group = $wrapper->ed_field_study_group->value();

  //Check if these tasks belong to this user study group
  foreach ($tasknids as $key => $tasknid) {

    $wrapper = entity_metadata_wrapper('node', $tasknid);
    $task_study_groups = $wrapper->ed_task_field_study_group->raw();

    if (!empty($task_study_groups)) {
      if (isset($user_study_group)) {

        if (in_array($user_study_group, $task_study_groups) == false) {
          unset($tasknids[$key]);
        }

      } else {
        unset($tasknids[$key]);
      }


    }
  }

  $tasknodes = node_load_multiple($tasknids);


  //attach answered data
  foreach ($tasknodes as &$tasknode) {
    $answer_nid = _ed_get_answer_nid($user->uid, $tasknode->nid);
    $tasknode->is_answered = !empty($answer_nid);
    if ($tasknode->is_answered) $tasknode->answer_nid = $answer_nid[0];
    unset($tasknode);
  };


  // sort by unanswered first, due date second, created last
  uasort($tasknodes, function ($a, $b) {
    if (!$a->is_answered && $b->is_answered) return -1;
    if (!$b->is_answered && $a->is_answered) return 1;
    $d = $a->ed_task_due_date[LANGUAGE_NONE][0]['value'] - $b->ed_task_due_date[LANGUAGE_NONE][0]['value'];
    if ($d == 0) return $b->created - $a->created;
    return $d;
  });

  $header = array(t('Task'), t('Due Date'), t('Status'));

  foreach ($tasknodes as $tasknode) {
    $titlelink = l($tasknode->title, 'node/' . $tasknode->nid);
    $deadline = format_date($tasknode->ed_task_due_date[LANGUAGE_NONE][0]['value'], 'custom', 'd/m/Y');

    $tmp_data = array('data' => '', 'class' => '');

    if ($tasknode->is_answered) {
      $status = _ed_check_if_accepted($tasknode->answer_nid);

      if (empty($status)) {
        $tmp_data['class'] = 'unchecked';
        $tmp_data['data'] = t('Answered, Unchecked');
        $tmp_data['title'] = t('Unchecked');
      } else {
        $last_status = $status;
        switch ($last_status) {
          case('accepted'):
            $tmp_data['class'] = 'answered';
            $tmp_data['data'] = t('Answered, Accepted');
            $tmp_data['title'] = t('Accepted');
            break;
          case('rejected'):
            $tmp_data['class'] = 'rejected';
            $tmp_data['data'] = t('Answered, Rejected');
            $tmp_data['title'] = t('Rejected');
            break;
          case('checked'):
            $tmp_data['class'] = 'checked';
            $tmp_data['data'] = t('Answered, Checked');
            $tmp_data['title'] = t('Checked');
            break;
          case('unchecked'):
            $tmp_data['class'] = 'unchecked';
            $tmp_data['data'] = t('Answered, Unchecked');
            $tmp_data['title'] = t('Unchecked');
            break;
        }
      }

      $grade = _ed_get_last_grade($tasknode->answer_nid);
      $grade_str = $grade == 0 ? "" : t(', Graded ') . $grade;
      $tmp_data['data'] = l($tmp_data['data'] . $grade_str, 'node/' . $tasknode->answer_nid, array('html' => TRUE));

    } else {

      $tmp_data['class'] = 'unanswered';
      $tmp_data['data'] = t('Not Answered');
      $tmp_data['title'] = t('Not answered');

      //Check if it is a study group case
//          $wrapper = entity_metadata_wrapper('node', $tasknode->nid);
//          $task_study_groups = $wrapper->ed_task_field_study_group->raw();
//
//
//          if(!empty($task_study_groups)){
//
//            $tasks_to_user = _ed_get_tasks_to_user();
//            $is_to_user_task = false;
//            foreach ($tasks_to_user as $task_to_user){
//              if($task_to_user->nid == $tasknode->nid){
//                $is_to_user_task=true;
//              }
//            }
//
//
//            if(!$is_to_user_task){
//              //Get user study group field
//              $wrapper = entity_metadata_wrapper('user', $user->uid);
//              $user_study_group = $wrapper->ed_field_study_group->value();
//
//
//              if(isset($user_study_group)){
//                if(in_array($user_study_group, $task_study_groups) == false ){
//                  $tmp_data['class'] = 'na';
//                  $tmp_data['title'] = t('Not applicable');
//                }
//
//              }else{
//                $tmp_data['class'] = 'na';
//                $tmp_data['title'] = t('Not applicable');
//              }
//
//            }
//
//          }


      if (!empty($tasknode->{ED_FIELD_TO_GROUP_MEMBER}[LANGUAGE_NONE])) {
        if (!in_array($user->uid, array_map(function ($element) {
          return $element['target_id'];
        }, $tasknode->{ED_FIELD_TO_GROUP_MEMBER}[LANGUAGE_NONE]))) {
          $tmp_data['class'] = 'can-not-be-answered';
          $tmp_data['data'] = t('Can not be answered');
          $tmp_data['title'] = t('Can not be answered');
        }
      }
    }

    $is_published = null;
    //Check if node is published
    if (!empty($tasknode->answer_nid)) {
      $query = db_select('node', 'n')
          ->fields('n', array('status'))
          ->condition('n.nid', $tasknode->answer_nid)
          ->execute();
      $result = $query->fetchObject();
      $is_published = $result ? $result->status : FALSE;
    }


    if ($tasknode->answer_nid && $is_published == false) {
      $tmp_data['data'] .= ' <span class="label label-danger">' . t('Not published') . '</span>';
    }


    $rows[] = array(
        'data' => array(
            'title' => $titlelink,
            'deadline' => $deadline,
            'status' => $tmp_data,
        ),
    );

  }

  if (isset($rows)) {
    $content['tasks-table'] = array(
        '#theme' => 'table',
        '#rows' => $rows,
        '#header' => $header,
    );
  }

  $content['pager'] = array('#theme' => 'pager');
  return $content;
}

/**
 * Retruns a content of groups listing page for current user.
 * @return array Array with page structure
 */
function ed_cluster_my_listing_page()
{
  drupal_set_title(t('My active groups'));

  $content = [];

  $content['sorting'] = drupal_get_form('_ed_get_sorting_options');
  $sql_order = ed_get_sorting_type($content);

  $groups = ed_cluster_get_current_user_clusters($sql_order);

  if (empty($groups)) {
    $content['groups-not-found'] = array(
        '#type' => 'markup',
        '#prefix' => '<div class="ed-message ed-message-notice">',
        '#markup' => t('Hi! Nothing to show here at the moment. Join some groups to see them here.'),
        '#suffix' => '</div>',
    );
  } else {
    drupal_add_css(drupal_get_path('module', 'ed_cluster') . '/group-listing.css');
    $nodes = node_load_multiple($groups);

    $content['clusters'] = ed_generate_grid_of_groups($nodes);
    $content['pager'] = array(
        '#theme' => 'pager',
    );
  }

  return $content;
}


function ed_all_groups_listing()
{
  drupal_set_title(t('All Groups'));
  $content = array();
  $content['sorting'] = drupal_get_form('_ed_get_sorting_options');
  $sql_order = ed_get_sorting_type($content);
  drupal_add_css(drupal_get_path('module', 'ed_cluster') . '/group-listing.css');
  $remove_user_groups = TRUE;
  $og_groups = ed_cluster_get_clusters($sql_order, $remove_user_groups, false);
  if (!empty($og_groups)) {
    $nodes = node_load_multiple($og_groups);


    $content['clusters'] = ed_generate_grid_of_groups($nodes);
    $content['pager'] = array(
        '#theme' => 'pager',
    );

  }
  return $content;
}


function ed_generate_grid_of_groups($nodes)
{
  $counter = 1;
  $row = 1;

  drupal_add_js('https://cdn.jsdelivr.net/npm/sweetalert2@7.28.4/dist/sweetalert2.all.min.js', 'external');
  drupal_add_js(drupal_get_path('module', 'ed_cluster') . '/js/grid_of_groups.js');


  $build['row-' . $row] = array(
      '#type' => 'markup',
      '#prefix' => '<div class="row">',
      '#suffix' => '</div>',
  );


  foreach ($nodes as $node) {

    if (isset($node->nid)) {


      $title = l($node->title, 'node/' . $node->nid);
      if ($node->ed_field_group_state [LANGUAGE_NONE][0]['value'] == 0) {
        $build['row-' . $row]['node-' . $node->nid] = array(
            '#type' => 'markup',
            '#prefix' => '<div class="col-xs-12 col-sm-4 col-md-3 col-lg-3 text-center"><div class="price-box-01 group inactive"><div class="ribbon ribbon-top-left"><span>' . t('Mitteaktiivne') . '</span></div>',
            '#suffix' => '</div></div>',
        );
      } else {
        $build['row-' . $row]['node-' . $node->nid] = array(
            '#type' => 'markup',
            '#prefix' => '<div class="col-xs-12 col-sm-4 col-md-3 col-lg-3 text-center"><div class="price-box-01 group">',
            '#suffix' => '</div></div>',
        );
      }

      $build['row-' . $row]['node-' . $node->nid]['list-item'] = array(
          '#type' => 'markup',
          '#prefix' => '<div class="product-list__item">',
          '#suffix' => '</div>',
      );
      $build['row-' . $row]['node-' . $node->nid]['list-item']['list-img'] = array(
          '#type' => 'markup',
          '#prefix' => '<figure class="product-list__img">',
          '#markup' => !empty($node->ed_field_featured_image) ? l('<img src="' . image_style_url('medium', $node->ed_field_featured_image[LANGUAGE_NONE][0]['uri']) . '">', 'node/' . $node->nid, array('html' => TRUE)) : l('<img src="' . $GLOBALS['base_url'] . '/' . path_to_theme() . '/images/icons/ed_group_icon_default.png">', 'node/' . $node->nid, array('html' => true)),
          '#suffix' => '</figure>',
      );
      $build['row-' . $row]['node-' . $node->nid]['title'] = array(
          '#type' => 'markup',
          '#prefix' => '<h3 class="product-list__title">',
          '#markup' => $title,
          '#suffix' => '</h3>',
      );


      if ($node->group_access[LANGUAGE_NONE][0]['value']) {

        $build['row-' . $row]['node-' . $node->nid]['status'] = array(
            '#type' => 'markup',
            '#markup' => '<a class="product-list__category padding-bottom-10" href="' . 'node/' . $node->nid . '">' . t('Private Group') . ' <i class="fa fa-lock" aria-hidden="true"></i></a>',
            '#suffix' => '<br>',
        );
      } else {
        $build['row-' . $row]['node-' . $node->nid]['status'] = array(
            '#type' => 'markup',
            '#markup' => l(t('Open Group'), 'node/' . $node->nid, array('attributes' => array('class' => 'product-list__category padding-bottom-10'))),
            '#suffix' => '<br>',
        );
      }


      if (!(og_is_member('node', $node->nid)) && $node->ed_field_group_state[LANGUAGE_NONE][0]['value']) {

        $build['row-' . $row]['node-' . $node->nid]['button'] = array(
            '#type' => 'markup',
            '#markup' => '<a href="' . url('group/node/' . $node->nid . '/subscribe/og_user_node') . '"><button class="price-btn" type="button">' . t('Join') . '</button></a>'
        );

        //Add access denied alerts if this is private group
        if ($node->group_access[LANGUAGE_NONE][0]['value'] && !user_access('administer nodes')) {

          $build['row-' . $row]['node-' . $node->nid]['title']['#prefix'] = '<h3 class="product-list__title no-access">';
          $build['row-' . $row]['node-' . $node->nid]['list-item']['list-img']['#prefix'] = '<figure class="product-list__img no-access">';

        }


      } else if (og_is_member('node', $node->nid)) {
        $build['row-' . $row]['node-' . $node->nid]['button'] = array(
            '#type' => 'markup',
            '#markup' => '<a href="' . url('group/node/' . $node->nid . '/unsubscribe') . '"><button class="price-btn leave-group" type="button">' . t('Leave') . '</button></a>'
        );
      }


    }


    $counter++;


  }
  return $build;
}


function ed_cluster_my_inactive_listing_page()
{
  drupal_set_title(t('My inactive groups'));
  $content = array();
  $content['sorting'] = drupal_get_form('_ed_get_sorting_options');
  $sql_order = ed_get_sorting_type($content);
  drupal_add_css(drupal_get_path('module', 'ed_cluster') . '/group-listing.css');
  $og_groups = ed_cluster_get_current_user_clusters($sql_order, true);
  if (!empty($og_groups)) {
    $nodes = node_load_multiple($og_groups);

    $content['clusters'] = ed_generate_grid_of_groups($nodes);
    $content['pager'] = array(
        '#theme' => 'pager',
    );

  }
  return $content;
}


/**
 * Implements hook_menu_alter().
 */
function ed_cluster_menu_alter(&$items)
{
  if (isset($items['node/%/group'])) {
    $items['node/%/group']['title callback'] = '_ed_cluster_group_menu_title';
    $items['node/%/group']['title arguments'] = array('node', 1);
  }
}

function ed_cluster_og_ui_get_group_admin_alter(&$data, $gid)
{
  global $user;
  if (!in_array('administrator', $user->roles)) {
    unset($data['roles']);
    unset($data['permissions']);
  }
}


function ed_group_content_listing_access($filler, $gnode, $type)
{

  if ($gnode->type != 'ed_cluster' && $gnode->type != 'ed_subgroup') {
    return false;
  }
  return node_access('view', $gnode);


}


/*
 * Check if this is group Hindajad and enable Qualifications Portfolio tab
 */
function ed_group_assessors_ed_q_portfolio_listing_access($filler, $gnode, $type)
{

  if (!($gnode->title == 'Hindajad')) {
    return false;
  }

  return ed_group_content_listing_access($filler, $gnode, $type);
}

function ed_listing_from_group($filler, $gnode, $type)
{


  $content = array();

  if (node_access('create', $type) && og_is_member('node', $gnode->nid)) {
    $destination = _ed_cluster_destination_for_group_node_type($gnode, $type);

    $type_dashed = str_replace('_', '-', $type);
    $content['add-new-container'] = array(
        '#type' => 'container',
        '#attributes' => array(
            'class' => array('ed-add-new-node', 'ed-add-new-' . $type_dashed),
        ),
    );
    if ($type != 'ed_q_portfolio' && $type != 'ed_event') {
      $content['add-new-container']['add-new-link'] = array(
          '#type' => 'markup',
          '#markup' => l(t('Add new'), 'node/add/' . $type_dashed, array('query' => array('og_group_ref' => $gnode->nid, 'destination' => $destination), 'attributes' => array('class' => 'btn btn-success'))),
      );
    }
  }

  // This override will display both ed_blog and ed_answer
  // when blog listing is displayed
  if ('ed_blog' == $type) {
    $type = array($type);
    $type[] = 'ed_answer';
  }
  $nosorting = array('ed_news', 'ed_event', 'ed_forum', 'ed_blog', 'ed_answer', 'ed_q_portfolio');
  if (is_array($type)) {
    $content_nids = _ed_get_group_content_by_type($gnode->nid, $type);
  } else {
    if (!in_array($type, $nosorting)) {
      $content['sorting'] = drupal_get_form('_ed_get_sorting_options');
      $sql_order = ed_get_sorting_type($content);
      $content_nids = _ed_get_group_content_by_type($gnode->nid, $type, $sql_order);
    } else {
      $content_nids = _ed_get_group_content_by_type($gnode->nid, $type);
    }
  }

  //$content_nids = _ed_get_group_content_by_type($gnode->nid, $type);
  $nodes = node_load_multiple($content_nids);

  $content['listing'] = array(
      '#type' => 'container',
      '#attributes' => array(
          'class' => array('ed-group-content-listing'),
      ),
  );

  if ($nodes) {
    $build = node_view_multiple($nodes);
    $build['pager'] = array(
        '#theme' => 'pager',
        '#weight' => 5,
    );
    $content['listing']['content'] = $build;
  }

  return $content;
}

/**
 * Implements hook_field_extra_fields().
 */
function ed_cluster_field_extra_fields()
{
  $extra['node']['ed_cluster']['display'] = array(
      'ed_cluster_content' => array(
          'label' => t('Group content paged'),
          'description' => t('desc'),
          'weight' => 10,
      ),
  );
  return $extra;
}

/**
 * Implements hook_preprocess_node().
 */
function ed_cluster_preprocess_node(&$vars)
{
  if ('ed_cluster' == $vars['node']->type) {
    if (isset($vars['dashboard']) && TRUE == $vars['dashboard']) {
      $vars['user_picture'] = '';
      $vars['display_submitted'] = FALSE;
      $vars['classes_array'] [] = 'node-dashboard';
    }

    drupal_add_js(drupal_get_path('module', 'edidaktikum') . '/js/ed_likes.js', 'file');
    drupal_add_js(drupal_get_path('module', 'edidaktikum') . '/js/ed_share.js', 'file');

    if ($vars['view_mode'] == 'full') {
      $vars['theme_hook_suggestions'][] = 'node__ed_cluster_full';
    }


    if ('teaser' === $vars['view_mode'] && isset($vars['group_access'][LANGUAGE_NONE][0]['value']) && 1 == $vars['group_access'][LANGUAGE_NONE][0]['value']) {
      $vars['classes_array'][] = 'ed-group-private';
    }
  }
}

/**
 * Implements hook_node_view().
 */
function ed_cluster_node_view($node, $view_mode, $langcode)
{
  switch ($node->type) {
    case 'ed_cluster':
      if ($view_mode == 'full') {
        menu_tree_set_path('main-menu', 'clusters');
        $content_nids = _ed_get_group_content($node->nid);
        $content = node_load_multiple($content_nids);

        $extracted_study_groups_count = 0;

        // Get rid of unrelated study group tasks
        // User with task manager access sees the same number as in Task Manager (includes the tasks of all the study groups)
        if (!ed_task_manager_access('node', $node)) {
          foreach ($content as $key => $content_node) {
            if ($content_node->type == 'ed_task') {
              if (!empty($content_node->ed_task_field_study_group)) {
                //Get user study group field
                global $user;
                $wrapper = entity_metadata_wrapper('user', $user->uid);
                $user_study_group = $wrapper->ed_field_study_group->value();

                if (isset($user_study_group)) {

                  if (in_array(array('value' => $user_study_group), $content_node->ed_task_field_study_group[LANGUAGE_NONE]) == false) {

                    unset($content[$key]);
                    $extracted_study_groups_count++;

                    //$destination = "node/{$node->nid}/tasks";

                    //$node->content['ed_cluster_content'][$type]['heading']['#markup'] = l(_ed_cluster_plural_title_for_group_node_type($type) . ' (' . t('Total') . ': ' . $type_nodes_count . ')', $destination);
                  }
                } else {
                  unset($content[$key]);
                  $extracted_study_groups_count++;

                  //$destination = "node/{$node->nid}/tasks";

                  //$node->content['ed_cluster_content'][$type]['heading']['#markup'] = l(_ed_cluster_plural_title_for_group_node_type($type) . ' (' . t('Total') . ': ' . $type_nodes_count . ')', $destination);
                }

              }
            }
          }
        }


        $types = array();
        foreach ($content as $content_single) {
          $types[] = $content_single->type;
        }

        if (in_array('ed_task', $types)) {
          array_unshift($types, 'ed_task');
        }
        $types_unique = array_unique($types);
        $options = array(
            'attributes' => array(),
            'query' => array(
                'og_group_ref' => $node->nid,
                'destination' => 'node/' . $node->nid,
            ),
        );

        // Check if current user is a member of the group
        $is_group_member = og_is_member('node', $node->nid);

        foreach ($types_unique as $type) {
          $show_link = true;
          $destination_no_ed_task_manager_access = "";
          if ($type != 'ed_answer' && $type != 'ed_subgroup') {
            if ($type == 'ed_task') {
              if (!ed_task_manager_access('node', $node)) {
                $show_link = false;
                $destination_no_ed_task_manager_access = "node/{$node->nid}/tasks";
              }
            }

            $type_nodes_count = _ed_get_group_content_by_type_count($node->nid, $type);
            //Extract unrelated study groups tasks
            if ($type == 'ed_task') {
              $type_nodes_count = $type_nodes_count - $extracted_study_groups_count;
            }


            $headingmarkup = _ed_cluster_plural_title_for_group_node_type($type) . ' (' . t('Total') . ': ' . $type_nodes_count . ')';
            if ($show_link) {
              $headingmarkup = l($headingmarkup, _ed_cluster_destination_for_group_node_type($node, $type));
            } else {
              $headingmarkup = l($headingmarkup, $destination_no_ed_task_manager_access);
            }

            $node->content['ed_cluster_content'][$type]['heading'] = array(
                '#type' => 'markup',
                '#prefix' => '<h2 class="' . $type . '">',
                '#markup' => $headingmarkup,
                '#suffix' => '</h2>',
            );
            // Add new link is only shown to group members
            //if ($is_group_member) {
            //  $node->content['ed_cluster_content'][$type]['heading']['#markup'] .= '<em class="ed-og-add-new">'.l(t('Add new'), 'node/add/'.str_replace('_', '-',$type), $options).'</em>';
            //}
            $last_nodes = _ed_get_last_content_by_type($type, $content);
            foreach ($last_nodes as $key => $last_node_single) {
              $tere = node_view($last_node_single, 'teaser');

              $node->content['ed_cluster_content'][$type][$last_node_single->nid] = $tere;


// If ed_q_portfolio does not use teaser
//                if($tere['#bundle']=='ed_q_portfolio'){
//
//                  $ed_q_portfolio_node = $tere['#node'];
//
//                  $statuses_list = _ed_q_portfolio_status_list();
//
//                  if(!empty($ed_q_portfolio_node->ed_q_portfolio_field_status)) {
//                    $node->content['ed_cluster_content'][$type][$last_node_single->nid]['status']=array(
//                        '#type' => 'markup',
//                        '#prefix' => '<div class="description">',
//                        '#markup' =>  $statuses_list[$ed_q_portfolio_node->ed_q_portfolio_field_status[LANGUAGE_NONE][0]['value']],
//                        '#suffix' => '</div>',
//                    );
//                  }else{
//                    $node->content['ed_cluster_content'][$type][$last_node_single->nid]['status']=array(
//                        '#type' => 'markup',
//                        '#prefix' => '<div class="description">',
//                        '#markup' =>  t('Published, not reviewed'),
//                        '#suffix' => '</div>',
//                    );
//                  }
//
//
//                  if(!empty($ed_q_portfolio_node->ed_field_to_group_member)) {
//                    $assessor_user = user_load($ed_q_portfolio_node->ed_field_to_group_member[LANGUAGE_NONE][0]['target_id']);
//                    $wrapper = entity_metadata_wrapper('user', $assessor_user);
//
//
//
//                    $node->content['ed_cluster_content'][$type][$last_node_single->nid]['assessor']=array(
//                        '#type' => 'markup',
//                        '#prefix' => '<div class="description">',
//                        '#markup' =>  t('Assigned to ').l($wrapper->ed_field_full_name ->value(), '/user/'.$wrapper->uid->value()),
//                        '#suffix' => '</div>',
//                    );
//                  }else{
//                    $node->content['ed_cluster_content'][$type][$last_node_single->nid]['assessor']=array(
//                        '#type' => 'markup',
//                        '#prefix' => '<div class="description">',
//                        '#markup' =>  t('Not assigned ').l('Assign an assessor', '/node/'.$ed_q_portfolio_node->nid),
//                        '#suffix' => '</div>',
//                    );
//                  }
//
//
//
//                }
            }

          }
        }

        // sort users alphabetically in js since hook_views_default_views_alter doesn't provide enough flexibility to sort by data inside a blob
        drupal_add_js('jQuery(document).ready(function(){
         var og_members_container = document.querySelector(".widget.tags-cloud .tags-cloud__list");
         var og_members_sortable = [];
         for (var i = 0; i < og_members_container.childNodes.length; i++) {
            var node = og_members_container.childNodes[i];
            if (typeof node.innerHTML === "undefined") continue;
            og_members_sortable.push({"inner" : node.innerHTML, "name" : node.childNodes[0].innerText});
         }
         og_members_sortable.sort(function(a,b){return (a.name>b.name) ? 1 : ((b.name > a.name) ? -1 : 0);});
         var og_members_used = 0;
         for (var i = 0; i < og_members_container.childNodes.length; i++) {
            var node = og_members_container.childNodes[i];
            if (typeof node.innerHTML === "undefined") continue;
            node.innerHTML = og_members_sortable[og_members_used++].inner;
         }
        });', 'inline');
      } else if ('dashboard' == $view_mode) {
        $recent_content = _ed_get_group_recent_content($node->nid, 5);
        $recnt_content_nodes = node_load_multiple($recent_content);
        if ($recnt_content_nodes) {
          $items = array();
          foreach ($recnt_content_nodes as $single) {
            $single_action = ($single->created == $single->changed) ? 'created' : 'changed';

            $single_type = $single->type;

            if ($single_type == 'ed_task') {
              $single_type = t('Task');
            } else if ($single_type == 'ed_news') {
              $single_type = t('news');
            } else {
              $single_type = node_type_get_name($single);
            }
            // Determine the user who really acted in case of changed
            if ('changed' == $single_action) {
              $query = db_select('node_revision', 'nrv')
                  ->fields('nrv', array('uid'))
                  ->condition('nid', $single->nid)
                  ->condition('vid', $single->vid)
                  ->range(0, 1)
                  ->orderby('nrv.timestamp', 'DESC');
              $real_actor = $query->execute()->fetchObject();
              if ($real_actor) {
                $single_user_acc = user_load($real_actor->uid);
              } else {
                $single_user_acc = user_load($single->uid);
              }
            } else {
              $single_user_acc = user_load($single->uid);
            }

            $single_name = l(edidaktikum_get_full_name_for_user_account($single_user_acc), 'user/' . $single->uid);

            // Deal with special case of ed_answer
            if ('ed_answer' == $single->type) {
              $single_title = l(ed_get_answer_title($single), 'node/' . $single->nid);
            } else {
              $single_title = l($single->title, 'node/' . $single->nid);
            }

            if ('created' == $single_action) {
              $items[] = array(
                  'data' => t('!name added !node @time', array('!name' => $single_name, '!node' => $single_title, '@time' => format_date($single->created, 'short'))) . ' (' . ucfirst($single_type) . ')',
              );
            } else {
              $items[] = array(
                  'data' => t('!name changed !node @time', array('!name' => $single_name, '!node' => $single_title, '@time' => format_date($single->changed, 'short'))) . ' (' . ucfirst($single_type) . ')',
              );

            }
          }
          $node->content['recent-activity'] = array(
              '#theme' => 'item_list',
              '#items' => $items,
              '#attributes' => array(
                  'class' => array('ed-group-latest-updates-listing'),
              ),
          );
        } else {
          $node->content['recent-activity'] = array(
              '#type' => 'container',
              '#attributes' => array(
                  'class' => array('ed-no-recent-activity'),
              ),
          );
          $node->content['recent-activity']['no-recent-activity'] = array(
              '#type' => 'markup',
              '#markup' => t('No recent activity'),
          );
        }
      }
      break;
  }
}

function _ed_get_last_content_by_type($type, $content)
{
  $all_latest_nids = array();
  foreach ($content as $content_single) {
    if ($content_single->type == $type) {
      $all_latest_nids[] = $content_single;
    }
  }
  usort($all_latest_nids, "cmp");
  $count = 0;
  $latest_nids = array();
  foreach ($all_latest_nids as $nid) {
    $latest_nids[] = $nid;
    $count++;
    if ($count == 3) {
      break;
    }
  }

  return $latest_nids;

}

function cmp($a, $b)
{
  return strcmp($b->created, $a->created);
}

/**
 * Returns recently created/modified content of the group.
 * @param $guid
 *   Group node identifier
 * @param $limit
 *   Optional number of results to be returned
 * @return
 *   An array of node identifiers if any exist
 */
function _ed_get_group_recent_content($gid, $limit = NULL)
{
  $query = db_select('node', 'n');
  $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type = 'node'");
  $query->fields('n', array('nid'))
      ->condition('ogm.gid', $gid)
      ->condition('n.nid', $gid, '!=')
      ->addTag('node_access')
      ->orderBy('n.changed', 'DESC')
      ->distinct();
  if ($limit) {
    $query->range(0, 5);
  }
  $result = $query->execute()->fetchCol();
  return $result;
}

function _ed_get_group_content($gid)
{
  $query = db_select('node', 'n');
  $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type = 'node'");
  $query->fields('n', array('nid'))
      ->condition('ogm.gid', $gid)
      ->condition('n.nid', $gid, '!=')
      ->addTag('node_access')
      ->distinct();
  $result = $query->execute()->fetchCol();
  return $result;
}

function _ed_get_group_content_by_type($gid, $type, $order = 'DESC')
{
  $query = db_select('node', 'n')
      ->extend('PagerDefault');
  $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type = 'node'");
  $query->fields('n', array('nid'))
      ->condition('ogm.gid', $gid)
      ->condition('n.nid', $gid, '!=')
      ->condition('n.type', $type)
      ->addTag('node_access');
  if ($order == 'title') {
    $query->orderBy('n.title', 'ASC');
  } else {
    $query->orderBy('n.created', $order);
  }

  $query->limit(ed_get_paging_nr());
  $query->distinct();
  $result = $query->execute()->fetchCol();
  return $result;
}

/**
 * Responds with node identifiers for group according to type provided,
 * uses TableSort based on provided header data.
 * @param int $gid Group identifier
 * @param string $type Node type
 * @param array $header Table header
 * @return array          Array of node identifiers
 */
function _ed_get_group_content_by_type_with_table_sort($gid, $type, $header)
{
  $query = db_select('node', 'n');
  $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type = 'node'");
  $query->fields('n', array('nid'))
      ->condition('ogm.gid', $gid)
      ->condition('n.nid', $gid, '!=')
      ->condition('n.type', $type)
      ->addTag('node_access')
      ->extend('TableSort')
      ->orderByHeader($header)
      ->extend('PagerDefault')
      ->limit(ed_get_paging_nr());
  $query->distinct();
  $result = $query->execute()->fetchCol();
  return $result;
}

function _ed_get_group_tasks_for_group_task_page($gid)
{
  $query = db_select('node', 'n');
  $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type = 'node'");
  $query->fields('n', array('nid'))
      ->condition('ogm.gid', $gid)
      ->condition('n.nid', $gid, '!=')
      ->condition('n.type', 'ed_task')
      ->addTag('node_access')
      ->orderBy('n.sticky', 'DESC');
  $query->distinct();
  $result = $query->execute()->fetchCol();
  return $result;
}


/**
 * Returns count for nodes of centain type within a group.
 * @param int $gid Group identifier
 * @param string $type Node type
 *
 * @return int
 */
function _ed_get_group_content_by_type_count($gid, $type)
{
  $query = db_select('node', 'n');
  $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type = 'node'");
  $query->fields('n', array('nid'))
      ->condition('ogm.gid', $gid)
      ->condition('n.nid', $gid, '!=')
      ->condition('n.type', $type)
      ->addTag('node_access')
      ->distinct();
  return $query->countQuery()->execute()->fetchField();
}


/**
 * Check if current user is either administrator, group
 * creator or group admin.
 * @return boolean
 */
function ed_task_manager_access($test, $node)
{
  if ('ed_cluster' != $node->type) {
    return false;
  }

  $account = $GLOBALS['user'];
  if (in_array('administrator', $account->roles)) {
    return true;
  }

  if (in_array('supervisor', $account->roles)) {
    return true;
  }

  if ($node->uid === $account->uid) {
    return true;
  }

  if (in_array(OG_ADMINISTRATOR_ROLE, og_get_user_roles('node', $node->nid, $account->uid, FALSE))) {
    return true;
  }

  return false;
}


function ed_task_manager($test, $node)
{
  //  stuff
  menu_tree_set_path('main-menu', 'clusters');
  drupal_add_css(drupal_get_path('module', 'ed_cluster') . '/task_manager.css');
  drupal_add_js(drupal_get_path('module', 'ed_cluster') . '/js/ed_task_manager_task_filter.js');
  drupal_add_js(drupal_get_path('module', 'ed_cluster') . '/js/ed_cluster_tooltip.js');

  //  more stuff
  $tasks = ed_get_group_tasks($node->nid, true, true, true);
  $content = [];

  //  add new container button
  $content['add-new-container'] = [
      '#type' => 'container',
      '#attributes' => ['class' => ['ed-add-new-node', 'ed-add-new-task']],

      'add-new' => [
          '#type' => 'markup',
          '#markup' => l(t('Add new'), 'node/add/ed-task',
              ['attributes' => ['class' => ['btn btn-success']],
                  'query' => [
                      'og_group_ref' => $node->nid,
                      'destination' => _ed_cluster_destination_for_group_node_type($node, 'ed_task')
                  ]
              ]
          )
      ],
      'download-table' => [
          '#type' => 'markup',
          '#markup' => l(t('Download csv'), 'node/' . $node->nid . '/task-manager/download',
              ['attributes' => ['class' => ['btn btn-success ed-download-tasks']]]
          )
      ],
  ];

  //  filter thingy
  $task_titles = [t('All tasks')];
  foreach ($tasks as $task) $task_titles[$task['nid']] = $task['title'];

  $content['task-filter-container'] = [
      '#type' => 'container',
      '#attributes' => ['class' => ['ed-filter-tasks']],

      'container' => [
          '#type' => 'container',
          '#attributes' => ['class' => ['row']],

          'selection-box' => [
              '#type' => 'select',
              '#title' => t('Select task to filter'),
              '#options' => $task_titles,
              '#prefix' => '<div class="span4 ed_filter_select">',
              '#suffix' => '</div>',
              '#value' => (isset($_GET['tasknid']) ? $_GET['tasknid'] : 0),
              '#attributes' => [
                  'class' => ['ed_task_selection_for_filtering'],
                  'data-cluster' => $node->nid
              ]
          ],

          'submit-button' => [
              '#type' => 'markup',
              '#prefix' => '<div class="span4 ed_filter_button">',
              '#suffix' => '</div>',
              '#markup' => '<button class="btn btn-primary ed_filter_tasks">' . t('Filter') . '</button>'
          ]

      ]
  ];

  //  if task id filter is set, remove all other tasks
  if (isset($_GET['tasknid'])) {
    foreach ($tasks as $task) {
      if ($task['nid'] == $_GET['tasknid']) {
        $tasks = [$task];
        break;
      }
    }
  }

  //  get members and separate out admins
  $members = ed_get_group_members($node->nid, true, true, true);
  $admins = ed_filter_admins($members);

  $headers = _ed_get_task_manager_headers($tasks);
  $rows = _ed_get_task_manager_rows($tasks, $members);


  $content['table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => $headers,
      '#sticky' => false,
      '#attributes' => array('data-averaging_table' => t("Average"), 'data-sticky_headers' => '', 'class' => array('table table-bordered scroll'))
  );

  return $content;
}

function ed_task_manager_download($node)
{
  $tasks = ed_get_group_tasks($node->nid, true, true, true);

  $members = ed_get_group_members($node->nid, true, true, true);
  $admins = ed_filter_admins($members);

  $headers = _ed_get_task_manager_headers_for_csv($tasks);
  $rows = _ed_get_task_manager_rows_for_csv($tasks, $members);

  $handle = fopen('php://temp', 'wb');

  //write header row
  $csvheader = [];
  foreach ($headers as $header) {
    $title = ed_get_value_from_html('title', $header);

    if ($title == false) $title = $header;

    $csvheader [] = $title;
  }
  fputcsv($handle, $csvheader);

  //write member rows
  foreach ($rows as $row) {
    //write one row
    $csvrow = [];
    foreach ($row['data'] as $cell) {
      if (is_array($cell)) {
        $string = $cell['title'];
      } else if (is_string($cell)) {
        $string = strip_tags($cell);
      }
      $csvrow [] = $string;
    }
    fputcsv($handle, $csvrow);
  }

  rewind($handle);

  drupal_add_http_header('Content-Type', 'text/csv');
  drupal_add_http_header('Content-Disposition', 'attachment; filename="answers.csv"');
  echo(stream_get_Contents($handle));
}

function _ed_get_task_manager_headers($tasks)
{
  $headers = [t('Name')];
  foreach ($tasks as $task) {
    $header = l(
        format_date($task['due_date'], 'custom', 'd.m'),
        'node/' . $task['nid'],
        ['attributes' => [
            'title' => $task['title'] . t(' - Due date: ') . format_date($task['due_date'], 'short'),
            'data-toggle' => 'tooltip',
            'data-placement' => 'bottom'
        ]]
    );
    $headers [] = $header;
  }
  return $headers;
}


function _ed_get_task_manager_headers_for_csv($tasks)
{
  $headers = [t('Name')];
  foreach ($tasks as $task) {
    $header = l(
        format_date($task['due_date'], 'custom', 'd.m'),
        'node/' . $task['nid'],
        ['attributes' => [
            'title' => $task['title'] . t(' - Due date: ') . format_date($task['due_date'], 'short'),
            'data-toggle' => 'tooltip',
            'data-placement' => 'bottom'
        ]]
    );
    $headers [] = $header;
    $headers [] = t('Grade');
  }
  return $headers;
}

function _ed_get_task_manager_rows($tasks, $members)
{
  $rows = [];
  foreach ($members as $member) {
    $row = ['data' => [l($member['full_name'], 'user/' . $member['uid'])]];

    //  construct cells
    foreach ($tasks as $task) {
      $cell = ['data' => '&nbsp'];

      if (ed_is_task_applicable($task, $member)) {
        //  if applicable, get answer and fill cell
        $answer = ed_get_answer($task['nid'], $member['uid'], false, true);

        //  title and class
        switch ($answer['status']) {
          case 'unanswered':
            $cell['class'] = 'unanswered';
            $cell['title'] = t('Not answered');
            break;

          case 'unchecked':
            $cell['class'] = 'unchecked';
            $cell['title'] = t('Unchecked');
            //Check if it is late submission - if submitted on the due date or later

            $changed = date('Y-m-d', $answer['changed']);
            $due_date = date('Y-m-d', $task['due_date']);


            if ($changed > $due_date) {
              $cell['data'] = '!&nbsp;';
            }

            break;

          case 'accepted':
            $cell['class'] = 'answered';
            $cell['title'] = t('Accepted');
            break;

          case 'checked':
            $cell['class'] = 'checked';
            $cell['title'] = t('Checked');
            break;

          case 'rejected':
            $cell['class'] = 'rejected';
            $cell['title'] = t('Rejected');
            break;

        }

        //  cell text is grade if graded, blank if ungraded, exclamation mark if late
        if ($answer['status'] != 'unanswered') {
          if ($answer['grade'] != 0) $cell['data'] = $answer['grade'];
          $cell['data'] = l($cell['data'], 'node/' . $answer['nid'], ['html' => TRUE]);
        }

      } else {
        //  not applicable
        $cell['class'] = 'na';
        $cell['title'] = t('Not applicable');
      }

      $row['data'] [] = $cell;
    }

    $rows [] = $row;
  }

  return $rows;
}

function _ed_get_task_manager_rows_for_csv($tasks, $members)
{
  $rows = [];
  foreach ($members as $member) {
    $row = ['data' => [l($member['full_name'], 'user/' . $member['uid'])]];

    //  construct cells
    foreach ($tasks as $task) {
      $cell = ['data' => '&nbsp'];
      $cell_grade = ['data' => '', 'title' => ''];

      if (ed_is_task_applicable($task, $member)) {
        //  if applicable, get answer and fill cell
        $answer = ed_get_answer($task['nid'], $member['uid'], false, true);

        //  title and class
        switch ($answer['status']) {
          case 'unanswered':
            $cell['class'] = 'unanswered';
            $cell['title'] = t('Not answered');
            break;

          case 'unchecked':
            $cell['class'] = 'unchecked';
            $cell['title'] = t('Unchecked');
            //Check if it is late submission - if submitted on the due date or later

            $changed = date('Y-m-d', $answer['changed']);
            $due_date = date('Y-m-d', $task['due_date']);


            if ($changed > $due_date) {
              $cell['data'] = '!&nbsp;';
            }

            break;

          case 'accepted':
            $cell['class'] = 'answered';
            $cell['title'] = t('Accepted');
            break;

          case 'checked':
            $cell['class'] = 'checked';
            $cell['title'] = t('Checked');
            break;

          case 'rejected':
            $cell['class'] = 'rejected';
            $cell['title'] = t('Rejected');
            break;

        }

        //  cell text is grade if graded, blank if ungraded, exclamation mark if late
        if ($answer['status'] != 'unanswered') {
          if ($answer['grade'] != 0) $cell_grade['title'] = $answer['grade'];
        }

      } else {
        //  not applicable
        $cell['class'] = 'na';
        $cell['title'] = t('Not applicable');
      }

      $row['data'] [] = $cell;
      $row['data'] [] = $cell_grade;
    }

    $rows [] = $row;
  }

  return $rows;
}

function ed_get_value_from_html($key, $html)
{
  $value = '';
  $string = $key . '="';
  $i = strpos($html, $string);

  if ($i == false) return false;

  $i += strlen($string);
  while (($k = $html[$i]) != '"') {
    $value .= $html[$i];
    $i++;
  }
  return $value;
}

function _ed_get_answer_nid($uid, $tnid)
{
  $query = db_select('node', 'n');
  $query->join('field_data_field_ref_to_task', 'ref', 'n.nid = ref.entity_id');
  $query->fields('n', array('nid'));
  $query->condition('n.uid', $uid)
      ->condition('ref.field_ref_to_task_target_id', $tnid);
  $result = $query->execute()->fetchCol();
  return $result;
}


function _ed_check_if_answered($uid, $tnid)
{
  $query = db_select('node', 'n');
  $query->join('field_data_field_ref_to_task', 'ref', 'n.nid = ref.entity_id');
  $query->fields('n', array('nid'));
  $query->condition('n.uid', $uid)
      ->condition('n.status', 1);
  $query->condition('ref.field_ref_to_task_target_id', $tnid);
  $result = $query->execute()->fetchCol();
  if (!empty($result)) {
    return TRUE;
  } else {
    return FALSE;
  }


}

function _ed_get_last_grade($answer)
{
  $answernode = node_load($answer);
  $groupnid = $answernode->og_group_ref[LANGUAGE_NONE][0]['target_id'];
  $group = node_load($groupnid);
  $groupadmins = _ed_cluster_get_group_admins($group, true);

  $query = db_select('comment', 'c');
  $query->join('field_data_ed_answer_grade', 's', 'c.cid = s.entity_id');
  $query->fields('s', array('ed_answer_grade_value'));
  $query->condition('c.nid', $answer);
  $query->condition('c.uid', $groupadmins, 'IN');
  $result = $query->execute()->fetchCol();

  if (count($result) == 0) return 0;
  return $result[count($result) - 1];
}


function _ed_check_if_accepted($answer)
{
  $answernode = node_load($answer);

  if (!empty($answernode->ed_answer_last_status)) {
    if ($answernode->ed_answer_last_status[LANGUAGE_NONE][0]['status'] != 'unchecked') {
      return $answernode->ed_answer_last_status[LANGUAGE_NONE][0]['status'];
    }
  }
  return false;
}

/*
 * Get all answers from selected user.
 */
function _ed_check_for_answers($uid)
{
  $query = db_select('node', 'n');
  $query
      ->condition('n.type', 'ed_answer')
      ->condition('n.uid', $uid)
      ->fields('n', array('nid'));
  return $query->execute()->fetchCol();
}

// TODO Deprecated: This function is no longer used.
// Consider removal.
/*
 * Get all tasks that the user has made for this group
 */
function _ed_get_user_group_tasks($uid, $nid)
{
  $query = db_select('node', 'n');
  $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type='node' AND ogm.group_type = 'node' AND ogm.gid = :gid AND ogm.state = :active", array(':gid' => $nid, ':active' => OG_STATE_ACTIVE));
  $query->fields('n', array('nid'))
      ->condition('n.type', 'ed_task')
      ->condition('n.uid', $uid);

  return $query->execute()->fetchCol();
}


/**
 * Get all users of a group
 */
function _get_users_in_group($gid)
{
  $query = db_select('users', 'u');

  $query
      ->condition('u.uid', 0, '<>')
      ->condition('u.status', 1, '=')
      ->condition('ogm.state', 1, '=')
      ->fields('u', array('uid', 'name'))
      ->join('og_membership', 'ogm', "ogm.gid = :gid AND u.uid = ogm.etid AND ogm.entity_type = 'user'", array(':gid' => $gid));
  $result = $query->execute()->fetchCol();

  return $result;
}

/**
 * Returns identifiers for all groups user has created
 * or is an administrator of.
 *
 * @param $account
 *   User account object.
 * @return array
 *   An array with group identifiers or empty array
 */
function _ed_cluster_get_all_administered_groups(&$account)
{
  $administered_groups = array();
  $query = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.uid', $account->uid)
      ->condition('n.type', 'ed_cluster');

  $result = $query->execute()->fetchCol();

  if ($result) {
    foreach ($result as $nid) {
      $administered_groups[] = $nid;
    }
  }

  // Determine general role identifier (rid) for group admin
  $group_roles = og_roles('node', 'ed_cluster');
  $admin_rid = array_search(OG_ADMINISTRATOR_ROLE, $group_roles);

  $query = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.type', 'ed_cluster');
  $query->join('og_users_roles', 'ogur', "n.nid = ogur.gid AND ogur.group_type = 'node' AND ogur.rid = :rid AND ogur.uid = :uid", array(':rid' => $admin_rid, ':uid' => $account->uid));

  $result = $query->execute()->fetchCol();

  if ($result) {
    foreach ($result as $nid) {
      $administered_groups[] = $nid;
    }
  }

  return $administered_groups;
}

/**
 * Returns an array of user identifiers that are
 * administrators of a group id provided.
 *
 * @param $node
 *   Group node
 * @param $add_creator
 *   A flag to add creator uid to admins
 * @return
 *   User identifiers or empty
 */
function _ed_cluster_get_group_admins(&$node, $add_creator = false)
{
  // Determine general role identifier (rid) for group admin
  $group_roles = og_roles('node', 'ed_cluster', $node->nid);
  $admin_rid = array_search(OG_ADMINISTRATOR_ROLE, $group_roles);

  $query = db_select('users', 'u');
  $query->join('og_users_roles', 'ogur', "u.uid = ogur.uid AND ogur.gid = :gid AND ogur.group_type = 'node' AND ogur.rid = :rid", array(':gid' => $node->nid, ':rid' => $admin_rid));
  $query->fields('u', array('uid'));
  $admins = $query->execute()->fetchCol();

  if ($add_creator && !in_array($node->uid, $admins)) {
    $admins [] = $node->uid;
  }

  return $admins;
}

/**
 * Determines if user is creator or admin in any of provided groups.
 *
 * @param $uid
 *   User unique identifier
 * @param $groups
 *   Group node identifiers
 * @return
 *   Boolean value
 */
function _ed_cluster_is_groups_admin_or_creator($uid, $groups)
{
  // Return FALSE if no groups provided
  if (empty($groups) || !is_array($groups)) {
    return FALSE;
  }

  // Group creator case
  $query = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.uid', $uid)
      ->condition('n.nid', $groups, 'IN')
      ->countQuery();

  if ((int)$query->execute()->fetchField() > 0) {
    return TRUE;
  }

  // Group administrator case
  $group_roles = og_roles('node', 'ed_cluster');
  $admin_rid = array_search(OG_ADMINISTRATOR_ROLE, $group_roles);

  $query = db_select('users', 'u');
  $query->join('og_users_roles', 'ogur', "u.uid = ogur.uid AND ogur.uid = :uid AND ogur.group_type = 'node' AND ogur.rid = :rid", array(':uid' => $uid, ':rid' => $admin_rid));
  $query
      ->fields('u', array('uid'))
      ->condition('ogur.gid', $groups, 'IN')
      ->countQuery();

  if ((int)$query->execute()->fetchField() > 0) {
    return TRUE;
  }

  return FALSE;
}


function _ed_cluster_search_for_clusters($searchstring)
{
  $query = db_select('node', 'n')
      ->extend('PagerDefault')
      ->fields('n', array('nid'))
      ->condition('n.type', 'ed_cluster')
      ->condition('n.status', 1)
      ->condition('n.title', '%' . db_like($searchstring) . '%', 'LIKE');
  $query->limit(ed_get_grid_paging_nr());
  $nids = $query->execute()->fetchCol();
  return $nids;

}

/**
 * Returns paged ed_subgroup node indentifiers
 * NB! Ignores node_access
 */
function ed_cluster_get_subgroups($order, $gnid)
{
  $query = db_select('node', 'n')
      ->extend('PagerDefault');
  $query->join('og_membership', 'ogm', 'n.nid = ogm.etid');
  $query->fields('n', array('nid'))
      ->condition('ogm.entity_type', 'node')
      ->condition('ogm.gid', $gnid)
      ->condition('n.status', 1)
      ->condition('n.type', 'ed_subgroup');

  if ($order == 'title') {
    $query->orderBy('TRIM(n.title)', 'ASC');
  } else {
    $query->orderBy('n.created', $order);
  }
  $query->limit(ed_get_grid_paging_nr());

  $nids = $query->execute()->fetchCol();

  return $nids;
}


/**
 * Returns paged ed_cluster node identifiers
 * NB! Ignores node_access
 */
function ed_cluster_get_clusters($order, $remove_user_groups = FALSE, $inactive)
{
  if ($remove_user_groups) {
    $usergroups = og_get_groups_by_user();

    $query = db_select('node', 'n')
        ->extend('PagerDefault')
        ->fields('n', array('nid'))
        ->condition('n.status', 1);

    if ($inactive) {
      $exclude_query = new EntityFieldQuery();
      $exclude_query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'ed_cluster')
          ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
          ->fieldCondition('ed_field_group_state', 'value', 1);
      $exclude_result = $exclude_query->execute();
      $excluded = array_keys($exclude_result['node']);
      if ($excluded) {
        $query->condition('n.nid', $excluded, 'NOT IN');
      }
    }

    if ($usergroups) {
      $query->condition('n.nid', $usergroups['node'], 'not in');
    }
    $query->condition('n.type', 'ed_cluster');
    if ($order == 'title') {
      $query->orderBy('TRIM(title)', 'ASC');
    } else {
      $query->orderBy('created', $order);
    }
    $query->limit(ed_get_grid_paging_nr());


    $nids = $query->execute()->fetchCol();

    return $nids;
  } else {
    $query = db_select('node', 'n')
        ->extend('PagerDefault')
        ->fields('n', array('nid'))
        ->condition('n.status', 1)
        ->condition('n.type', 'ed_cluster');
    if ($order == 'title') {
      $query->orderBy('TRIM(title)', 'ASC');
    } else {
      $query->orderBy('created', $order);
    }
    $query->limit(ed_get_grid_paging_nr());

    $nids = $query->execute()->fetchCol();

    return $nids;
  }
}

/**
 * Returns paged ed_cluster nodes where current user is a member of.
 * Applies the node_access check and make sure that membership status is active,
 * also applies some more cheks (e.g. type of group and type of member entity).
 * @param string $order Order to apply to the query being made
 * @param boolean $inactive If false, only active are shown, otherwise only inactive
 * @return array           Array of identifiers
 */
function ed_cluster_get_current_user_clusters($order, $inactive = false)
{
  global $user;
  $account = clone $user;

  $query = db_select('node', 'n')
      ->extend('PagerDefault')
      ->fields('n', array('nid'))
      ->condition('n.type', 'ed_cluster')
      ->addTag('node_access');


  $exclude_query = new EntityFieldQuery();
  if ($inactive) {
    $exclude_query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'ed_cluster')
        ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
        ->fieldCondition('ed_field_group_state', 'value', 1);
    $exclude_result = $exclude_query->execute();
  } else {
    $exclude_query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'ed_cluster')
        ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
        ->fieldCondition('ed_field_group_state', 'value', 0);
    $exclude_result = $exclude_query->execute();
  }

  $excluded = array_keys($exclude_result['node']);
  if ($excluded) {
    $query->condition('n.nid', $excluded, 'NOT IN');
  }


  $query->join('og_membership', 'ogm', "n.nid = ogm.gid AND ogm.entity_type = 'user' AND ogm.group_type = 'node' AND ogm.state = 1 AND ogm.field_name = 'og_user_node'");
  $query->condition('ogm.etid', $account->uid);
  if ($order == 'title') {
    $query->orderBy('TRIM(title)', 'ASC');
  } else {
    $query->orderBy('n.created', $order);
  }
  $query->limit(ed_get_grid_paging_nr());

  $nids = $query->execute()->fetchCol();

  return $nids;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function ed_cluster_ctools_plugin_api()
{
  list($module, $api) = func_get_args();
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => "1");
  }
}

/**
 * Implements hooks_views_api().
 */
function ed_cluster_views_api()
{
  return array(
      'api' => 3,
      'path' => drupal_get_path('module', 'ed_cluster') . '/includes/views',
  );
}

/**
 * Implements hook_form_alter().
 */
function ed_cluster_form_alter(&$form, &$form_state, $form_id)
{


  if ('ed_cluster_node_form' == $form_id) {
    menu_tree_set_path('main-menu', 'clusters');
    if (empty($form['#node']->nid)) {
      drupal_set_title(t('Create Group'));
    }

    // swap featured image and access order
    $tmp = $form['ed_field_featured_image']['#weight'];
    $form['ed_field_featured_image']['#weight'] = $form['group_access']['#weight'];
    $form['group_access']['#weight'] = $tmp;

    //Translate group title
    $form['title']['#title'] = t('Title');

    // Group types related


    $form['ed_field_group_type']['#weight'] = -7;
    $form['ed_field_course_code']['#weight'] = -6;
    $form['ed_field_university']['#weight'] = 2;
    $form['ed_field_curriculum']['#weight'] = 3;
    $form['ed_field_study_year']['#weight'] = 4;
    $form['ed_field_excerpt']['#weight'] = 5;
    $form['ed_field_content']['#weight'] = 6;
    $form['ed_field_course_aim']['#weight'] = 7;
    $form['ed_field_learning_outcomes']['#weight'] = 8;
    $form['ed_field_category']['#weight'] = 9;
    $form['ed_field_assessment_method']['#weight'] = 10;
    $form['group_access']['#weight'] = 11;
    $form['ed_field_featured_image']['#weight'] = 12;


    if (isset($form['#node']->ed_field_group_type)) {

      $group_type = $form['#node']->ed_field_group_type[LANGUAGE_NONE][0]['value'];

      if (empty($form['#node']->ed_field_group_type)) {
        $form['ed_field_group_type']['und'][0]['value']['#default_value'] = 3;
        $group_type = 3;
      }

      global $user;
      $account = clone $user;

      //Only group author can clone
      if ($account->uid == $form['#node']->uid) {
        $form['clone_group'] = array(
            '#type' => 'submit',
            '#value' => "<i class='fa fa-clone'></i> " . t('Clone the group'),
            '#weight' => 150,
        );

        $form['clone_group']['#submit'][] = 'ed_cluster_clone_group_handler';
      }


    } else {
      $group_type = $_GET['field_group_type'];

      $form['ed_field_group_type']['und'][0]['value']['#default_value'] = $group_type;

    }

    $form['ed_field_group_type']['#attributes']['style'][] = 'display:none';


    //Disabling the field causes it losing its value after any ajax call from this page (disabled in css instead)
    //$form['ed_field_group_type']['und']['#disabled'] = true;
    if ($group_type == 1) {


    } elseif ($group_type == 2) {
      $form['ed_field_curriculum']['und']['#access'] = 0;
      $form['ed_field_study_year']['und']['#access'] = 0;

    } elseif ($group_type == 3) {
      $form['ed_field_university']['und']['#access'] = 0;
      $form['ed_field_curriculum']['und']['#access'] = 0;
      $form['ed_field_study_year']['und']['#access'] = 0;
      $form['ed_field_course_code']['und']['#access'] = 0;
      $form['ed_field_learning_outcomes']['und']['#access'] = 0;
      $form['ed_field_category']['und']['#access'] = 0;
      $form['ed_field_assessment_method']['und']['#access'] = 0;
      $form['ed_field_learning_outcome_ref']['und']['#access'] = 0;
    }


  }
  // Change group user add form autocomplete to our own endpoint.
  if ('og_ui_add_users' == $form_id) {
    $form['og_user']['name']['#title'] = t('Full name');
    $form['og_user']['name']['#autocomplete_path'] = 'clusters/user/autocomplete';
  }
  if ('og_ui_confirm_subscribe' == $form_id) {
    $group = node_load($form['gid']['#value']);
    if ($group->group_access['und'][0]['value']) {
      array_push($form['#submit'], 'ed_cluster_redirect_after_submit');

    }
  }

  //  learning outcomes
  if (array_key_exists('ed_field_learning_outcome_ref', $form) && $group_type != 3) {
    //  load outcomes
    $outcomes = [];
    if (property_exists($form["#entity"], "ed_field_learning_outcome_ref") && array_key_exists("und", $form["#entity"]->ed_field_learning_outcome_ref)) {
      for ($i = 0; $i < count($form["#entity"]->ed_field_learning_outcome_ref["und"]); $i++) {
        $lo_id = $form["#entity"]->ed_field_learning_outcome_ref["und"][$i]["target_id"];
        $outcome = node_load($lo_id);

        $competences = [];
        foreach ($outcome->ed_field_category["und"] as $tid_container) {
          $competences [] = $tid_container["tid"];
        }
        $outcomes [] = [
            "name" => $outcome->title,
            "description" => $outcome->ed_field_learning_outcomes["und"][0]["value"],
            "assessment_method" => $outcome->ed_field_assessment_method["und"][0]["value"],
            "competences" => array_values(array_unique($competences)), // Remove any previously allowed duplicate values
        ];
      }
    }

    //  add widget
    drupal_add_js(drupal_get_path('module', 'edidaktikum') . '/node_list_editor/node_list_editor.js');
    drupal_add_css(drupal_get_path('module', 'edidaktikum') . '/node_list_editor/node_list_editor.css');

    // Code assumes that corresponding taxonomy vocabulary does exist
    $competenceVocabulary = taxonomy_vocabulary_machine_name_load('ed_competence_voc');
    $nle_data = [
        ["title" => "", "description" => t("Name"), "type" => "name", "name" => "name", "default" => t("Learning Outcome")],
        ["title" => "", "description" => t("Description"), "type" => "text_area", "name" => "description"],
        ["title" => t("Competence"), "description" => "", "type" => "taxonomy_list", "taxonomy_tree" => ed_get_taxonomy_tree($competenceVocabulary->vid), "name" => "competences"],
        ["title" => "", "description" => t("Assessment method"), "type" => "text_area", "name" => "assessment_method"]
    ];

    $form["ed_field_learning_outcome_ref"] = [
        "#type" => "textfield",
        "#title" => t("Learning outcomes"),
        "#default_value" => "",
        "#prefix" => '<div data-node_list_editor = "' . base64_encode(json_encode($nle_data)) . '" data-node_list_data = "' . base64_encode(json_encode($outcomes)) . '">',
        "#suffix" => "</div>",
        "#language" => LANGUAGE_NONE,
    ];


    $form['#submit'] [] = "ed_cluster_form_submit_learning_outcomes";
  }


}

/**
 * Handler function to clone group and set learning resources of original group to point to that cloned group as well.
 * @param $form
 * @param $form_state
 * @throws Exception
 */
function ed_cluster_clone_group_handler($form, &$form_state)
{

  global $user;
  $account = user_load($user->uid);
  $node = node_load($form['#node']->nid);

  $new = clone $node;
  $new->is_new = true;
  $new->title = t('COPY OF ') . $node->title;
  unset($new->nid);
  unset($new->vid);
  unset($new->tnid);
  unset($new->ed_field_learning_outcome_ref);


  //Set learning outcomes
  $learning_outcomes = json_decode($form_state["input"]["learning_outcomes_json"]);

  if (!empty($learning_outcomes)) {
    foreach ($learning_outcomes as $outcome) {
      $outcome_node = new stdClass();
      $outcome_node->title = $outcome->name;
      $outcome_node->body = "";
      $outcome_node->ed_field_learning_outcomes["und"][0]["value"] = $outcome->description;
      $outcome_node->ed_field_assessment_method["und"][0]["value"] = $outcome->assessment_method;
      $outcome_node->ed_field_category["und"] = [];
      foreach ($outcome->competences as $tid) {
        $outcome_node->ed_field_category["und"] [] = ["tid" => $tid];
      }
      $outcome_node->uid = $account->uid;
      $outcome_node->name = $account->name;
      $outcome_node->type = "ed_learning_outcome";
      $outcome_node->status = 1;
      $outcome_node->promote = 0;
      node_save($outcome_node);

      $new->ed_field_learning_outcome_ref[LANGUAGE_NONE][] = array("target_id" => $outcome_node->nid);

      unset($outcome);

      //error_log(print_r($new->ed_field_learning_outcome_ref, true));
    }
  }

  node_save($new);

  //Set learning resources
//  $learning_resources_nids = _ed_get_group_content_by_type($node->nid, 'ed_learning_resource');
//  foreach ($learning_resources_nids as $nid) {
//    $wrapper = entity_metadata_wrapper('node', $nid);
//    $wrapper->og_group_ref[] = $new->nid;
//    $wrapper->save();
//  }

  drupal_goto('node/' . $new->nid . '/edit');

}

function ed_cluster_form_submit_learning_outcomes($form, &$form_state)
{
  global $user;
  $learning_outcomes = json_decode($form_state["input"]["learning_outcomes_json"]);
  $nid = $form["nid"]["#value"];

  //  delete old
  if (property_exists($form["#entity"], "ed_field_learning_outcome_ref") && array_key_exists("und", $form["#entity"]->ed_field_learning_outcome_ref)) {
    for ($i = 0; $i < count($form["#entity"]->ed_field_learning_outcome_ref["und"]); $i++) {
      $lo_id = $form["#entity"]->ed_field_learning_outcome_ref["und"][$i]["target_id"];
      node_delete($lo_id);
    }
  }

  //  add new
  if (!isset($form_state["values"]["ed_field_learning_outcome_ref"]) || !is_array($form_state["values"]["ed_field_learning_outcome_ref"])) {
    $form_state["values"]["ed_field_learning_outcome_ref"] = [];
  }
  $form_state["values"]["ed_field_learning_outcome_ref"]["und"] = [];
  foreach ($learning_outcomes as &$outcome) {
    $node = new stdClass();
    $node->title = $outcome->name;
    $node->body = "";
    $node->ed_field_learning_outcomes["und"][0]["value"] = $outcome->description;
    $node->ed_field_assessment_method["und"][0]["value"] = $outcome->assessment_method;
    $node->ed_field_category["und"] = [];
    foreach ($outcome->competences as $tid) {
      $node->ed_field_category["und"] [] = ["tid" => $tid];
    }
    $node->uid = $user->uid;
    $node->name = $user->name;
    $node->type = "ed_learning_outcome";
    $node->status = 1;
    $node->promote = 0;
    $node = node_submit($node);
    node_save($node);
    $form_state["values"]["ed_field_learning_outcome_ref"][LANGUAGE_NONE][] = array("target_id" => $node->nid);

    unset($outcome);
  }
}

function ed_cluster_redirect_after_submit($form, &$form_state)
{
  $form_state['redirect'] = url('clusters', array('absolute' => true));
}

/**
 * Returns group menu title. Used within an override.
 */
function _ed_cluster_group_menu_title($type, $gid)
{
  $pending_users_count = _ed_cluster_get_group_pending_members_count($gid);
  if ($pending_users_count > 0) {
    return t('Members (@count)', array('@count' => $pending_users_count));
  }
  return t('Members');
}

/**
 * Returns peding members count for a group.
 * @param $gid
 *   Group identifier
 * @return
 *   Pending members count
 */
function _ed_cluster_get_group_pending_members_count($gid)
{
  static $count;

  if (isset($count)) {
    return $count;
  }

  $query = db_select('og_membership', 'ogm')
      ->fields('ogm', array('id'))
      ->condition('ogm.entity_type', 'user')
      ->condition('ogm.group_type', 'node')
      ->condition('ogm.gid', $gid)
      ->condition('ogm.state', OG_STATE_PENDING);

  $count = $query->countQuery()->execute()->fetchField();

  return $count;
}

/**
 * Implements hook_field_widget_alter().
 */
function ed_cluster_field_widget_form_alter(&$element, &$form_state, $context)
{
  if (!empty($element['#field_name']) && ED_FIELD_TO_GROUP_MEMBER == $element['#field_name']) {
    $element['#attached']['js'][] = drupal_get_path('module', 'ed_cluster') . '/js/field_to_group_member.js';
    $element['#multiple'] = TRUE;
  }

  // This removes admin override from Organic Groups Audience field
  if (!empty($element['#field_name']) && OG_AUDIENCE_FIELD == $element['#field_name']) {
    if (!empty($element['admin'])) {
      $element['admin']['#access'] = FALSE;
    }
  }

  if (!empty($element['#field_name']) && 'ed_field_curriculum' == $element['#field_name']) {
    drupal_add_js(array(
        'edidaktikum' => [
            'curriculum_university_data' => _ed_cluster_curriculum_university_data(),
        ],
    ), 'setting');
    $element['#attached']['js'][] = drupal_get_path('module', 'ed_cluster') . '/js/ed_field_curriculum.js';
  }
}

/**
 * This serves data to be used by ED_FIELD_TO_GROUP_MEMBER field.
 * Field is repopulated with data once selection is made.
 */
function ed_cluster_get_groups_members_ajax()
{
  $group_data = array(
      array(
          'value' => '_none',
          'name' => t('- None -'),
      ),
  );
  $groups = isset($_POST['groups']) ? $_POST['groups'] : array();

  // Remove _none from values
  if (is_array($groups)) {
    if (($key = array_search('_none', $groups)) !== FALSE) {
      unset($groups[$key]);
    }
  } else {
    if ('_none' == $groups) {
      $groups = "";
    }
  }

  if (!empty($groups)) {
    $query = db_select('users', 'u');
    $query->join('og_membership', 'ogm', "u.uid = ogm.etid AND ogm.entity_type = 'user'");
    $query->leftJoin('field_data_ed_field_full_name', 'ufn', "u.uid = ufn.entity_id AND ufn.entity_type = 'user' AND ufn.bundle = 'user'");
    $query
        ->distinct()
        ->condition('u.uid', 0, '<>')
        ->condition('u.status', 1, '=')
        ->condition('ogm.gid', $groups)
        ->fields('u', array('uid', 'name'))
        ->fields('ufn', array('ed_field_full_name_value'))
        ->orderBy('ufn.ed_field_full_name_value', 'ASC');
    $result = $query->execute()->fetchAll();

    if ($result) {
      foreach ($result as $single) {
        $group_data [] = array(
            'value' => $single->uid,
            'name' => (!empty($single->ed_field_full_name_value)) ? $single->ed_field_full_name_value : $single->name,
        );
      }
    }
  }
  drupal_json_output($group_data);
}

/**
 * Returns competence ids for groups or an empty array
 * @param array $groups An array with group identifiers
 * @return array         An array with competence identifiers
 */
function ed_cluster_get_groups_competences_ids($groups)
{
  $ids = [];

  if (!empty($groups)) {
    $query = db_select('field_data_ed_field_category', 'c');
    $query->innerJoin('field_data_ed_field_learning_outcome_ref', 'lor', 'lor.ed_field_learning_outcome_ref_target_id  = c.entity_id');
    $query
        ->distinct()
        ->condition('c.entity_type', 'node')
        ->condition('c.bundle', 'ed_learning_outcome')
        ->condition('c.deleted', 0)
        ->condition('lor.entity_type', 'node')
        ->condition('lor.bundle', 'ed_cluster')
        ->condition('lor.deleted', 0)
        ->condition('lor.entity_id', $groups)
        ->fields('c', ['ed_field_category_tid']);
    $result = $query->execute()->fetchAll();

    if ($result) {
      foreach ($result as $single) {
        $ids [] = $single->ed_field_category_tid;
      }
    }
  }

  return $ids;
}

/**
 * AJAX endpoint for getting competences of certain groups.
 * Responds with an object that has applicable competence identifiers wihin a
 * key "competences", defaults to an empty array.
 */
function ed_cluster_get_groups_competences_ajax()
{
  $data = [
      'competences' => [],
  ];
  $groups = isset($_POST['groups']) ? $_POST['groups'] : [];

  // Remove _none from values
  if (is_array($groups)) {
    if (($key = array_search('_none', $groups)) !== FALSE) {
      unset($groups[$key]);
    }
  } else {
    if ('_none' == $groups) {
      $groups = [];
    }
  }

  if (!empty($groups)) {
    $data['competences'] = ed_cluster_get_groups_competences_ids($groups);
  }
  drupal_json_output($data);
}

/**
 * Implements hook_comment_view_alter().
 */
function ed_cluster_comment_view_alter(&$build)
{
  if (isset($build['#comment']->{ED_FIELD_PRIVATE_COMMENT}[LANGUAGE_NONE][0]['value']) && 1 == $build['#comment']->{ED_FIELD_PRIVATE_COMMENT}[LANGUAGE_NONE][0]['value']) {
    global $user;
    if (!(user_is_logged_in() && ($build['#comment']->uid == $user->uid || $build['#node']->uid == $user->uid))) {

      $build['#access'] = FALSE;

      // Check if this user is group manager
      if (isset($build['#node']->og_group_ref)) {
        foreach ($build['#node']->og_group_ref[LANGUAGE_NONE] as $referenced_group) {

          if (ed_task_manager_access('node', node_load($referenced_group['target_id']))) {

            //Group manager can see private comments
            $build['#access'] = TRUE;
          }
        }
      }

    }
  }
}

/**
 * Implements hook_node_grants().
 */
function ed_cluster_node_grants($account, $op)
{
  if ('view' != $op) {
    return;
  }

  if (!field_info_field(ED_FIELD_TO_GROUP_MEMBER)) {
    return array();
  }

  $query = db_select('field_data_ed_field_to_group_member', 'tgm')
      ->fields('tgm', array('entity_type', 'entity_id'))
      ->condition('tgm.ed_field_to_group_member_target_id', $account->uid);
  $result = $query->execute()->fetchAll();

  if ($result) {
    foreach ($result as $single) {
      $realm = ED_ACCESS_REALM . ':' . $single->entity_type;
      $grants[$realm][] = $single->entity_id;
    }
  }
  $grants[ED_ACCESS_REALM . ':creator'][] = $account->uid;

  if ($administered_groups = _ed_cluster_get_all_administered_groups($account)) {
    foreach ($administered_groups as $gid) {
      $realm = ED_ACCESS_REALM . ':admin:' . 'node';
      $grants[$realm][] = $gid;
    }
  }

  return !empty($grants) ? $grants : array();
}

/**
 * Implements hook_node_access_records().
 */
function ed_cluster_node_access_records($node)
{
  if (empty($node->status)) {
    return array();
  }

  if (!empty($node->{ED_FIELD_TO_GROUP_MEMBER}[LANGUAGE_NONE])) {
    $grants[] = array(
        'realm' => ED_ACCESS_REALM . ':node',
        'gid' => $node->nid,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 1,
    );
    $grants[] = array(
        'realm' => ED_ACCESS_REALM . ':creator',
        'gid' => $node->uid,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 1,
    );

    $gids = og_get_entity_groups('node', $node);
    if ($gids) {
      foreach ($gids as $group_type => $values) {
        foreach ($values as $gid) {
          $grants[] = array(
              'realm' => ED_ACCESS_REALM . ':admin:' . $group_type,
              'gid' => $gid,
              'grant_view' => 1,
              'grant_update' => 0,
              'grant_delete' => 0,
              'priority' => 1,
          );
        }
      }
    }
  }

  return !empty($grants) ? $grants : array();
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ed_cluster_ctools_plugin_directory($module, $plugin)
{
  if ('entityreference' == $module || ('content_types' == $plugin && 'ctools' == $module)) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Returns destination for group node type.
 * Corresponds with group page for that type.
 *
 * @param $gnode
 *   Object of ed_cluster node
 * @param $type
 *   Current node page type
 *
 * @return
 *   Destination string
 */
function _ed_cluster_destination_for_group_node_type(&$gnode, $type)
{
  $destination = 'node/' . $gnode->nid;
  switch ($type) {
    case 'ed_blog':
    case 'ed_bookmark':
    case 'ed_forum':
    case 'ed_news':
    case 'ed_page':
    case 'ed_learning_resource':
    case 'ed_event':
    case 'ed_file':
      $type_dashed = str_replace('_', '-', $type);
      $type_dashed = substr($type_dashed, 3);
      $destination .= '/' . $type_dashed;
      break;
    case 'ed_task':
    case 'ed_answer':
      if (ed_task_manager_access('node', $gnode)) {
        $destination .= '/task-manager';
      }
      break;
  }

  return $destination;
}

/**
 * Returns plural translated title string for node types.
 *
 * @param $type
 *   Current node page type
 *
 * @return
 *   Translated title string
 */
function _ed_cluster_plural_title_for_group_node_type($type)
{
  switch ($type) {
    case 'ed_blog':
      $title = t('Blog');
      break;
    case 'ed_forum':
      $title = t('Discussion Board');
      break;
    case 'ed_bookmark':
      $title = t('Bookmarks');
      break;
    case 'ed_news':
      $title = t('News');
      break;
    case 'ed_page':
      $title = t('Pages');
      break;
    case 'ed_learning_resource':
      $title = t('Learning Resources');
      break;
    case 'ed_event':
      $title = t('Events');
      break;
    case 'ed_file':
      $title = t('Files');
      break;
    case 'ed_task':
    case 'ed_answer':
      $title = t('Tasks');
      break;
    case 'ed_q_portfolio':
      $title = t('Qualification portfolios');
      break;
    default:
      $title = t(ucwords(str_replace('ed', '', str_replace('_', ' ', $type))));
      break;
  }

  return $title;
}

/**
 * Retruns themed group breadcrumb for node.
 *
 * @param $node
 *   Node object
 * @param $group
 *   Group node object (ed_cluster)
 *
 * @return string
 *   Themed breadcrumb
 */
function _ed_cluster_node_group_breadcrumb($node, &$group)
{
  $destination = _ed_cluster_destination_for_group_node_type($group, $node->type);

  $breadcrumb[] = l($group->title, 'node/' . $group->nid);
  if (('node/' . $group->nid) != $destination) {
    $breadcrumb[] = l(_ed_cluster_plural_title_for_group_node_type($node->type), $destination);
  }

  if ($node->type == 'ed_answer') {
    $breadcrumb[] = ed_get_answer_title($node);
  } else {
    $breadcrumb[] = $node->title;
  }


  return edidaktikum_theme_bs3_breadcrumb(array('breadcrumb' => $breadcrumb));
}

/**
 * Returns markup for node group breadcrumbs.
 *
 * @param $node
 *   A node object.
 *
 * @return array
 *   Array with markup
 */
function _ed_cluster_node_group_greadcrumbs(&$node)
{
  $output = array();
  if (!empty($node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE])) {
    $groups = node_load_multiple(array_map(function ($element) {
      return $element['target_id'];
    }, $node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE]));
    if (!empty($groups)) {
      $output['group-breadcrumbs'] = array(
          '#type' => 'container',
          '#attributes' => array(),
      );
      foreach ($groups as $group) {
        $output['group-breadcrumbs']['bread-crumb-' . $group->nid] = array(
            '#type' => 'markup',
            '#markup' => _ed_cluster_node_group_breadcrumb($node, $group),
        );
      }
    }
  }

  return $output;
}


/**
 * Implements hook_node_presave().
 */
function ed_cluster_node_presave($node)
{
  $account = $GLOBALS['user'];
  // Any new node created by teacher is sticky
  if (in_array('teacher', $account->roles) && $node->is_new) {
    $node->sticky = 1;
  }

  if ('ed_cluster' == $node->type) {
    $group_type = 3;
    if (isset($node->ed_field_group_type)) {
      $group_type = $node->ed_field_group_type[LANGUAGE_NONE][0]['value'];
    }

    //Make composite title of Course code + Title for the 1st and 2nd type groups
    if ($group_type == 1 || $group_type == 2) {
      if (isset($node->ed_field_course_code[LANGUAGE_NONE][0]['value'])) {
        //Check if there is already Course code in Title
        if (strpos($node->title, $node->ed_field_course_code[LANGUAGE_NONE][0]['value']) === false) {
          $node->title = $node->ed_field_course_code[LANGUAGE_NONE][0]['value'] . ' ' . $node->title;
        }

      }

    }

  }

}


/**
 * Implements hook_page_alter().
 */
function ed_cluster_page_alter(&$page)
{
  if (isset($page['content']['system_main']['#form_id']) && $page['content']['system_main']['#form_id'] == 'og_ui_add_users') {
    $gid = $page['content']['system_main']['gid']['#value'];
    $page['content']['system_main']['backtofront'] = array(
        '#type' => 'markup',
        '#markup' => l(t('Return to group front page'), 'node/' . $gid),
    );
  }
}

/**
 * Implements hook_node_access
 */
function ed_cluster_node_access($node, $op, $account)
{
  if (in_array('supervisor', $account->roles) && $op == 'view') return NODE_ACCESS_ALLOW;

  // Group owners are disallowed to delete own ed_cluster type groups, unless system content deletion permission is
  // given. This overrides og module "og_group_manager_full_access" value based full permissions given to owner in
  // og_user_access function.
  if ($op === 'delete' && $node->type === 'ed_cluster' && $account->uid === $node->uid
    && !user_access('delete own ed_cluster content', $account)) {
    return NODE_ACCESS_DENY;
  }

  return NODE_ACCESS_IGNORE;
}


/**
 * Implements hook_field_formatter_info_alter
 */
function ed_cluster_field_formatter_info_alter(&$info)
{
  $info['og_group_subscribe']['module'] = 'ed_cluster';
}

/**
 * Implements hook_field_formatter_view
 */
function ed_cluster_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display)
{
  $element = og_ui_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);

  // Remove membership request if group inactive
  if (isset($element[0]) && isset($element[0]['#title']) && $element[0]['#title'] == 'Request group membership') {
    if ($entity->ed_field_group_state['und'][0]['value'] == 0) {
      unset($element[0]);
    }
  }

  return $element;
}

/**
 * Returns an multidimensional array with data for universities and their
 * curriculums.
 * Please note that keys are set explicitly, this is important in case something
 * is added or removed, they keys should be unique and explicit.
 * All curriculums would be combined into a single list for the field, meaning
 * that each one should have a unique key/identifier (not just unique for the
 * university in question).
 * @return array Array of universities with title and curriculums
 */
function _ed_cluster_universities_with_curriculums_structure()
{
  return [
      0 => [
          'title' => t('Eesti Kunstiakadeemia'),
          'curriculums' => [],
      ],
      1 => [
          'title' => t('Eesti Lennuakadeemia'),
          'curriculums' => [],
      ],
      2 => [
          'title' => t('Eesti Maaülikool'),
          'curriculums' => [],
      ],
      3 => [
          'title' => t('Eesti Muusika- ja Teatriakadeemia'),
          'curriculums' => [],
      ],
      4 => [
          'title' => t('Lääne-Viru rakenduskõrgkool'),
          'curriculums' => [],
      ],
      5 => [
          'title' => t('Sisekaitseakadeemia'),
          'curriculums' => [],
      ],
      6 => [
          'title' => t('Tallinna Tehnikakõrgkool'),
          'curriculums' => [],
      ],
      7 => [
          'title' => t('Tallinna Tervishoiu Kõrgkool'),
          'curriculums' => [],
      ],
      8 => [
          'title' => t('Tallinna Tehnikaülikool'),
          'curriculums' => [],
      ],
      9 => [
          'title' => t('Tallinna Tehnikaülikooli Eesti Mereakadeemia'),
          'curriculums' => [],
      ],
      10 => [
          'title' => t('Tallinna Tehnikaülikooli geoloogia instituut'),
          'curriculums' => [],
      ],
      11 => [
          'title' => t('Tallinna Tehnikaülikooli Kuressaare kolledž'),
          'curriculums' => [],
      ],
      12 => [
          'title' => t('Tallinna Tehnikaülikooli küberneetika instituut'),
          'curriculums' => [],
      ],
      13 => [
          'title' => t('Tallinna Tehnikaülikooli meresüsteemide instituut'),
          'curriculums' => [],
      ],
      14 => [
          'title' => t('Tallinna Tehnikaülikooli sertifitseerimisasutus'),
          'curriculums' => [],
      ],
      15 => [
          'title' => t('Tallinna Tehnikaülikooli Tallinna kolledž'),
          'curriculums' => [],
      ],
      16 => [
          'title' => t('Tallinna Tehnikaülikooli Tartu kolledž'),
          'curriculums' => [],
      ],
      17 => [
          'title' => t('Tallinna Tehnikaülikooli tehnomeedikum'),
          'curriculums' => [],
      ],
      18 => [
          'title' => t('Tallinna Tehnikaülikooli Virumaa kolledž'),
          'curriculums' => [],
      ],
      19 => [
          'title' => t('Tallinna Ülikool'),
          'weight' => 1,
          'curriculums' => [
              'IFHTM.DT' => t('IFHTM.DT - Haridustehnoloogia'),
              'KAKLI.HR' => t('KAKLI.HR - Klassiõpetaja'),
              'KAKPB.HR' => t('KAKPB.HR - Kutsepedagoogika'),
              'KAALB.HR' => t('KAALB.HR - Alushariduse pedagoog'),
              'KAEPB.HR' => t('KAEPB.HR - Eripedagoogika'),
              'KAANB.HR' => t('KAANB.HR - Andragoogika'),
              'KAPB.HR' => t('KAPB.HR - Pedagoogika'),
              'KUTOM.LT' => t('KUTOM.LT - Töö- ja tehnoloogiaõpetuse õpetaja'),
              'KUKKM.LT' => t('KUKKM.LT - Käsitöö ja kodunduse õpetaja'),
              'MLMOM.DT' => t('MLMOM.DT - Matemaatikaõpetaja'),
              'KAMOM.HR' => t('KAMOM.HR - Mitme aine õpetaja'),
              'IFIOM.DT' => t('IFIOM.DT - Informaatikaõpetaja, kooli infojuht'),
              'GRIOM.HT' => t('GRIOM.HT - Inglise keele õpetaja'),
              'KUKUM.FK' => t('KUKUM.FK - Kunstiõpetaja'),
              'SKVOM.HT' => t('SKVOM.HT - Vene keele ja kirjanduse õpetaja'),
              'KUMOM.FK' => t('KUMOM.FK - Muusikaõpetaja'),
              'GRPOM.HT' => t('GRPOM.HT - Prantsuse keele õpetaja'),
              'GRSOM.HT' => t('GRSOM.HT - Saksa keele õpetaja'),
              'AIAOM.HT' => t('AIAOM.HT - Ajaloo ja ühiskonnaõpetuse õpetaja'),
              'MLBOM.LT' => t('MLBOM.LT - Bioloogiaõpetaja'),
              'EKEOM.HT' => t('EKEOM.HT - Eesti keele ja kirjanduse õpetaja'),
              'EKEVM.HT' => t('EKEVM.HT - Eesti keele kui teise keele õpetaja'),
              'MLFOM.LT' => t('MLFOM.LT - Füüsikaõpetaja'),
              'KAALM.HR' => t('KAALM.HR - Alushariduse pedagoog'),
              'KAANM.HR' => t('KAANM.HR - Andragoogika'),
              'KAEPM.HR' => t('KAEPM.HR - Eripedagoog-nõustaja'),
              'KAHJM.HR' => t('KAHJM.HR - Hariduse juhtimine'),
              'MLGOM.LT' => t('MLGOM.LT - Geograafiaõpetaja'),
              'TSKOM.LT' => t('TSKOM.LT - Teacher of Physical Education'),
              'KAKTM.HR' => t('KAKTM.HR - Kasvatusteadused'),
              'KAKTD.HR' => t('KAKTD.HR - Kasvatusteadused'),
              'KAKOM.HR' => t('KAKOM.HR - Kutseõpetaja'),
              'TPNR.HR' => t('TPNR.HR - Noorsootöö'),
              'TPLR.HR' => t('TPLR.HR - Koolieelse lasteasutuse õpetaja'),
              'MLLOM.LT' => t('MLLOM.LT - Põhikooli loodus- ja täppisteaduslike ainete õpetaja'),
              'TPNM.HR' => t('TPNM.HR - Noorsootöö korraldus'),
              'MLGLM.LT' => t('MLGLM.LT - Gümnaasiumi loodusteaduslike ainete õpetaja'),
              'DTLGM.DT' => t('DTLGM.DT - Digitaalsed õpimängud'),
              'KAKPM.HR' => t('KAKPM.HR - Kutseõpetaja'),
              'KUKAM.FK' => t('KUKAM.FK - Kunstiõpetaja'),
              'KUMUM.FK' => t('KUMUM.FK - Muusikaõpetaja'),
              'KATHM.HR' => t('KATHM.HR - Täiskasvanuõpe sotsiaalsetes muutustes'),
              'GRVOM.HT' => t('GRVOM.HT - Võõrkeeleõpetaja'),
              'KUIKM.LT' => t('KUIKM.LT - Tehnoloogiavaldkonna ainete õpetaja'),
              'KAEIM.HR' => t('KAEIM.HR - Haridusinnovatsiooni juhtimine'),
              'RKSPB/19.HR' => t('RKSPB/19.HR - Sotsiaalpedagoogika'),
              'KAKHM' => t('RKSPB/19.HR - Kaasav haridus')
          ],
      ],
      20 => [
          'title' => t('Tallinna Ülikooli pedagoogiline seminar'),
          'curriculums' => [],
      ],
      21 => [
          'title' => t('Tartu kõrgem kunstikool'),
          'curriculums' => [],
      ],
      22 => [
          'title' => t('Tartu tervishoiu kõrgkool'),
          'curriculums' => [],
      ],
      23 => [
          'title' => t('Tartu Ülikool'),
          'weight' => 2,
          'curriculums' => [],
      ],
  ];
}

/**
 * Returns the values used for options list of ed_field_university
 * @return array Array of key => title values
 */
function _ed_cluster_universities_options_list()
{
  $structure = _ed_cluster_universities_with_curriculums_structure();

  // Weight is most important for sorting (is a special case)
  // If weight is missing, then title comes into play (default)
  uasort($structure, function ($a, $b) {
    if (isset($a['weight']) && isset($b['weight'])) {
      if ($a['weight'] === $b['weight']) {
        // This can not happen as weights should never be the same
        // If that is true, then comparison by title is needed
        return 0;
      }

      return ($a['weight'] < $b['weight']) ? -1 : 1;
    } else if (isset($a['weight'])) {
      return -1;
    } else if (isset($b['weight'])) {
      return 1;
    }

    if ($a['title'] === $b['title']) {
      return 0;
    }

    return ($a['title'] < $b['title']) ? -1 : 1;
  });

  return array_map(function ($single) {
    return $single['title'];
  }, $structure);
}

/**
 * Returns the values used for options list of ed_field_curriculum
 * @return array Array of key => title
 */
function _ed_cluster_curriculum_options_list()
{
  $curriculums = [];
  $structure = _ed_cluster_universities_with_curriculums_structure();

  array_walk($structure, function ($single) use (&$curriculums) {
    if (is_array($single['curriculums']) && sizeof($single['curriculums']) > 0) {
      $curriculums = array_merge($curriculums, $single['curriculums']);
    }
  });

  return $curriculums;
}

/**
 * Returns curriculum keys with corresponding university identifiers
 * @return array Array of curriculum key => university key
 */
function _ed_cluster_curriculum_university_data()
{
  $structure = _ed_cluster_universities_with_curriculums_structure();
  $data = [];

  array_walk($structure, function ($item, $key) use (&$data) {
    if (is_array($item['curriculums']) && sizeof($item['curriculums']) > 0) {
      $data = array_merge($data, array_map(function () use ($key) {
        return $key;
      }, $item['curriculums']));
    }
  });

  return $data;
}

/**
 * Implements hook_module_implements_alter()
 */
function ed_cluster_module_implements_alter(&$implementations, $hook)
{
  // This one could have serious implications and would only remove the hook if
  // and only if the constant is set and the value equals true.
  // This hack is required to prevnt field update protection in case change to
  // allowed_values removes one that have already been used within the field.
  // One should know what is being done while running it.
  if ($hook === 'field_update_forbid') {
    if (defined('ED_REMOVE_LIST_FIELD_UPDATE_FORBID') && ED_REMOVE_LIST_FIELD_UPDATE_FORBID === true) {
      if (array_key_exists('list', $implementations)) {
        unset($implementations['list']);
      }
    }
  }
}

/**
 * Returns data with counts of unseen resources by type.
 * @param int $gid Group identifier
 * @param int $uid User identifier
 * @return array         An array of type => count
 */
function ed_cluster_unseen_counts_by_type($gid, $uid)
{
  static $data;
  $data_key = $gid . ':' . $uid;

  if (!isset($data)) {
    $data = [];
  }

  if (!module_exists('ed_statistics')) {
    return [];
  }

  if (array_key_exists($data_key, $data)) {
    return $data[$data_key];
  }

  $q = db_select('og_membership', 'ogm');
  $q->condition('ogm.gid', $gid);
  $q->condition('ogm.entity_type', 'node');
  $q->join('node', 'n', 'n.nid = ogm.etid AND n.status = 1');
  $q->leftJoin('ed_entity_view', 'ev', 'ev.entity_type = \'node\' AND ev.eid = ogm.etid AND ev.uid = ' . $uid);
  $q->fields('n', ['type',]);
  $q->isNull('ev.eid');
  $q->groupBy('n.type');
  $q->addTag('node_access');
  $q->addExpression('COUNT(DISTINCT(n.nid))', 'count');

  $response = $q->execute()->fetchAll(PDO::FETCH_ASSOC);

  $tmp_data = [];
  if ($response && is_array($response) && count($response) > 0) {
    array_walk($response, function ($value) use (&$tmp_data) {
      $tmp_data[$value['type']] = $value['count'];
    });
  }
  $data[$data_key] = $tmp_data;

  return $data[$data_key];
}

/**
 * Returns title of a menu, with an optional addition of resources unseen by current user.
 * @param string $title Initial title that would be translated
 * @param object $node Group node object
 * @param string $type Node type
 * @return string        Translated title with an option addition of unseen resources
 */
function ed_cluster_title_with_unseen_count($title, $node, $type)
{
  if (user_is_logged_in()) {
    $data = ed_cluster_unseen_counts_by_type($node->nid, $GLOBALS['user']->uid);
    if (array_key_exists($type, $data)) {
      return t('@title (@count)', [
          '@title' => t($title),
          '@count' => $data[$type],
      ]);
    }
  }
  return t($title);
}
