<?php

/**
 * @file
 * Cluster module.
 */

define('ED_FIELD_PRIVATE_COMMENT', 'ed_field_private_comment');

define('ED_FIELD_TO_GROUP_MEMBER', 'ed_field_to_group_member');

define('ED_ACCESS_REALM', 'ed_access');

/**
 * Implements hook_menu().
 */
function ed_cluster_menu() {
  $items['clusters'] = array(
    'title' => t('Groups'),
    'page callback' => 'ed_cluster_listing_page',
    'access callback' => TRUE,
    'weight' => 20,
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['node/%node/task-manager'] = array(
    'title' => t('Task Manager'),
    'page callback' => 'ed_task_manager',    
    'access callback' => 'ed_task_manager_access',
    'page arguments' => array('node', 1),
    'access arguments' => array('node', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['node/%node/news'] = array(
    'title' => t('News'),
    'page callback' => 'ed_listing_from_group',    
    'access callback' => 'ed_group_content_listing_access',    
    'page arguments' => array('node', 1, 'ed_news'),
    'access arguments' => array('node', 1, 'ed_news'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['node/%node/event'] = array(
    'title' => t('Events'),
    'page callback' => 'ed_listing_from_group',    
    'access callback' => 'ed_group_content_listing_access',    
    'page arguments' => array('node', 1, 'ed_event'),
    'access arguments' => array('node', 1, 'ed_event'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['node/%node/blog'] = array(
    'title' => t('Blog'),
    'page callback' => 'ed_listing_from_group',
    'access callback' => 'ed_group_content_listing_access',
    'page arguments' => array('node', 1, 'ed_blog'),
    'access arguments' => array('node', 1, 'ed_blog'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['node/%node/learning-resource'] = array(
    'title' => t('Learning Resources'),
    'page callback' => 'ed_listing_from_group',    
    'access callback' => 'ed_group_content_listing_access',    
    'page arguments' => array('node', 1, 'ed_learning_resource'),
    'access arguments' => array('node', 1, 'ed_learning_resource'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['node/%node/forum'] = array(
    'title' => t('Discussion Board'),
    'page callback' => 'ed_listing_from_group',    
    'access callback' => 'ed_group_content_listing_access',    
    'page arguments' => array('node', 1, 'ed_forum'),
    'access arguments' => array('node', 1, 'ed_forum'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['node/%node/page'] = array(
    'title' => t('Pages'),
    'page callback' => 'ed_listing_from_group',    
    'access callback' => 'ed_group_content_listing_access',
    'page arguments' => array('node', 1, 'ed_page'),
    'access arguments' => array('node', 1, 'ed_page'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['node/%node/bookmark'] = array(
    'title' => t('Bookmarks'),
    'page callback' => 'ed_listing_from_group',
    'access callback' => 'ed_group_content_listing_access',
    'page arguments' => array('node', 1, 'ed_bookmark'),
    'access arguments' => array('node', 1, 'ed_bookmark'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['clusters/get/groups_members'] = array(
    'page callback' => 'ed_cluster_get_groups_members_ajax',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function ed_cluster_menu_alter(&$items) {
  if (isset($items['node/%/group'])) {
    $items['node/%/group']['title callback'] = '_ed_cluster_group_menu_title';
    $items['node/%/group']['title arguments'] = array('node', 1);
  }
}

function ed_group_content_listing_access($filler, $gnode, $type){  
  $is_group = _ed_is_nid_group($gnode->nid);
  return $is_group;
}

function ed_listing_from_group($filler, $gnode, $type){
  
  $content = array();

  if (node_access('create', $type) && og_is_member('node', $gnode->nid)) {
    $destination = _ed_cluster_destination_for_group_node_type($gnode, $type);

    $type_dashed = str_replace('_', '-', $type);
    $content['add-new-container'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('ed-add-new-node', 'ed-add-new-'.$type_dashed),
      ),
    );
    $content['add-new-container']['add-new-link'] = array(
      '#type' => 'markup',
      '#markup' => l(t('Add new'), 'node/add/'.$type_dashed, array('query' => array('og_group_ref' => $gnode->nid, 'destination' => $destination))),
    );
  }

  $content_nids = _ed_get_group_content_by_type($gnode->nid, $type);
  $nodes = node_load_multiple($content_nids);
  $build = node_view_multiple($nodes);
  $build['pager'] = array(
    '#theme' => 'pager',
    '#weight' => 5,
  );
  $content['listing'] = $build;
  
  return $content;
}

/**
 * Implements hook_field_extra_fields().
 */
function ed_cluster_field_extra_fields(){  
  $extra['node']['ed_cluster']['display'] = array(
    'ed_cluster_content' => array(
      'label' => t('Group content paged'),
      'description' => t('desc'),
      'weight' => 10,
    ),
  );
  return $extra;
}

/**
 * Implements hook_preprocess_node().
 */
function ed_cluster_preprocess_node(&$vars) {
  if ('ed_cluster' == $vars['node']->type) {
    if (isset($vars['dashboard']) && TRUE == $vars['dashboard']) {
      $vars['user_picture'] = '';
      $vars['display_submitted'] = FALSE;
      $vars['classes_array'] []= 'node-dashboard';
    }

    if ('teaser' === $vars['view_mode'] && isset($vars['group_access'][LANGUAGE_NONE][0]['value']) && 1 == $vars['group_access'][LANGUAGE_NONE][0]['value']) {
      $vars['classes_array'][] = 'ed-group-private';
    }
  }
}

/**
 * Implements hook_node_view().
 */
function ed_cluster_node_view($node, $view_mode, $langcode){
  // Handle group breadcrumb
  if ('full' == $view_mode) {
    $node->content[] = _ed_cluster_node_group_greadcrumbs($node);
  }
  
  switch ($node->type){
    case 'ed_cluster':
      if($view_mode=='full'){
        $content_nids = _ed_get_group_content($node->nid);      
        $content = node_load_multiple($content_nids);        
        $types = array();
        foreach($content as $content_single){        
          $types[] = $content_single->type;
        }
        $types_unique = array_unique($types);

        $options = array(
          'attributes' => array(),
          'query' => array(
            'og_group_ref' => $node->nid,
            'destination' => 'node/'.$node->nid,
          ),
        );

        // Check if current user is a member of the group
        $is_group_member = og_is_member('node', $node->nid);

        foreach($types_unique as $type){
          if($type!='ed_task' && $type!='ed_answer'){
            $node->content['ed_cluster_content'][$type]['heading'] = array(
              '#type' => 'markup',
              '#markup' => '<h2 class="'.$type.'">'.t(ucwords(str_replace('ed', '', str_replace('_',' ',$type)))).'</h2>',
            );
            // Add new link is only shown to group members
            //if ($is_group_member) {
            //  $node->content['ed_cluster_content'][$type]['heading']['#markup'] .= '<em class="ed-og-add-new">'.l(t('Add new'), 'node/add/'.str_replace('_', '-',$type), $options).'</em>';
            //}
            $last_nodes = _ed_get_last_content_by_type($type, $content);
            foreach($last_nodes as $last_node_single){
                $tere = node_view($last_node_single, 'teaser');
                $node->content['ed_cluster_content'][$type][$last_node_single->nid] = $tere;
            }
          }
        }
      } else if ('dashboard' == $view_mode) {
        $recent_content = _ed_get_group_recent_content($node->nid, 5);
        $recnt_content_nodes = node_load_multiple($recent_content);
        if ($recnt_content_nodes) {
          $items = array();
          foreach ($recnt_content_nodes as $single) {
            $single_action = ($single->created == $single->changed) ? 'created' : 'changed';

            // Determine the user who really acted in case of changed
            if ('changed' == $single_action) {
              $query = db_select('node_revision', 'nrv')
                ->fields('nrv', array('uid'))
                ->condition('nid', $single->nid)
                ->condition('vid', $single->vid)
                ->range(0, 1)
                ->orderby('nrv.timestamp', 'DESC');
              $real_actor = $query->execute()->fetchObject();
              if ($real_actor) {
                $single_user_acc = user_load($real_actor->uid);
              } else {
                $single_user_acc = user_load($single->uid);
              }
            } else {
              $single_user_acc = user_load($single->uid);
            }

            $single_name = l(edidaktikum_get_full_name_for_user_account($single_user_acc), 'user/' . $single->uid);

            // Deal with special case of ed_answer
            if ('ed_answer' == $single->type) {
              $single_title = l(ed_answer_get_answer_title($single), 'node/' . $single->nid);
            } else {
              $single_title = l($single->title, 'node/' . $single->nid);
            }

            if ('created' == $single_action) {
              $items[] = array(
                'data' => t('!name added !node @time', array('!name' => $single_name, '!node' => $single_title, '@time' => format_date($single->created, 'short'))),
              );
            } else {
              $items[] = array(
                'data' => t('!name changed !node @time', array('!name' => $single_name, '!node' => $single_title, '@time' => format_date($single->changed, 'short'))),
              );

            }
          }
          $node->content['recent-activity'] = array(
            '#theme' => 'item_list',
            '#items' => $items,
            '#attributes' => array(
              'class' => array('ed-group-latest-updates-listing'),
            ),
          );
        } else {
          $node->content['recent-activity'] = array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array('ed-no-recent-activity'),
            ),
          );
          $node->content['recent-activity']['no-recent-activity'] = array(
            '#type' => 'markup',
            '#markup' => t('No recent activity'),
          );
        }
      }
      break;      
  }
}

function _ed_get_last_content_by_type($type, $content){
  $all_latest_nids = array();
  foreach($content as $content_single){
    if($content_single->type == $type){
      $all_latest_nids[] = $content_single;
    }
  }
  usort($all_latest_nids, "cmp");  
  $count = 0;
  $latest_nids = array();
  foreach($all_latest_nids as $nid){
    $latest_nids[] = $nid;
    $count++;
    if($count==3){
      break;
    }
  }
  
  return $latest_nids;
  
}
function cmp($a, $b){
    return strcmp($b->created, $a->created);
}

/**
 * Returns recently created/modified content of the group.
 * @param $guid
 *   Group node identifier
 * @param $limit
 *   Optional number of results to be returned
 * @return
 *   An array of node identifiers if any exist
 */
function _ed_get_group_recent_content($gid, $limit = NULL){
  $query = db_select('node', 'n');
  $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type = 'node'");
  $query->fields('n', array('nid'))
      ->condition('ogm.gid', $gid)
      ->condition('n.nid', $gid, '!=')
      ->addTag('node_access')
      ->orderBy('n.changed', 'DESC')
      ->distinct();
  if ($limit) {
    $query->range(0, 5);
  }
  $result = $query->execute()->fetchCol();
  return $result;
}

function _ed_get_group_content($gid){
  $query = db_select('node', 'n');
  $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type = 'node'");
  $query->fields('n', array('nid'))
      ->condition('ogm.gid', $gid)
      ->condition('n.nid', $gid, '!=')
      ->addTag('node_access')
      ->distinct();
  $result = $query->execute()->fetchCol();
  return $result;
}

function _ed_get_group_content_by_type($gid, $type){
  $query = db_select('node', 'n');
  $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type = 'node'");
  $query->fields('n', array('nid'))
      ->condition('ogm.gid', $gid)
      ->condition('n.nid', $gid, '!=')
      ->condition('n.type', $type)
      ->addTag('node_access')
      ->orderBy('n.created', 'DESC')
      ->distinct();
  $result = $query->execute()->fetchCol();
  return $result;
}

/**
 * Check if current user is either administrator, group
 * creator or group admin.
 * @return boolean
 */
function ed_task_manager_access($test, $node){
  if ('ed_cluster' != $node->type) {
    return false;
  }

  $account = $GLOBALS['user'];
  if (in_array('administrator', $account->roles)) {
    return true;
  }

  if ($node->uid === $account->uid) {
    return true;
  }

  if (in_array(OG_ADMINISTRATOR_ROLE, og_get_user_roles('node', $node->nid, $account->uid, FALSE))) {
    return true;
  }

  return false;
}

/**
 * Task Manager page.
 */
function ed_task_manager($test, $node){
  drupal_add_css(drupal_get_path('module', 'ed_cluster').'/task_manager.css');
  $account = $GLOBALS['user'];
  
  $content = array();
 
  $options = array(
    'attributes' => array(),
    'query' => array(
      'og_group_ref' => $node->nid,
      'destination' => _ed_cluster_destination_for_group_node_type($node, 'ed_task'),
    ),
  );
  $content['add-new-container'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('ed-add-new-node', 'ed-add-new-task'),
    ),
  );
  $content['add-new-container']['add-new'] = array(
    '#type' => 'markup',
    '#markup' => l(t('Add new'), 'node/add/ed-task', $options),
  );

  $group_members_uids = _get_users_in_group($node->nid);
  
  // Remove creator
  if (in_array($node->uid, $group_members_uids)) {
    unset($group_members_uids[array_search($node->uid, $group_members_uids)]);
  }

  $admin_uids = _ed_cluster_get_group_admins($node);
  // Remove admins
  if (!empty($admin_uids)) {
    foreach ($admin_uids as $auid) {
      unset($group_members_uids[array_search($auid, $group_members_uids)]);
    }
  }
  
  $group_members = user_load_multiple($group_members_uids);

  // Get all group tasks
  $query = db_select('node', 'n');
  $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type='node' AND ogm.group_type = 'node' AND ogm.gid = :gid AND ogm.state = :active", array(':gid' => $node->nid, ':active' => OG_STATE_ACTIVE));
  $query->fields('n', array('nid'))
    ->condition('n.type', 'ed_task');
  $nids = $query->execute()->fetchCol();

  $header = array(t('Name'));
  $nodes = node_load_multiple($nids);
    
  foreach(array_values($nodes) as $key => $node_single){
    array_push($header, l($key+1, 'node/'.$node_single->nid, array('attributes' => array('title' => $node_single->title))));  
  }
  $rows = array();
  
  foreach(array_values($group_members) as $index => $member){
      $rows[] = array(
        'data' => array(
          $member->uid => l($member->ed_field_full_name[LANGUAGE_NONE][0]['safe_value'], 'user/'.$member->uid),
        ),
      );
      foreach($nodes as $node_single){
        if(_ed_check_if_answered($member->uid, $node_single->nid)=='answered'){
          $tmp_answer_nid = _ed_get_answer_nid($member->uid, $node_single->nid);
          $rows[$index]['data'][$node_single->nid] = array('data' => l('&nbsp;', 'node/' . $tmp_answer_nid[0], array('html' => TRUE)), 'class' => _ed_check_if_answered($member->uid, $node_single->nid));
        }else{
          $rows[$index]['data'][$node_single->nid] = array('data' => '', 'class' => _ed_check_if_answered($member->uid, $node_single->nid));
        }
      }
  }

  $content['table'] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#header' => $header,
  );
  return $content;
}
function _ed_get_answer_nid($uid, $tnid){
  $query = db_select('node', 'n');
  $query->join('field_data_field_ref_to_task', 'ref', 'n.nid = ref.entity_id');
  $query->fields('n', array('nid'));
  $query->condition('n.uid', $uid)
      ->condition('ref.field_ref_to_task_target_id', $tnid);
  $result = $query->execute()->fetchCol();
  return $result;
}
function _ed_check_if_answered($uid, $tnid){
  $query = db_select('node', 'n');
  $query->join('field_data_field_ref_to_task', 'ref', 'n.nid = ref.entity_id');
  $query->fields('n', array('nid'));
  $query->condition('n.uid', $uid);
  $query->condition('ref.field_ref_to_task_target_id', $tnid);
  $result = $query->execute()->fetchCol();
  if(!empty($result)){
    
    return "answered";
  }else{
    return "unanswered";
  }
  
  
}

/*
 * Get all answers from selected user.
 */
function _ed_check_for_answers($uid){
  $query = db_select('node', 'n');
  $query
      ->condition('n.type', 'ed_answer')
      ->condition('n.uid', $uid)
      ->fields('n', array('nid'));
  return $query->execute()->fetchCol();
}

// TODO Deprecated: This function is no longer used.
// Consider removal.
/*
 * Get all tasks that the user has made for this group
 */
function _ed_get_user_group_tasks($uid, $nid){
  $query = db_select('node', 'n');
  $query->join('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type='node' AND ogm.group_type = 'node' AND ogm.gid = :gid AND ogm.state = :active", array(':gid' => $nid, ':active' => OG_STATE_ACTIVE));
  $query->fields('n', array('nid'))
    ->condition('n.type', 'ed_task')
    ->condition('n.uid', $uid);

  return $query->execute()->fetchCol();
}

/**
 * Get all users of a group
 */
function _get_users_in_group($gid) {
  $query = db_select('users', 'u');
 
  $query
    ->condition('u.uid', 0, '<>')
    ->condition('u.status', 1, '=')
    ->fields('u', array('uid', 'name'))
    ->join('og_membership', 'ogm', "ogm.gid = :gid AND u.uid = ogm.etid AND ogm.entity_type = 'user'", array(':gid' => $gid));
  $result = $query->execute()->fetchCol();
  
  return $result;
}

/**
 * Returns an array of user identifiers that are
 * administrators of a group id provided.
 *
 * @param $node
 *   Group node
 * @param $add_creator
 *   A flag to add creator uid to admins
 * @return
 *   User identifiers or empty
 */
function _ed_cluster_get_group_admins(&$node, $add_creator = false) {
  // Determine general role identifier (rid) for group admin
  $group_roles = og_roles('node', 'ed_cluster', $node->nid);
  $admin_rid = array_search(OG_ADMINISTRATOR_ROLE, $group_roles);
  
  $query = db_select('users', 'u');
  $query->join('og_users_roles', 'ogur', "u.uid = ogur.uid AND ogur.gid = :gid AND ogur.group_type = 'node' AND ogur.rid = :rid", array(':gid' => $node->nid, ':rid' => $admin_rid));
  $query
    ->fields('u', array('uid'));
  $admins = $query->execute()->fetchCol();

  if ($add_creator && !in_array($node->uid, $admins)) {
    $admins []= $node->uid;
  }

  return $admins;
}

/**
 * Determines if user is creator or admin in any of provided groups.
 *
 * @param $uid
 *   User unique identifier
 * @param $groups
 *   Group node identifiers
 * @return
 *   Boolean value
 */
function _ed_cluster_is_groups_admin_or_creator($uid, $groups) {
  // Return FALSE if no groups provided
  if (empty($groups) || !is_array($groups)) {
    return FALSE;
  }

  // Group creator case
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.uid', $uid)
    ->condition('n.nid', $groups, 'IN')
    ->countQuery();

  if ((int) $query->execute()->fetchField() > 0) {
    return TRUE;
  }

  // Group administrator case
  $group_roles = og_roles('node', 'ed_cluster');
  $admin_rid = array_search(OG_ADMINISTRATOR_ROLE, $group_roles);
  
  $query = db_select('users', 'u');
  $query->join('og_users_roles', 'ogur', "u.uid = ogur.uid AND ogur.uid = :uid AND ogur.group_type = 'node' AND ogur.rid = :rid", array(':uid' => $uid, ':rid' => $admin_rid));
  $query
    ->fields('u', array('uid'))
    ->condition('ogur.gid', $groups, 'IN')
    ->countQuery();

  if ((int) $query->execute()->fetchField() > 0) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Clusters listing page.
 */
function ed_cluster_listing_page() {
  $content = array();
  $og_groups = ed_cluster_get_clusters();
  $account = $GLOBALS['user'];
  if(in_array('teacher', $account->roles)||in_array('administrator', $account->roles)){
    $content['add-new'] = array(
      '#type' => 'link',
      '#title' => t('Add new group'),
      '#href' => 'node/add/ed-cluster',
      '#prefix' => '<div class="ed-add-new-node ed-add-new-cluster">',
      '#suffix' => '</div>',
    );
  }
  if (!empty($og_groups)) {
    $nodes = node_load_multiple($og_groups);
    $build = node_view_multiple($nodes);
    $build['pager'] = array(
      '#theme' => 'pager',
      '#weight' => 5,
    );
    $content['clusters'] = $build;
  }
  return $content;
}

function _ed_is_nid_group($nid){
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.type', 'ed_cluster')
    ->condition('n.nid', $nid);
  $nids = $query->execute()->fetchCol();
  if(!empty($nids)){
    return true;
  }
  return false;
  
}

/**
 * Returns paged ed_cluster node identifiers
 * NB! Ignores node_access
 */
function ed_cluster_get_clusters() {
  $query = db_select('node', 'n')
    ->extend('PagerDefault')
    ->fields('n', array('nid'))
    ->condition('n.status', 1)
    ->condition('n.type', 'ed_cluster')
    ->orderBy('created', 'DESC')
    ->limit(ed_get_paging_nr());
  $nids = $query->execute()->fetchCol();
  return $nids;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function ed_cluster_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => "1");
  }
}

/**
 * Implements hooks_views_api().
 */
function ed_cluster_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ed_cluster') . '/includes/views',
  );
}

/**
 * Implements hook_form_alter().
 */
function ed_cluster_form_alter(&$form, &$form_state, $form_id) {
  if ('ed_cluster_node_form' == $form_id) {
    if (empty($form['#node']->nid)) {
      drupal_set_title(t('Create Group'));
    }
  }
}
/**
 * Returns group menu title. Used within an override.
 */
function _ed_cluster_group_menu_title($type, $gid) {
  $pending_users_count = _ed_cluster_get_group_pending_members_count($gid);
  if ($pending_users_count > 0) {
    return t('Group (@count)', array('@count' => $pending_users_count));
  }
  return t('Group');
}

/**
 * Returns peding members count for a group.
 * @param $gid
 *   Group identifier
 * @return
 *   Pending members count
 */
function _ed_cluster_get_group_pending_members_count($gid) {
  static $count;

  if (isset($count)) {
    return $count;
  }

  $query = db_select('og_membership', 'ogm')
    ->fields('ogm', array('id'))
    ->condition('ogm.entity_type', 'user')
    ->condition('ogm.group_type', 'node')
    ->condition('ogm.gid', $gid)
    ->condition('ogm.state', OG_STATE_PENDING);

  $count = $query->countQuery()->execute()->fetchField();

  return $count;
}

/**
 * Implements hook_field_widget_alter().
 */
function ed_cluster_field_widget_form_alter(&$element, &$form_state, $context) {
  if (!empty($element['#field_name']) && ED_FIELD_TO_GROUP_MEMBER == $element['#field_name']) {
    $element['#attached']['js'][] = drupal_get_path('module', 'ed_cluster') . '/js/field_to_group_member.js';
    $element['#multiple'] = TRUE;
  }

  // This removes admin override from Organic Groups Audience field
  if (!empty($element['#field_name']) && OG_AUDIENCE_FIELD == $element['#field_name']) {
    if (!empty($element['admin'])) {
      $element['admin']['#access'] = FALSE;
    }
  }
}

/**
 * This serves data to be used by ED_FIELD_TO_GROUP_MEMBER field.
 * Field is repopulated with data once selection is made.
 */
function ed_cluster_get_groups_members_ajax() {
  $group_data = array(
    array(
      'value' => '_none',
      'name' => t('- None -'),
    ),
  );
  $groups = isset($_POST['groups']) ? $_POST['groups'] : array();

  // Remove _none from values
  if (is_array($groups)) {
    if (($key = array_search('_none', $groups)) !== FALSE) {
      unset($groups[$key]);
    }
  } else {
    if ('_none' == $groups) {
      $groups = "";
    }
  }

  if (!empty($groups)) {
    $query = db_select('users', 'u');
    $query->join('og_membership', 'ogm', "u.uid = ogm.etid AND ogm.entity_type = 'user'");
    $query->leftJoin('field_data_ed_field_full_name', 'ufn', "u.uid = ufn.entity_id AND ufn.entity_type = 'user' AND ufn.bundle = 'user'");
    $query
      ->distinct()
      ->condition('u.uid', 0, '<>')
      ->condition('u.status', 1, '=')
      ->condition('ogm.gid', $groups)
      ->fields('u', array('uid', 'name'))
      ->fields('ufn', array('ed_field_full_name_value'));
    $result = $query->execute()->fetchAll();

    if ($result) {
      foreach ($result as $single) {
        $group_data []= array(
          'value' => $single->uid,
          'name' => (!empty($single->ed_field_full_name_value)) ? $single->ed_field_full_name_value : $single->name,
        );
      }
    }
  }
  drupal_json_output($group_data);
}

/**
 * Implements hook_comment_view_alter().
 */
function ed_cluster_comment_view_alter(&$build) {
  if (isset($build['#comment']->{ED_FIELD_PRIVATE_COMMENT}[LANGUAGE_NONE][0]['value']) && 1 == $build['#comment']->{ED_FIELD_PRIVATE_COMMENT}[LANGUAGE_NONE][0]['value']) {
    global $user;
    if (!(user_is_logged_in() && ($build['#comment']->uid == $user->uid || $build['#node']->uid == $user->uid))) {
      $build['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_node_grants().
 */
function ed_cluster_node_grants($account, $op) {
  if ('view' != $op) {
    return;
  }

  if (!field_info_field(ED_FIELD_TO_GROUP_MEMBER)) {
    return array();
  }

  $query = db_select('field_data_ed_field_to_group_member', 'tgm')
    ->fields('tgm', array('entity_type', 'entity_id'))
    ->condition('tgm.ed_field_to_group_member_target_id', $account->uid);
  $result = $query->execute()->fetchAll();

  if ($result) {
    foreach ($result as $single) {
      $realm = ED_ACCESS_REALM . ':' . $single->entity_type;
      $grants[$realm][] = $single->entity_id;
    }
  }
  $grants[ED_ACCESS_REALM . ':creator'][] = $account->uid;

  return !empty($grants) ? $grants: array();
}

/**
 * Implements hook_node_access_records().
 */
function ed_cluster_node_access_records($node) {
  if (empty($node->status)) {
    return array();
  }

  if (!empty($node->{ED_FIELD_TO_GROUP_MEMBER}[LANGUAGE_NONE])) {
    $grants[] = array(
      'realm' => ED_ACCESS_REALM .':node',
      'gid' => $node->nid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1,
    );
    $grants[] = array(
      'realm' => ED_ACCESS_REALM . ':creator',
      'gid' => $node->uid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1,
    );
  }

  return !empty($grants) ? $grants : array();
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ed_cluster_ctools_plugin_directory($module, $plugin) {
  if('entityreference' == $module || ('content_types' == $plugin && 'ctools' == $module)) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Returns destination for group node type.
 * Corresponds with group page for that type.
 *
 * @param $gnode
 *   Object of ed_cluster node
 * @param $type
 *   Current node page type
 *
 * @return
 *   Destination string
 */
function _ed_cluster_destination_for_group_node_type(&$gnode, $type) {
  $destination = 'node/' . $gnode->nid;
  switch($type) {
    case 'ed_blog':
    case 'ed_bookmark':
    case 'ed_forum':
    case 'ed_news':
    case 'ed_page':
    case 'ed_learning_resource':
    case 'ed_event':
      $type_dashed = str_replace('_', '-', $type);
      $type_dashed = substr($type_dashed, 3);
      $destination .= '/' . $type_dashed;
      break;
    case 'ed_task':
      $destination .= '/task-manager';
      break;
  }

  return $destination;
}

/**
 * Retruns themed group breadcrumb for node.
 *
 * @param $node
 *   Node object
 * @param $group
 *   Group node object (ed_cluster)
 *
 * @return string
 *   Themed breadcrumb
 */
function _ed_cluster_node_group_breadcrumb(&$node, &$group) {
  $destination = _ed_cluster_destination_for_group_node_type($group, $node->type);
  $breadcrumb[] = l($group->title, 'node/'. $group->nid);
  if (('node/' . $group->nid) != $destination) {
    $breadcrumb[] = l(t('Type page'), $destination);
  }
  $breadcrumb[] = $node->title;

  return theme_breadcrumb(array('breadcrumb' => $breadcrumb));
}

/**
 * Returns markup for node group breadcrumbs.
 *
 * @param $node
 *   A node object.
 *
 * @return array
 *   Array with markup
 */
function _ed_cluster_node_group_greadcrumbs(&$node) {
  $output = array();
  if (!empty($node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE])) {
    $groups = node_load_multiple(array_map(function($element) { return $element['target_id']; }, $node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE]));
    if (!empty($groups)) {
      $output['group-breadcrumbs'] = array(
        '#type' => 'container',
        '#attributes' => array(
        ),
      );
      foreach ($groups as $group) {
        $output['group-breadcrumbs']['bread-crumb-' . $group->nid] = array(
          '#type' => 'markup',
          '#markup' => _ed_cluster_node_group_breadcrumb($node, $group),
        );
      }
    }
  }

  return $output;
}

