<?php

require_once('ed_blog_functions.inc');

/*
 * Implements hook_info().
 */

function ed_blog_node_info() {
  $items['ed_blog'] = array(
    'name' => t('Blog'),
    'type' => 'ed_blog',
    'base' => 'node_content',
    'description' => t('description'),
    'has_title' => '1',
    'title_label' => t('Title'),
    'body_label' => t('body_label'),
  );
  return $items;
}

/*
 * Implements hook_form().
 */
function ed_blog_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

function ed_blog_form_alter(&$form, &$form_state, $form_id){
  if( $form_id == 'ed_blog_node_form' && arg(2)!='edit'){
    drupal_set_title(t('New Blog Post'));
  }else if($form_id == 'ed_blog_node_form' && arg(2) == 'edit'){
    drupal_set_title(t('Edit Blog Post'));
  }
}

/*
 * Implements hook_menu().
 */

function ed_blog_menu() {
  $items['dashboard/blogs'] = array(
    'title' => t('Blog'),
    'page callback' => 'ed_blog_listing_page',
    'access callback' => 'user_is_logged_in',
    'weight' => 20,
    'menu_name' => 'ed-dashboard-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['user/%user/blog'] = array(
    'title' => 'Blog',
    'page callback' => 'ed_blog_user_profile_blog_listing_page',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

function ed_blog_listing_page() {
  menu_tree_set_path('main-menu', 'dashboard');

  $content = array();
  drupal_set_title(t('My Blog'));

  $content['add-new-container'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('ed-add-new-node', 'ed-add-new-ed-blog'),
    ),
  );
  $content['add-new-container']['add-blog'] = array(
    '#type' => 'link',
    '#title' => t('Add new blog post'),
    '#href' => 'node/add/ed-blog',
  );

  $table_type = 'pager_table';

  $nids = _ed_get_user_blogs($GLOBALS['user']->uid);
  $nodes = node_load_multiple($nids);
  $rows = array();
  foreach($nodes as $node) {
    if($node->type == 'ed_blog') {
      $rows[] = array(
        'data' => array(
          'type' => _get_type($node),
          'post_name' => l($node->title, 'node/' . $node->nid),
          'created' => format_date($node->created, 'short'),
        ),
      );
    }else{
      $dueDateText = "";
      $dueDateTS = _ed_get_due_date($node->field_ref_to_task['und']['0']['target_id']);
      if (!empty($dueDateTS)) {
        $dueDate = strtotime($dueDateTS[0]);
        $dueDateText = " (" . t('Due Date:') . format_date($dueDateTS[0], 'short') . ") ";
      }
      $rows[] = array(
        'data' => array(
          'type' => _get_type($node),
          'post_name' => l(ed_answer_get_answer_title($node), 'node/' . $node->nid) . $dueDateText,
          'created' => format_date($node->created, 'short'),
        ),
      );
    }
  }

  $content[$table_type] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#header' => array(t('Type'), t('Title'), t('Date')),
  );
  $content['pager'] = array('#theme' => 'pager');


  
  $content['derp'] = array(
    '#type' => 'markup',
    '#markup' => ed_super_table_render('kek'),
    );
  

  return $content;
}

function ed_blog_user_profile_blog_listing_page($user) {

  $content = array();
  drupal_set_title(edidaktikum_get_full_name_for_user_account($user));

  $table_type = 'pager_table';

  $nids = _ed_get_user_blogs($user->uid, true);
  $nodes = node_load_multiple($nids);
  $rows = array();
  foreach($nodes as $node) {
    if ('ed_answer' === $node->type) {
      $post_name = ed_answer_get_answer_title($node);
    } else {
      $post_name = $node->title;
    }
    $rows[] = array(
      'data' => array(
        'post_type' => _get_type($node),
        'post_name' => l($post_name, 'node/' . $node->nid),
        'created' => format_date($node->created, 'short'),
      ),
    );
  }

  $content[$table_type] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#header' => array(t('Type'), t('Title'), t('Date')),
  );
  $content['pager'] = array('#theme' => 'pager');
  return $content;

}

function _get_type($node){
  if($node->type == 'ed_blog'){
    return t('Post');
  }
  else{
    return t('Answer to Task');
  }
}

/**
 * Returns all ed_blog and ed_answer identifiers belonging to
 * specified user id. Is pagination-aware.
 * @param $uid
 *   User uid
 */
function _ed_get_user_blogs($uid, $only_blogs = false) {
  if ($only_blogs) {
    $help = array('ed_blog');
  } else {
    $help = array('ed_blog', 'ed_answer');
  }

  $query = db_select('node', 'n')
    ->addTag('node_access')
    ->fields('n', array('nid'));
  $query->condition('type', $help, 'IN')
    ->condition('n.uid', $uid)
    ->orderBy('n.created', 'DESC');
  $query = $query->extend('TableSort')->extend('PagerDefault')->limit(ed_get_paging_nr());
  $result = $query->execute()->fetchCol();

  return $result;
}

function _ed_get_due_date($nid) {
  $query = db_select('field_data_ed_task_due_date', 'n')
    ->fields('n', array('ed_task_due_date_value'));
  $query->condition('entity_id', $nid);
  $result = $query->execute()->fetchCol();

  return $result;
}

/**
 * Implements hook_node_view().
 */
function ed_blog_node_view($node, $view_mode, $langcode){
  if($view_mode == 'teaser'){
    if(in_array($node->type, array('ed_blog', 'ed_answer'))){
      $type = $node->type=='ed_blog' ? $type = t('Post') : node_type_get_name($node->type);
      $author = user_load($node->uid);
      $userfullname = edidaktikum_get_full_name_for_user_account($author);   
      $parts = array(
        $type,
        l($userfullname, 'user/' . $author->uid),
        format_date($node->created, 'short'),
      );
      $node->content['metadata'] = array(
        '#type' => 'markup',
        '#weight' => 50,
        '#markup' => implode(' / ', $parts),
        '#prefix' => '<div class="description">',
        '#suffix' => '</div>',
    );
    }
  }
}


/**
 * Implements hook_ctools_plugin_api().
 */
function ed_blog_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => 1);
  }
}
