<?php

require_once('ed_answer_functions.inc');

function ed_answer_node_info()
{
  $items['ed_answer'] = array(
    'name' => t('Answer'),
    'type' => 'ed_answer',
    'base' => 'node_content',
    'description' => t('description'),
    'has_title' => 0,
    'body_label' => t('body_label'),
  );
  return $items;
}

function ed_answer_form($node, $form_state)
{
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_node_view().
 */
function ed_answer_node_view($node, $view_mode, $langcode)
{
  if ('ed_answer' == $node->type) {

    // Override node title with our logic
    $node->title = ed_get_answer_title($node);
    if ('full' == $view_mode) {
      drupal_set_title($node->title);

    } elseif ('teaser' == $view_mode) {
      $teaser = true;
      $node->title = ed_get_answer_title($node, $teaser);

    }
  }
}


function ed_add_js_to_answer_form($form_element, &$form_state)
{

  drupal_add_js(drupal_get_path('module', 'ed_answer') . '/js/ed_answer_js.js');

  return $form_element;

}


/**
 * Implements hook_form_alter().
 */
function ed_answer_form_alter(&$form, &$form_state, $form_id)
{

  if ($form_id == 'ed_answer_node_form') {
    if (empty($form['#node']->nid)) {
      drupal_set_title(t('Create Answer'));
    }


    $form['#after_build'] = array('ed_add_js_to_answer_form');


    if (isset($form['#node']->field_ref_to_task)) {
      $reftotask = $form['#node']->field_ref_to_task['und'][0]['target_id'];
    } else {
      $reftotask = $_GET['field_ref_to_task'];
    }
    $node = node_load($reftotask);


    // Get all groups this task belongs to, get user groups, make intersection of them and put these groups
    // as default values, so that the members offered to user would be valid. Hide groups choice at all
    if (isset($node->og_group_ref[LANGUAGE_NONE]) && is_array($node->og_group_ref[LANGUAGE_NONE]) && count($node->og_group_ref[LANGUAGE_NONE]) > 0) {

      $task_groups_ids = array_map(function ($ref) {
        return $ref['target_id'];
      }, $node->og_group_ref[LANGUAGE_NONE]);

      $user_groups_ids = og_get_groups_by_user();

      $selected_groups_ids = array_intersect($task_groups_ids, $user_groups_ids['node']);

      if ($selected_groups_ids) {
        $form['og_group_ref']['und'][0]['default']['#value'] = $selected_groups_ids;
      }

      // This solution prevents the Specify user box from showing the right selected group members we got before;
      // it forces to show all the members of groups this user belongs to
      //$form['og_group_ref']['und'][0]['default']['#type'] = "hidden";


    } else {
      drupal_set_message(t('This task does not belong to any group'));
    }

    // Using this instead keeps the right selected groups and hence the members, but prevents from changing groups
    $form['og_group_ref']['#disabled'] = TRUE;


    //If this task is given to specific user, disable Specify user option in answer
    if (isset($node->ed_field_to_group_member[LANGUAGE_NONE]) && is_array($node->ed_field_to_group_member[LANGUAGE_NONE]) && count($node->ed_field_to_group_member[LANGUAGE_NONE]) > 0) {
      $form['ed_field_to_group_member']['#disabled'] = TRUE;
    }


    $form['ed_field_content']['#weight'] = 1;
    $form['field_ref_to_task']['und']['#title'] = t('Answer To Task');
    $form['tabs'] = array(
      '#type' => 'vertical_tabs',
      '#weight' => 0,
    );
    $form['ed_answer_task'] = array(
      '#tree' => TRUE,
      '#type' => 'fieldset',
      '#title' => t('Task'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#group' => 'tabs',
    );
    $form['ed_answer_task']['task_title'] = array(
      '#type' => 'markup',
      '#markup' => '<h2>' . l($node->title, 'node/' . $reftotask) . '</h2>',
      '#weight' => -1,
    );
    $task_content = field_get_items('node', $node, 'ed_field_content');
    $task_content_view = field_view_value('node', $node, 'ed_field_content', $task_content[0]);
    $form['ed_answer_task']['task_content'] = $task_content_view;


    $form['ed_field_difficulty_feedb']['#prefix'] = '<div role="alert" class="alert alert-info feedback-notice"> ' . t('Feedback is not personalised') . '</div>';


    $form['ed_field_difficulty_feedb']['#attributes']['data-toggle'][] = 'buttons';
    $form['ed_field_satisf_feedb']['#attributes']['data-toggle'][] = 'buttons';

    $form['ed_field_difficulty_feedb']['#weight'] = $form['ed_field_answer_emotions']['#weight'] - 2;
    $form['ed_field_satisf_feedb']['#weight'] = $form['ed_field_answer_emotions']['#weight'] - 1;


    if (!empty($form['#node']->ed_answer_field_time_spent[LANGUAGE_NONE][0]['mins']) && $form['#node']->ed_answer_field_time_spent[LANGUAGE_NONE][0]['mins'] >= 0) {
      $time_spent_mins = $form['#node']->ed_answer_field_time_spent[LANGUAGE_NONE][0]['mins'];
      $hours = floor($time_spent_mins / 60);
      $minutes = $time_spent_mins % 60;

      $form['ed_answer_field_time_spent'][LANGUAGE_NONE][0]['hours']['#default_value'] = $hours;
      $form['ed_answer_field_time_spent'][LANGUAGE_NONE][0]['mins']['#default_value'] = $minutes;

    }


    $form['ed_answer_field_time_spent'][LANGUAGE_NONE][0]['hours']['#prefix'] = '<div class="col-sm-4">';
    $form['ed_answer_field_time_spent'][LANGUAGE_NONE][0]['hours']['#suffix'] = '</div>';
    $form['ed_answer_field_time_spent'][LANGUAGE_NONE][0]['mins']['#prefix'] = '<div class="col-sm-4">';
    $form['ed_answer_field_time_spent'][LANGUAGE_NONE][0]['mins']['#suffix'] = '</div>';

    $form['ed_answer_field_time_spent']['#prefix'] = '<label class="control-label">' . t("Please estimate the time spent on the task!") . '</label><div class="row"><div class="col-xs-6">';
    $form['ed_answer_field_time_spent']['#suffix'] = '</div></div>';


    //Get categories
    $form['ed_answer_task_cat'] = array(
      '#tree' => TRUE,
      '#type' => 'fieldset',
      '#title' => t('Category'),
      '#group' => 'tabs',
    );

    $display = array('type' => 'term_reference_tree');

    $task_cats = field_view_field('node', $node, 'ed_field_category', $display);
    if (!empty($task_cats)) {
      $form['ed_answer_task_cat']['category'] = array(
        '#type' => 'markup',
        '#markup' => render($task_cats),
      );
    }


    //Get competencies
    $form['ed_answer_task_comp'] = array(
      '#tree' => TRUE,
      '#type' => 'fieldset',
      '#title' => t('Competence'),
      '#group' => 'tabs',
    );

    $group_node = node_load($node->og_group_ref[LANGUAGE_NONE][0]['target_id']);

    $task_comp = field_get_items('node', $group_node, 'ed_field_learning_outcome_ref');

    $outcomes = [];
    if (is_array($task_comp) && !empty($task_comp)) {
      for ($i = 0; $i < count($task_comp); $i++) {

        $lo_id = $task_comp[$i]["target_id"];
        $outcome = node_load($lo_id);

        $display = array('type' => 'term_reference_tree');
        $outcome_comps = field_view_field('node', $outcome, 'ed_field_category', $display);


        $outcomes [] = [
          "name" => $outcome->title,
          "description" => $outcome->ed_field_learning_outcomes["und"][0]["value"],
          "assessment_method" => $outcome->ed_field_assessment_method["und"][0]["value"],
          "competences" => $outcome_comps,
        ];
      }
    }


    if (!empty($outcomes)) {
      foreach ($outcomes as $key => $outcome) {
        $form['ed_answer_task_comp']['competence'][$key] = array(
          '#type' => 'markup',
          '#markup' => '<h4>' . $outcome['name'] . '</h4><p>' . $outcome['description'] . '</p><p>' . $outcome['assessment_method'] . '</p>' . render($outcome['competences']),
        );
      }
    }

    $form['#validate'][] = 'ed_answer_callback_function';


  } else if ($form_id == 'comment_node_ed_answer_form') {
    $isgadmin = ed_answer_is_group_manager($form['#node']->og_group_ref[LANGUAGE_NONE][0]['target_id']);
    if (!$isgadmin) {
      $form['ed_answer_status']['#access'] = FALSE;
      $form['ed_answer_grade']['#access'] = FALSE;
    } else {
      $form['#submit'][] = 'ed_answer_redirect_to_taskmanager';
    }

    $form['ed_answer_grade']['und']['#prefix'] = $form['ed_answer_grade']['und']['#prefix'] . "<div data-grade_limiter>";
    $form['ed_answer_grade']['und']['#suffix'] = "</div>" . $form['ed_answer_grade']['und']['#suffix'];

  }


}

function ed_answer_callback_function($form, &$form_state)
{

  if ($form_state['values']['ed_answer_field_time_spent'][LANGUAGE_NONE][0]['mins'] == 0 && $form_state['values']['ed_answer_field_time_spent'][LANGUAGE_NONE][0]['hours'] > 0) {
    $form_state['values']['ed_answer_field_time_spent'][LANGUAGE_NONE][0]['mins'] = $form_state['values']['ed_answer_field_time_spent'][LANGUAGE_NONE][0]['hours'] * 60;

  } else {
    $form_state['values']['ed_answer_field_time_spent'][LANGUAGE_NONE][0]['mins'] += $form_state['values']['ed_answer_field_time_spent'][LANGUAGE_NONE][0]['hours'] * 60;
  }


}


function ed_answer_redirect_to_taskmanager($form, &$form_state)
{
  $form_state['redirect'] = array(
    'node/' . $form['#node']->og_group_ref['und'][0]['target_id'] . '/task-manager',
    array(
      'query' => array(
        'tasknid' => $form['#node']->field_ref_to_task[LANGUAGE_NONE][0]['target_id'],
      ),
    ),
  );
}

function _ed_answer_get_user_comments($nid)
{
  global $user;
  $query = db_select('comment', 'c');
  $query->fields('c', array('cid'))
    ->condition('c.uid', $user->uid)
    ->condition('c.nid', $nid);
  $result = $query->execute()->fetchCol();
  return $result;
}

/**
 * Implements hook_comment_insert().
 */
function ed_answer_comment_insert($comment)
{
  if ($comment->node_type == 'comment_node_ed_answer') {


    $node = node_load($comment->nid);
    $task = node_load($node->field_ref_to_task[LANGUAGE_NONE][0]['target_id']);
    $recipient = user_load($node->uid);
    $teacher = user_load($comment->uid);
    $teacher_fullname = edidaktikum_get_full_name_for_user_account($teacher);
    $language = user_preferred_language($recipient);
    $params = array(
      'fullname' => $teacher_fullname,
      'taskname' => $task->title,
      'answerurl' => url('node/' . $node->nid, array('absolute' => TRUE)),
      'status' => $comment->ed_answer_status[LANGUAGE_NONE][0]['value'],
    );

    $isgadmin = ed_answer_is_group_manager($node->og_group_ref[LANGUAGE_NONE][0]['target_id']);

    if ($isgadmin && empty($comment->pid)) {
      $wrapper = entity_metadata_wrapper('node', $comment->nid);

      $wrapper->ed_answer_last_status->set(array('status' => $comment->ed_answer_status[LANGUAGE_NONE][0]['value'], 'grade' => $comment->ed_answer_grade[LANGUAGE_NONE][0]['value'], 'cid' => $comment->cid));

      $wrapper->save();
    }

    drupal_mail('ed_answer', 'answer_status_modified', $recipient->mail, $language, $params, EDIDAKTIKUM_NO_REPLY_EMAIL, TRUE);
  }
}

/**
 * Implements hook_mail().
 */
function ed_answer_mail($key, &$message, $params)
{
  if ('answer_status_modified' == $key) {
    $options = array('langcode' => $message['language']->language);
    switch ($params['status']) {
      case 'accepted':
        $action = t('accepted');
        break;
      case 'rejected':
        $action = t('rejected');
        break;
      case 'checked':
        $action = t('checked');
        break;
      case 'unchecked':
      default:
        $action = t('commented');
        break;
    }
    $message['subject'] = t('@fullname @action your answer to task @taskname', array('@fullname' => $params['fullname'], '@action' => $action, '@taskname' => $params['taskname']), $options);
    $message['body'][] = t('View your answer: @answerurl', array('@answerurl' => $params['answerurl']), $options);
  }
}

function ed_answer_is_group_manager($gid)
{
  global $user;
  $group = node_load($gid);
  if ($user->uid == $group->uid) {
    return true;
  }
  if (in_array(OG_ADMINISTRATOR_ROLE, og_get_user_roles('node', $gid, $user->uid, FALSE))) {
    return true;
  }
  if (in_array('administrator', $user->roles)) {
    return true;
  }
  return false;
}

function ed_answer_check_tid_parents($tid)
{
  $query = db_select('taxonomy_term_hierarchy', 't')
    ->condition('t.tid', $tid);
  $query->fields('t', array('parent'));
  $result = $query->execute()->fetchCol();
  return $result[0];
}


function ed_answer_check_tid_parent($tid)
{
  $query = db_select('taxonomy_term_hierarchy', 't')
    ->condition('t.tid', $tid);
  $query->fields('t', array('parent'));
  $result = $query->execute()->fetchCol();
  if ($result[0] == 0) {
    return false;
  } else {
    $tere = ed_answer_check_tid_parent($result[0]);
    if ($tere == 0) {
      return true;
    } else {
      ed_answer_check_tid_parent($result[0]);

    }
  }
}

/**
 * Implements hook_node_access().
 */
function ed_answer_node_access($node, $op, $account)
{
  $type = is_string($node) ? $node : $node->type;

  if ('ed_answer' === $type) {

    if ('view' == $op) {
      if (!(bool)$account->uid) {
        return NODE_ACCESS_DENY;
      }
    }

    if ('ed_answer' == $type && 'update' == $op) {
      // Prevent answer edit if task removed
      if (empty($node->field_ref_to_task[LANGUAGE_NONE])) {
        return NODE_ACCESS_DENY;
      } else if (!empty($node->field_ref_to_task[LANGUAGE_NONE][0]['target_id'])) {
        // This check is needed because panels states that reference exists
        // Need to make sure that references task is still there
        $task = node_load($node->field_ref_to_task[LANGUAGE_NONE][0]['target_id']);
        if (!$task) {
          return NODE_ACCESS_DENY;
        }
      }
    }

    if ('ed_answer' == $type && ($op == 'create' || $op == 'update')) {

      $reftotask = null;
      //Late submission case
      if (!is_string($node) && isset($node->field_ref_to_task)) {
        $reftotask = $node->field_ref_to_task[LANGUAGE_NONE][0]['target_id'];
      } else if (array_key_exists('field_ref_to_task', $_GET)) {
        $reftotask = $_GET['field_ref_to_task'];
      }


      if ($reftotask) {
        $wrapper = entity_metadata_wrapper('node', $reftotask);
        $is_strict = $wrapper->ed_task_field_strict_sub->value();


        if ($is_strict) {
          if (_is_late_submission($reftotask)) {
            return NODE_ACCESS_DENY;
          }
        }
      }

    }


  }


  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function ed_answer_ctools_plugin_api()
{
  list($module, $api) = func_get_args();
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ed_answer_ctools_plugin_directory($module, $plugin)
{
  if (('content_types' == $plugin && 'ctools' == $module)) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_node_validate().
 */
function ed_answer_node_validate($node, $form, &$form_state)
{
  if ('ed_answer' == $node->type && empty($node->nid)) {
    $account = $GLOBALS['user'];
    // Prevent validation success if user is not allowed
    // to answer referenced task
    $task = node_load($node->field_ref_to_task[LANGUAGE_NONE][0]['target_id']);
    if (!ed_task_can_user_answer_task($task, $account)) {
      form_set_error('ref_to_task', t('You are not allowed to answer this task.'));
    }

    // Creating multiple answers is not allowed
    if (_is_task_answered($task->nid)) {
      form_set_error('ref_to_task', t('You have already answered this task.'));
    }
  }
}

/**
 * Implements hook_form_comment_form_alter
 */
function ed_answer_form_comment_form_alter(&$form, &$form_state)
{


  if (!empty($form_state['comment']->nid) && $form_state['comment']->node_type == 'comment_node_ed_answer' && empty($form_state['comment']->pid)) {

    $form['#validate'][] = 'ed_answer_max_points_validate';

    $wrapper = entity_metadata_wrapper('node', $form_state['comment']->nid);

    $last_status = $wrapper->ed_answer_last_status->value();

    if (!empty($last_status['status'])) {
      $form['ed_answer_status'][LANGUAGE_NONE]['#default_value'] = $last_status['status'];
    }

    if (!empty($last_status['grade'])) {
      $form['ed_answer_grade'][LANGUAGE_NONE][0]['value']['#default_value'] = $last_status['grade'];
    }
  } else if (!empty($form_state['comment']->pid)) {
    //reply to comment
    $form['ed_answer_status']['#access'] = false;
    $form['ed_answer_grade']['#access'] = false;

  }

  //disable wysiwyg
  $form['comment_body']['und'][0]['#wysiwyg'] = FALSE;
}

function ed_answer_max_points_validate($form, &$form_state)
{


  $wrapper_answer = entity_metadata_wrapper('node', $form_state['comment']->nid);
  $task_id = $wrapper_answer->field_ref_to_task->raw();


  $wrapper = entity_metadata_wrapper('node', $task_id);
  $max_points = $wrapper->ed_task_field_max_points->value();

  if (!empty($max_points)) {
    if ($form_state['values']['ed_answer_grade'][LANGUAGE_NONE][0]['value'] > $max_points) {
      form_set_error('max_points', t('Maximum points allowed for this task is %max_points', array('%max_points' => $max_points)));
    }
  }


}

function ed_answer_comment_view_alter(&$build)
{
  $gid = $build['#node']->og_group_ref[LANGUAGE_NONE][0]['target_id'];
  $group = node_load($gid);
  $admins = _ed_cluster_get_group_admins($group, true);

  if (!empty($build['comment_body'])) {
    if (!in_array($build['comment_body']['#object']->uid, $admins)) {
      $build['ed_answer_status']['#access'] = FALSE;
      $build['ed_answer_grade']['#access'] = FALSE;


    }elseif(!empty($build['comment_body']['#object']->pid)){
      $build['ed_answer_status']['#access'] = FALSE;
      $build['ed_answer_grade']['#access'] = FALSE;
    }
  }

  if (!empty($build['ed_answer_status']['#items'][0]['value'])) {
    $wrapper = entity_metadata_wrapper('node', $build['ed_answer_status']['#object']->nid);
    $last_status = $wrapper->ed_answer_last_status->value();

    if ($build['ed_answer_status']['#object']->cid == $last_status['cid']) {
      $build['comment_body'][0]['#prefix'] = '<div id="highlight-comment"></div>';
    }
  }
}


function ed_answer_node_presave($node)
{
  if ($node->type == 'ed_answer') {
    if (!empty($node->original)) {
      if ($node->original->ed_field_content[LANGUAGE_NONE][0]['value'] != $node->ed_field_content[LANGUAGE_NONE][0]['value']) {
        $node->ed_answer_last_status[LANGUAGE_NONE][0] = array('status' => 'unchecked', 'grade' => null, 'cid' => null);
      }
    }

  }
}


/*
 * Implements hook_field_info
 */
function ed_answer_field_info()
{
  return array(
    'ed_answer_last_status' => array(
      'label' => t('Answer status'),
      'description' => t('This field stores status of an answer'),
      'default_widget' => 'ed_answer_last_status_widget',
      'default_formatter' => 'ed_answer_last_status_default',
      'property_type' => 'ed_answer_last_status', // we add the propert type here
      'property_callbacks' => array('ed_answer_last_status_property_info_callback'), // we add the callback
    ),

    'ed_answer_time_spent' => array(
      'label' => t('Palun hinda ülesandele kulunud aega'),
      'description' => t('This field stores time spent for answer'),
      'default_widget' => 'ed_answer_time_spent_widget',
      'default_formatter' => 'ed_answer_time_spent_default',
      'property_type' => 'ed_answer_time_spent', // we add the propert type here
      'property_callbacks' => array('ed_answer_time_spent_property_info_callback'), // we add the callback
    ),
  );
}


function ed_answer_last_status_property_info_callback(&$info, $entity_type, $field, $instance, $field_type)
{
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];

  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  unset($property['query callback']);

  $property['property info']['cid'] = array(
    'type' => 'integer',
    'label' => t('cid'),
    'setter callback' => 'entity_property_verbatim_set',
  );

  $property['property info']['status'] = array(
    'type' => 'text',
    'label' => t('status'),
    'setter callback' => 'entity_property_verbatim_set',
  );

  $property['property info']['grade'] = array(
    'type' => 'number_integer',
    'label' => t('grade'),
    'setter callback' => 'entity_property_verbatim_set',
  );

}


function ed_answer_time_spent_property_info_callback(&$info, $entity_type, $field, $instance, $field_type)
{
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];

  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  unset($property['query callback']);

  $property['property info']['hours'] = array(
    'type' => 'number_integer',
    'label' => t('hours'),
    'setter callback' => 'entity_property_verbatim_set',
    'getter callback' => 'entity_property_verbatim_get',
  );

  $property['property info']['mins'] = array(
    'type' => 'number_integer',
    'label' => t('mins'),
    'setter callback' => 'entity_property_verbatim_set',
    'getter callback' => 'entity_property_verbatim_get',
  );

}

/**
 * Implements hook_field_widget_info().
 */
function ed_answer_field_widget_info()
{

  return array(
    'ed_answer_last_status_widget' => array(
      'label' => t('Default'),
      'field types' => array('ed_answer_last_status'),
    ),

    'ed_answer_time_spent_widget' => array(
      'field types' => array('ed_answer_time_spent'),
      'label' => t('Ed answer time spent widget'),
    ),

  );
}


/**
 * Implements hook_field_formatter_info().
 */
function ed_answer_field_formatter_info()
{

  return array(
    'ed_answer_last_status_default' => array(
      'label' => t('Default'),
      'field types' => array('ed_answer_last_status'),

    ),
    'ed_answer_time_spent_default' => array(
      'label' => t('Default'),
      'field types' => array('ed_answer_time_spent'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ed_answer_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display)
{

  $element = array();
  switch ($display['type']) {
    case 'ed_answer_last_status_default' :

      foreach ($items as $delta => $item) {
        if (isset($item['cid'])) {
          $element[$delta]['#markup'] = $item['cid'] . ' ' . $item['status'] . ' ' . $item['grade'];
        }
      }
      break;
    case 'ed_answer_time_spent_default' :
      foreach ($items as $delta => $item) {
        if (isset($item['mins'])) {
          $element[$delta]['#markup'] = $item['hours'] + $item['mins'];
        }
      }
      break;
  }
  return $element;
}

/*
 * Implements hook_field_is_empty().
 */
function ed_answer_field_is_empty($item, $field)
{
  $temp = array_keys($field['columns']);
  $key = array_shift($temp);
  return empty($item[$key]);
}


/**
 * Implements hook_field_validate().
 */
function ed_answer_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors)
{

  switch ($instance['widget']['type']) {
    case 'ed_answer_last_status_widget' :

      // Loop through field items in the case of multiple values.
      foreach ($items as $delta => $item) {
        if (isset($item['cid']) && $item['cid'] != '') {
          if (strlen($item['url']) > 4000) {
            $errors[$field['field_name']][$langcode][$delta][] = array(
              'error' => 'ed_answer_invalid_status',
              'message' => t('%title: Comment id cannot be empty', array('%title' => $instance['label'])),
            );
          }
        }
      }
      break;
    case 'ed_answer_time_spent_widget' :
      foreach ($items as $delta => $item) {
        if ($item['mins'] != '' && !is_numeric($item['mins'])) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'ed_answer_invalid_time_spebt',
            'message' => t('%title must be a number.', array('%title' => $instance['label'])),
          );
        }
        if ($item['hours'] != '' && !is_numeric($item['hours'])) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'ed_answer_invalid_time_spebt',
            'message' => t('%title must be a number.', array('%title' => $instance['label'])),
          );
        }
      }
      break;
  }


}

/**
 * Implements hook_field_widget_form().
 */
function ed_answer_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element)
{

  $element = array();


  switch ($instance['widget']['type']) {
    case 'ed_answer_last_status_widget' :
      $element['cid'] = array(
        '#type' => 'hidden',
        '#title' => t('Comment id'),
        '#size' => 1,
        '#attributes' => array('maxlength' => 10),
      );
      $element['status'] = array(
        '#type' => 'hidden',
        '#title' => t('Status'),
        '#size' => 10,
        '#attributes' => array('maxlength' => 10),
      );
      $element['grade'] = array(
        '#type' => 'hidden',
        '#title' => t('Grade'), '#size' => 10,
        '#attributes' => array('maxlength' => 10),
      );
      break;
    case 'ed_answer_time_spent_widget' :
      $element['hours'] = array(
        '#type' => 'textfield',
        '#title' => t('Hours'),
        '#size' => 1,
        '#required' => true,
      );
      $element['mins'] = array(
        '#type' => 'textfield',
        '#title' => t('Minutes'),
        '#size' => 1,
        '#required' => true,
      );
      break;

  }

  return $element;
}

/**
 * Implements hook_preprocess_panels_pane().
 */
function ed_answer_preprocess_panels_pane(&$variables)
{
  $pane_config = $variables['pane']->configuration;
  if (!empty($pane_config['override_title'])) {
    $variables['title'] = t($pane_config['override_title_text']);
  }
}
