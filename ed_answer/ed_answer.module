<?php

require_once('ed_answer_functions.inc');

function ed_answer_node_info() {
  $items['ed_answer'] = array(
    'name' => t('Answer'),
    'type' => 'ed_answer',
    'base' => 'node_content',
    'description' => t('description'),
    'has_title' => 0,
    'body_label' => t('body_label'),
  );
  return $items;
}

function ed_answer_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_node_view().
 */
function ed_answer_node_view($node, $view_mode, $langcode){
  if ('ed_answer' == $node->type) {

    // Override node title with our logic
    $node->title = ed_get_answer_title($node);
    if ('full' == $view_mode) {
      drupal_set_title($node->title);

    }elseif ('teaser' == $view_mode) {
      $teaser = true;
      $node->title = ed_get_answer_title($node, $teaser);

    }
  }
}


function ed_add_js_to_answer_form($form_element, &$form_state) {
	drupal_add_library('system','ui.slider');

	//To get the field value of the existing node use
	//$form_element['#node']->ed_field_difficulty_feedb);

	if(!empty($form_state['values']['ed_field_difficulty_feedb'])){
		$initial_difficulty_feedb = $form_state['values']['ed_field_difficulty_feedb'][LANGUAGE_NONE];

	}else{
		$initial_difficulty_feedb = 1;
	}

	if(!empty($form_state['values']['ed_field_satisf_feedb'])){
		$initial_satisf_feedb = $form_state['values']['ed_field_satisf_feedb'][LANGUAGE_NONE];
	}else{
		$initial_satisf_feedb = 4;
	}

	if(!empty($form_state['values']['ed_field_time_eff_feedb'])){
		$initial_time_eff_feedb = $form_state['values']['ed_field_time_eff_feedb'][LANGUAGE_NONE];
	}else{
		$initial_time_eff_feedb = 1;
	}


	$settings = array('initial_difficulty_feedb' => $initial_difficulty_feedb, 'initial_satisf_feedb' => $initial_satisf_feedb, 'initial_time_eff_feedb' => $initial_time_eff_feedb);


	drupal_add_js(array('ed_answer' => $settings), array('type' => 'setting'));
	drupal_add_js(drupal_get_path('module', 'ed_answer') . '/js/ed_answer_js.js');


	return $form_element;

}

/**
 * Implements hook_form_alter().
 */
function ed_answer_form_alter(&$form, &$form_state, $form_id){

  if( $form_id == 'ed_answer_node_form' ) {
    if (empty($form['#node']->nid)) {
      drupal_set_title(t('Create Answer'));
    }



	  $form['#after_build'] = array('ed_add_js_to_answer_form');


    if(isset($form['#node']->field_ref_to_task)){
      $reftotask = $form['#node']->field_ref_to_task['und'][0]['target_id'];
    }
    else{
      $reftotask = $_GET['field_ref_to_task'];
    }
    $node = node_load($reftotask);


    // Get all groups this task belongs to, get user groups, make intersection of them and put these groups
    // as default values, so that the members offered to user would be valid. Hide groups choice at all
    if ( isset($node->og_group_ref[LANGUAGE_NONE]) && is_array($node->og_group_ref[LANGUAGE_NONE]) && count($node->og_group_ref[LANGUAGE_NONE]) > 0 ) {

      $task_groups_ids = array_map(function($ref) {
        return $ref['target_id'];
      }, $node->og_group_ref[LANGUAGE_NONE]);

      $user_groups_ids = og_get_groups_by_user();

      $selected_groups_ids = array_intersect($task_groups_ids, $user_groups_ids['node']);

      if ( $selected_groups_ids ) {
        $form['og_group_ref']['und'][0]['default']['#value'] = $selected_groups_ids;
      }

      // This solution prevents the Specify user box from showing the right selected group members we got before;
      // it forces to show all the members of groups this user belongs to
      //$form['og_group_ref']['und'][0]['default']['#type'] = "hidden";


    }else{
      drupal_set_message(t('This task does not belong to any group'));
    }

    // Using this instead keeps the right selected groups and hence the members, but prevents from changing groups
    $form['og_group_ref']['#disabled'] = TRUE;



    //If this task is given to specific user, disable Specify user option in answer
    if ( isset($node->ed_field_to_group_member[LANGUAGE_NONE]) && is_array($node->ed_field_to_group_member[LANGUAGE_NONE]) && count($node->ed_field_to_group_member[LANGUAGE_NONE]) > 0 ) {
      $form['ed_field_to_group_member']['#disabled'] = TRUE;
    }


    $form['ed_field_content']['#weight'] = 1;
    $form['field_ref_to_task']['und']['#title'] = t('Answer To Task');
    $form['tabs'] = array(
      '#type' => 'vertical_tabs',
      '#weight' => 0,
    );
    $form['ed_answer_task'] = array(
      '#tree' => TRUE,
      '#type' => 'fieldset',
      '#title' => t('Task'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#group' => 'tabs',
    );
    $form['ed_answer_task']['task_title'] = array(
      '#type' => 'markup',
      '#markup' => '<h2>'. l($node->title, 'node/'.$reftotask).'</h2>',
      '#weight' => -1,
    );
    $task_content = field_get_items('node', $node, 'ed_field_content');
    $task_content_view = field_view_value('node', $node, 'ed_field_content', $task_content[0]);
    $form['ed_answer_task']['task_content'] = $task_content_view;



	  $form['ed_field_difficulty_feedb']['#prefix'] = '<div role="alert" class="alert alert-info feedback-notice"> '.t('Feedback is not personalised').'</div>';
	  $form['ed_field_difficulty_feedb'][LANGUAGE_NONE]['#default_value'] = 1;
	  $form['ed_field_time_eff_feedb'][LANGUAGE_NONE]['#default_value'] = 1;

    $form['ed_answer_task_cat'] = array(
      '#tree' => TRUE,
      '#type' => 'fieldset',
      '#title' => t('Category'),
      '#group' => 'tabs',
    );

    $form['ed_answer_task_cat']['category'] = array(
      '#tree' => TRUE,
      '#type' => 'container',
      '#prefix' => '<ul class="category-container">',
      '#suffix' => '</ul>',
    );
    $help = 0;
    if(!empty($cat_terms) && is_array($cat_terms)){
      foreach($cat_terms as $tid){
        $form['ed_answer_task_cat']['category'][$help] = array(
            '#type' => 'markup',
            '#markup' => t(l(t($tid['#options']['entity']->name), $tid['#href']).'<br />'),
        );
        if(ed_answer_check_tid_parents($tid['#options']['entity']->tid)==0){
          /*$form['test']['test2'][$help]['#prefix'] = '<li>';
            $form['test']['test2'][$help]['#suffix'] = '</li>';*/
        }else{
          $depth = 0;
          $flag = true;
          $parent = ed_answer_check_tid_parents($tid['#options']['entity']->tid);
          $form['ed_answer_task_cat']['category'][$help]['#prefix']='';
          $form['ed_answer_task_cat']['category'][$help]['#suffix']='';
          while($flag){
            if($parent==0){
              for($i = 0;$i<$depth;$i++){
                $form['ed_answer_task_cat']['category'][$help]['#prefix'].='<ul>';
              }
              $form['ed_answer_task_cat']['category'][$help]['#suffix'].='</ul>';
              $flag = false;
            }else{
              $depth++;
              $parent = ed_answer_check_tid_parents($parent);
            }
          }
        }
        $help++;
      }
    }

    $form['ed_answer_task_comp'] = array(
      '#tree' => TRUE,
      '#type' => 'fieldset',
      '#title' => t('Competence'),
      '#group' => 'tabs',
    );
    $form['ed_answer_task_comp']['competence'] = array(
      '#tree' => TRUE,
      '#type' => 'container',
      '#prefix' => '<ul class="competence-container">',
      '#suffix' => '</ul>',
    );

    $task_comp = field_get_items('node', $node, 'ed_field_competence');

    if ($task_comp) {
      foreach($task_comp as $competenceTerm){
        $comp_terms[] = field_view_value('node', $node, 'ed_field_competence', $competenceTerm);
      }

      $help2 = 0;
      foreach($comp_terms as $tid){
        $form['ed_answer_task_comp']['competence'][$help2] = array(
          '#type' => 'markup',
          '#markup' => t(l(t($tid['#options']['entity']->name), $tid['#href']).'<br />'),
        );
        if(ed_answer_check_tid_parents($tid['#options']['entity']->tid)!=0){
          $depth = 0;
          $flag = true;
          $parent = ed_answer_check_tid_parents($tid['#options']['entity']->tid);
          $form['ed_answer_task_comp']['competence'][$help2]['#prefix']='';
          $form['ed_answer_task_comp']['competence'][$help2]['#suffix']='';
          while($flag){
            if($parent==0){
              for($i = 0;$i<$depth;$i++){
                $form['ed_answer_task_comp']['competence'][$help2]['#prefix'].='<ul>';
              }
              $form['ed_answer_task_comp']['competence'][$help2]['#suffix'].='</ul>';
              $flag = false;
            }else{
              $depth++;
              $parent = ed_answer_check_tid_parents($parent);
            }
          }
        }
        $help2++;
      }
    }

  }else if($form_id == 'comment_node_ed_answer_form'){
    $isgadmin = ed_answer_is_group_manager($form['#node']->og_group_ref[LANGUAGE_NONE][0]['target_id']);
    if(!$isgadmin){
      $form['ed_answer_status']['#access'] = FALSE;
      $form['ed_answer_grade']['#access'] = FALSE;
    }else{
      $form['#submit'][] = 'ed_answer_redirect_to_taskmanager';
    }

    $form['ed_answer_grade']['und']['#prefix'] = $form['ed_answer_grade']['und']['#prefix'] . "<div data-grade_limiter>";
    $form['ed_answer_grade']['und']['#suffix'] = "</div>" . $form['ed_answer_grade']['und']['#suffix'];

  }

}

function ed_answer_redirect_to_taskmanager($form, &$form_state){
  $form_state['redirect'] = array(
    'node/'.$form['#node']->og_group_ref['und'][0]['target_id'].'/task-manager',
    array(
      'query' => array(
        'tasknid' => $form['#node']->field_ref_to_task[LANGUAGE_NONE][0]['target_id'],
      ),
    ),
  );
}


function _ed_answer_get_user_comments($nid){
  global $user;
  $query = db_select('comment', 'c');
  $query->fields('c', array('cid'))
      ->condition('c.uid', $user->uid)
      ->condition('c.nid', $nid);
  $result = $query->execute()->fetchCol();
  return $result;
}

/**
 * Implements hook_comment_insert().
 */
function ed_answer_comment_insert($comment){
  if($comment->node_type=='comment_node_ed_answer'){


    $node = node_load($comment->nid);
    $task = node_load($node->field_ref_to_task[LANGUAGE_NONE][0]['target_id']);
    $recipient = user_load($node->uid);
    $teacher = user_load($comment->uid);
    $teacher_fullname = edidaktikum_get_full_name_for_user_account($teacher);
    $language = user_preferred_language($recipient);
    $params = array(
      'fullname' => $teacher_fullname,
      'taskname' => $task->title,
      'answerurl' => url('node/' . $node->nid, array('absolute' => TRUE)),
      'status' => $comment->ed_answer_status[LANGUAGE_NONE][0]['value'],
    );

    $isgadmin = ed_answer_is_group_manager($node->og_group_ref[LANGUAGE_NONE][0]['target_id']);

    if($isgadmin){
      $wrapper = entity_metadata_wrapper('node', $comment->nid);

      $wrapper->ed_answer_last_status->set(array('status' => $comment->ed_answer_status[LANGUAGE_NONE][0]['value'], 'grade' => $comment->ed_answer_grade[LANGUAGE_NONE][0]['value'], 'cid' => $comment->cid));

      $wrapper->save();
    }

    drupal_mail('ed_answer', 'answer_status_modified', $recipient->mail, $language, $params, EDIDAKTIKUM_NO_REPLY_EMAIL, TRUE);
  }
}

/**
 * Implements hook_mail().
 */
function ed_answer_mail($key, &$message, $params){
  if ('answer_status_modified' == $key)  {
    $options = array('langcode' => $message['language']->language);
    switch($params['status']){
      case 'accepted':
        $action = t('accepted');
        break;
      case 'rejected':
        $action = t('rejected');
        break;
      case 'checked':
        $action = t('checked');
        break;
      case 'unchecked':
      default:
        $action = t('commented');
        break;
    }
    $message['subject'] = t('@fullname @action your answer to task @taskname', array('@fullname' => $params['fullname'],'@action' => $action, '@taskname' => $params['taskname']), $options);
    $message['body'][] = t('View your answer: @answerurl', array('@answerurl' => $params['answerurl']), $options);
  }
}

function ed_answer_is_group_manager($gid){
  global $user;
  $group = node_load($gid);
  if($user->uid == $group->uid){
    return true;
  }
  if(in_array(OG_ADMINISTRATOR_ROLE, og_get_user_roles('node', $gid, $user->uid, FALSE))){
    return true;
  }
  if (in_array('administrator', $user->roles)) {
    return true;
  }
  return false;
}

function ed_answer_check_tid_parents($tid){
  $query = db_select('taxonomy_term_hierarchy', 't')
    ->condition('t.tid', $tid);
  $query->fields('t', array('parent'));
  $result = $query->execute()->fetchCol();
  return $result[0];
}



function ed_answer_check_tid_parent($tid){
  $query = db_select('taxonomy_term_hierarchy', 't')
    ->condition('t.tid', $tid);
  $query->fields('t', array('parent'));
  $result = $query->execute()->fetchCol();
  if( $result[0]==0){
    return false;
  }else{
    $tere = ed_answer_check_tid_parent($result[0]);
    if($tere == 0){
      return true;
    }else{
      ed_answer_check_tid_parent($result[0]);

    }
  }
}

/**
 * Implements hook_node_access().
 */
function ed_answer_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

 if ('ed_answer' === $type) {

   if('view' == $op){
     if (!(bool) $account->uid) {
       return NODE_ACCESS_DENY;
     }
   }

   if ('ed_answer' == $type && 'update' == $op) {
     // Prevent answer edit if task removed
     if (empty($node->field_ref_to_task[LANGUAGE_NONE])) {
       return NODE_ACCESS_DENY;
     } else if (!empty($node->field_ref_to_task[LANGUAGE_NONE][0]['target_id'])) {
       // This check is needed because panels states that reference exists
       // Need to make sure that references task is still there
       $task = node_load($node->field_ref_to_task[LANGUAGE_NONE][0]['target_id']);
       if (!$task) {
         return NODE_ACCESS_DENY;
       }
     }
   }

   if ('ed_answer' == $type && ($op == 'create' || $op == 'update')){

     $reftotask = null;
     //Late submission case
     if(!is_string($node) && isset($node->field_ref_to_task)){
       $reftotask = $node->field_ref_to_task[LANGUAGE_NONE][0]['target_id'];
     }else if (array_key_exists('field_ref_to_task', $_GET)){
       $reftotask = $_GET['field_ref_to_task'];
     }


     if($reftotask){
       $wrapper = entity_metadata_wrapper('node', $reftotask);
       $is_strict = $wrapper->ed_task_field_strict_sub->value();


       if ($is_strict) {
         if(_is_late_submission($reftotask)){
           return NODE_ACCESS_DENY;
         }
       }
     }

   }


  }


  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function ed_answer_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ed_answer_ctools_plugin_directory($module, $plugin) {
  if(('content_types' == $plugin && 'ctools' == $module)) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_node_validate().
 */
function ed_answer_node_validate($node, $form, &$form_state) {
  if ('ed_answer' == $node->type && empty($node->nid)) {
    $account = $GLOBALS['user'];
    // Prevent validation success if user is not allowed
    // to answer referenced task
    $task = node_load($node->field_ref_to_task[LANGUAGE_NONE][0]['target_id']);
    if (!ed_task_can_user_answer_task($task, $account)) {
      form_set_error('ref_to_task', t('You are not allowed to answer this task.'));
    }

    // Creating multiple answers is not allowed
    if (_is_task_answered($task->nid)) {
      form_set_error('ref_to_task', t('You have already answered this task.'));
    }
  }
}

/**
 * Implements hook_form_comment_form_alter
 */
function ed_answer_form_comment_form_alter(&$form, &$form_state) {


  if(!empty($form_state['node']->field_ref_to_task)){


    $wrapper = entity_metadata_wrapper('node', $form_state['node']->nid);

    $last_status = $wrapper->ed_answer_last_status->value();

    if(!empty($last_status['status'])){
      $form['ed_answer_status'][LANGUAGE_NONE]['#default_value'] = $last_status['status'];
    }

    if(!empty($last_status['grade'])){
      $form['ed_answer_grade'][LANGUAGE_NONE][0]['value']['#default_value'] = $last_status['grade'];
    }
  }

  //disable wysiwyg
	$form['comment_body']['und'][0]['#wysiwyg'] = FALSE;
}

function ed_answer_comment_view_alter(&$build){
  $gid = $build['#node']->og_group_ref[LANGUAGE_NONE][0]['target_id'];
  $group = node_load($gid);
  $admins = _ed_cluster_get_group_admins($group, true);

  if(!empty($build['comment_body'])){
    if(!in_array($build['comment_body']['#object']->uid, $admins)){
      $build['ed_answer_status']['#access'] = FALSE;
      $build['ed_answer_grade']['#access'] = FALSE;

    }
  }

  if(!empty($build['ed_answer_status']['#items'][0]['value'])){
    $wrapper = entity_metadata_wrapper('node', $build['ed_answer_status']['#object']->nid);
    $last_status = $wrapper->ed_answer_last_status->value();

    if($build['ed_answer_status']['#object']->cid == $last_status['cid']){
      $build['comment_body'][0]['#prefix'] = '<div id="highlight-comment"></div>';
    }
  }
}



//function ed_answer_comment_load($comments){
//
//
//  foreach ($comments as $comment){
//    if($comment->node_type == 'comment_node_ed_answer'){
//
//      $wrapper = entity_metadata_wrapper('node', $comment->nid);
//      $last_status = $wrapper->ed_answer_last_status->value();
//
//
//      if($comment->cid == $last_status['cid']){
//        dpm($comment);
//      }
//
//    }
//  }
//
//}


function ed_answer_node_presave($node){
  if($node->type == 'ed_answer'){
    if($node->original->ed_field_content[LANGUAGE_NONE][0]['value'] != $node->ed_field_content[LANGUAGE_NONE][0]['value']){
      $node->ed_answer_last_status[LANGUAGE_NONE][0] = array('status' => 'unchecked', 'grade' => null, 'cid' => null);

    }
  }
}


/*
 * Implements hook_field_info
 */
function ed_answer_field_info() {
  return array (
      'ed_answer_last_status' => array (
          'label' => t('Answer status'),
          'description' => t('This field stores status of an answer'),
          'default_widget' => 'ed_answer_last_status_widget',
          'default_formatter' => 'ed_answer_last_status_default',
          'property_type' => 'ed_answer_last_status', // we add the propert type here
          'property_callbacks' => array('ed_answer_last_status_property_info_callback'), // we add the callback
      ),
  );
}


function ed_answer_last_status_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];

  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  unset($property['query callback']);

  $property['property info']['cid'] = array(
      'type' => 'integer',
      'label' => t('cid'),
      'setter callback' => 'entity_property_verbatim_set',
  );

  $property['property info']['status'] = array(
      'type' => 'text',
      'label' => t('status'),
      'setter callback' => 'entity_property_verbatim_set',
  );

  $property['property info']['grade'] = array(
      'type' => 'number_integer',
      'label' => t('grade'),
      'setter callback' => 'entity_property_verbatim_set',
  );

}

/**
 * Implements hook_field_widget_info().
 */
function ed_answer_field_widget_info() {

  return array(
      'ed_answer_last_status_widget' => array(
          'label' => t('Default'),
          'field types' => array('ed_answer_last_status'),
      ),
  );
}


/**
 * Implements hook_field_formatter_info().
 */
function ed_answer_field_formatter_info() {

  return array(
      'ed_answer_last_status_default' => array(
          'label' => t('Default'),
          'field types' => array('ed_answer_last_status'),
      ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ed_answer_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();
  switch ($display['type']) {
    case 'ed_answer_last_status_default' :

      foreach ($items as $delta => $item) {
        if (isset($item['cid'])) {
          $element[$delta]['#markup'] = $item['cid'] . ' ' . $item['status'] . ' ' . $item['grade'];
        }
      }
      break;
  }
  return $element;
}

/*
 * Implements hook_field_is_empty().
 */
function ed_answer_field_is_empty($item, $field) {
  $temp = array_keys($field['columns']);
  $key = array_shift($temp);
  return empty($item[$key]);
}


/**
 * Implements hook_field_validate().
 */
function ed_answer_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // Loop through field items in the case of multiple values.
  foreach ($items as $delta => $item) {
    if (isset($item['cid']) && $item['cid'] != '') {
      if (strlen($item['url']) > 4000) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'ed_answer_invalid_status',
            'message' => t('%title: Comment id cannot be empty', array('%title' => $instance['label'])),
        );
      }
    }
  }

}

/**
 * Implements hook_field_widget_form().
 */
function ed_answer_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $element['cid'] = array(
      '#type' => 'hidden',
      '#title' => t('Comment id'),
      '#required' => $element['#required'],
      '#size' => 1,
      '#attributes' => array('maxlength' => 10),
  );
  $element['status'] = array(
      '#type' => 'hidden',
      '#title' => t('Status'),
      '#required' => $element['#required'],
      '#size' => 10,
      '#attributes' => array('maxlength' => 10),
  );
  $element['grade'] = array(
      '#type' => 'hidden',
      '#title' => t('Grade'),
      '#required' => $element['#required'],
      '#size' => 10,
      '#attributes' => array('maxlength' => 10),
  );

  return $element;
}
