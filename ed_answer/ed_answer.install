<?php

require_once('ed_answer_functions.inc');

/*
 * Implements hook_install().
 */

function ed_answer_install()
{
  node_types_rebuild();
  $types = node_type_get_types();

  /*foreach(_ed_answer_installed_fields() as $field) {
    field_create_field($field);
  }*/

  // Created field using drupal UI. Then used field_info_field() and field_info_instance() to generate code.

  field_create_field(array(
    'translatable' => '0',
    'entity_types' => array(),
    'settings' => array(
      'target_type' => 'node',
      'handler' => 'base',
      'handler_settings' => array(
        'target_bundles' => array(
          'ed_task' => 'ed_task',
        ),
        'sort' => array(
          'type' => 'none',
        ),
        'behaviors' => array(
          'views-select-list' => array(
            'status' => 0,
          ),
        ),
      ),
    ),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
      'module' => 'field_sql_storage',
      'active' => '1',
      'details' => array(
        'sql' => array(
          'FIELD_LOAD_CURRENT' => array(
            'field_data_field_ref_to_task' => array(
              'target_id' => 'field_ref_to_task_target_id',
            ),
          ),
          'FIELD_LOAD_REVISION' => array(
            'field_revision_field_ref_to_task' => array(
              'target_id' => 'field_ref_to_task_target_id',
            ),
          ),
        ),
      ),
    ),
    'foreign keys' => array(
      'node' => array(
        'table' => 'node',
        'columns' => array(
          'target_id' => 'nid',
        ),
      ),
    ),
    'indexes' => array(
      'target_id' => array(
        'target_id',
      ),
    ),
    'field_name' => 'field_ref_to_task',
    'type' => 'entityreference',
    'module' => 'entityreference',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
    'deleted' => '0',
    'columns' => array(
      'target_id' => array(
        'description' => 'The id of the target entity.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'bundles' => array(
      'node' => array(
        'ed_answer',
      ),
    ),
  ));
  field_create_instance(array(
    'label' => 'Task',
    'widget' => array(
      'weight' => '-1',
      'type' => 'entityreference_autocomplete_tags',
      'module' => 'entityreference',
      'active' => 1,
      'settings' => array(
        'match_operator' => 'CONTAINS',
        'size' => 60,
        'path' => '',
      ),
    ),
    'settings' => array(
      'behaviors' => array(
        'prepopulate' => array(
          'status' => 1,
          'action' => 'disable',
          'action_on_edit' => 1,
          'fallback' => 'redirect',
          'skip_perm' => '0',
          'og_context' => 0,
        ),
      ),
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'entityreference_label',
        'settings' => array(
          'link' => TRUE,
        ),
        'module' => 'entityreference',
        'weight' => 3,
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
      'featured' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'default_value_function' => 'entityreference_prepopulate_field_default_value',
    'field_name' => 'field_ref_to_task',
    'entity_type' => 'node',
    'bundle' => 'ed_answer',
    'deleted' => '0',
  ));
  foreach (_ed_answer_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = 'ed_answer';
    field_create_instance($instance);
  }

  foreach (_ed_answer_installed_comment_instances() as $instance) {
    $instance['entity_type'] = 'comment';
    $instance['bundle'] = 'comment_node_ed_answer';
    field_create_instance($instance);
  }

  ed_answer_add_og_audience();

  ed_answer_node_add_field_g_drive_file();

  ed_answer_node_add_field_difficulty_feedb();

  ed_answer_node_add_time_eff_feedb();

  ed_answer_node_add_field_satisf_feedb();

  ed_answer_create_field_last_status();

  ed_answer_node_add_field_last_status();
}

function ed_answer_add_og_audience()
{
  if (function_exists('og_create_field') && defined('OG_AUDIENCE_FIELD')) {
    $og_field = og_fields_info(OG_AUDIENCE_FIELD);
    $og_field['instance']['label'] = t('Group');
    $og_field['instance']['required'] = TRUE;
    $og_field['instance']['settings']['behaviors']['prepopulate'] = array(
      'status' => TRUE,
      'action' => 'none',
      'fallback' => 'none',
      'skip_perm' => FALSE,
    );
    og_create_field(OG_AUDIENCE_FIELD, 'node', 'ed_answer', $og_field);
  }
}

/**
 * Adds ed_g_drive_file field instance
 */
function ed_answer_node_add_field_g_drive_file()
{
  $field_name = 'ed_g_drive_file';
  $field = field_info_field($field_name);
  if (!empty($field) && !field_info_instance('node', $field_name, 'ed_answer')) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'node',
      'bundle' => 'ed_answer',
      'label' => t('Failid Google Drive-st'),
      'description' => '',
      'widget' => array(
        'settings' => array(
          'rows' => 1,
        ),
      ),
      'required' => FALSE,
      'display' => array(
        'default' => array(
          'label' => 'hidden',
        ),
        'featured' => array(
          'label' => 'hidden',
        ),
      )
    );
    field_create_instance($instance);
  }
}


/**
 * Creates and adds difficulty_feedb field
 */
function ed_answer_node_add_field_difficulty_feedb()
{
  $field_name = 'ed_field_difficulty_feedb';
  if (!field_info_field($field_name)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'list_integer',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values' => array(
          1 => '',
          2 => '',
          3 => '',
          4 => '',
          5 => '',
        ),
      ),

    );
    field_create_field($field);
  }


  if (!field_info_instance('node', 'ed_field_difficulty_feedb', 'ed_answer')) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'node',
      'bundle' => 'ed_answer',
      'label' => t('Palun hinda ülesande raskusastet!'),
      'description' => t("1 – Lihtne ülesanne; 4 – Keeruline ülesanne"),
      'default_value' => null,
      'required' => TRUE,
      'weight' => '-1',
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'settings' => array(),
        'type' => 'options_buttons'
      ),
    );
    field_create_instance($instance);
  }

}


/**
 * Creates and adds satisf_feedb field
 */
function ed_answer_node_add_field_satisf_feedb()
{
  $field_name = 'ed_field_satisf_feedb';
  if (!field_info_field($field_name)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'list_integer',
      'cardinality' => array(1),
      'settings' => array(
        'allowed_values' => array(
          1 => '',
          2 => '',
          3 => '',
          4 => '',
          5 => '',
        ),
      ),

    );
    field_create_field($field);
  }


  if (!field_info_instance('node', 'ed_field_satisf_feedb', 'ed_answer')) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'node',
      'bundle' => 'ed_answer',
      'label' => t('Palun hinda rahulolu oma sooritusega'),
      'description' => t('Arvan, et sain ülesandega hästi hakkama 1 – ei ole üldse nõus, 5 – olen täiesti nõus.'),
      'default_value' => null,
      'required' => TRUE,
      'widget' => array(
        'active' => 3,
        'module' => 'options',
        'settings' => array(),
        'type' => 'options_buttons'
      ),
    );
    field_create_instance($instance);
  }

}


/**
 * Creates and adds time_eff_feedb field
 */
function ed_answer_node_add_time_eff_feedb()
{
  $field_name = 'ed_field_time_eff_feedb';
  if (!field_info_field($field_name)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'list_integer',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values' => array(
          1 => '',
          2 => '',
          3 => '',
          4 => '',
        ),
      ),

    );
    field_create_field($field);
  }


  if (!field_info_instance('node', 'ed_field_time_eff_feedb', 'ed_answer')) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'node',
      'bundle' => 'ed_answer',
      'label' => t('Aeg/Pingutus'),
      'description' => t("1 – Oli lihtne, ei võtnud palju aega; 4 – Oli raske, võttis palju aega"),
      'default_value' => null,
      'required' => TRUE,
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'settings' => array(),
        'type' => 'options_buttons'
      ),
    );
    field_create_instance($instance);
  }

}


/**
 * Creates and adds answer_emotions field
 */
function ed_answer_node_add_answer_emotions()
{
  $field_name = 'ed_field_answer_emotions';
  if (!field_info_field($field_name)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'list_text',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
        'allowed_values' => _ed_answer_emotions_list(),
      ),

    );
    field_create_field($field);
  }


  if (!field_info_instance('node', 'ed_field_answer_emotions', 'ed_answer')) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'node',
      'bundle' => 'ed_answer',
      'label' => t('Milliseid emotsioone ülesande sooritamisel kogesid?'),
      'description' => t("Vali kõik sobivad!"),
      'default_value' => null,
      'required' => TRUE,
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'settings' => array(),
        'type' => 'options_buttons'
      ),
    );
    field_create_instance($instance);
  }

}


function _ed_answer_emotions_list()
{
  $statuses = array(
    'curiosity' => t('Uudishimu'),
    'confusion' => t('Segadus'),
    'anxiety' => t('Ärevus'),
    'boredom' => t('Igavus'),
    'surprise' => t('Üllatus'),
    'frustration' => t('Frustratsioon'),
    'enjoyment' => t('Rõõm'),
  );
  return $statuses;
}


function ed_answer_node_add_field_time_spent()
{
  $field_name = 'ed_answer_field_time_spent';

  if (!field_info_field($field_name)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'ed_answer_time_spent',
      'cardinality' => 1,
      'locked' => FALSE,
    );
    field_create_field($field);
  }

  if (!empty($field) && !field_info_instance('node', $field_name, 'ed_answer')) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'node',
      'bundle' => 'ed_answer',
      'label' => t('Palun hinda ülesandele kulunud aega'),
      'description' => '',
      'required' => TRUE,

    );
    field_create_instance($instance);
  }
}


function ed_answer_uninstall()
{
  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.type', 'ed_answer')
    ->execute();

  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  node_delete_multiple($nids);


  field_delete_field('field_ref_to_task');

  field_delete_field('ed_g_drive_file');

  field_delete_field('ed_field_difficulty_feedb');

  field_delete_field('ed_field_satisf_feedb');

  field_delete_field('ed_field_time_eff_feedb');

  field_delete_field('ed_answer_last_status');


  $instances = field_info_instances('node', 'ed_answer');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  $comment_instances = field_info_instances('comment', 'comment_node_ed_answer');
  foreach ($comment_instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  node_type_delete('ed_answer');
  field_purge_batch(1000);

}

/**
 * Adds private comment field instance to ed_answer comment.
 */
function ed_answer_update_7100(&$sandbox)
{
  $instances = _ed_answer_installed_comment_instances();
  $instance = $instances['ed_field_private_comment'];
  $instance['entity_type'] = 'comment';
  $instance['bundle'] = 'comment_node_ed_answer';
  field_create_instance($instance);
}

/**
 * Add to_group_member field instance to ed_answer.
 */
function ed_answer_update_7101(&$sandbox)
{
  $instances = _ed_answer_installed_instances();
  $instance = $instances[ED_FIELD_TO_GROUP_MEMBER];
  $instance['entity_type'] = 'node';
  $instance['bundle'] = 'ed_answer';
  if (!field_info_instance($instance['entity_type'], ED_FIELD_TO_GROUP_MEMBER, $instance['bundle'])) {
    field_create_instance($instance);
  }
}

/**
 * Add Status field to ed_answer comment.
 */

function ed_answer_update_7109(&$sandbox)
{
  $field = _ed_answer_create_status_field();
  field_create_field($field);
  $instance = _ed_answer_create_status_field_instance();
  field_create_instance($instance);
}

function _ed_answer_create_status_field()
{
  $field = array(
    'field_name' => 'ed_answer_status',
    'label' => t('Type'),
    'type' => 'list_text',
    'cardinality' => 1,
    'foreign keys' => array(),
    'indexes' => array(
      'value' => array(
        0 => 'value',
      ),
    ),
    'module' => 'list',
    'settings' => array(
      'allowed_values' => _ed_answer_status_list(),
    ),
  );
  return $field;
}


function _ed_answer_status_list()
{
  $statuses = array(
    'unchecked' => t('Unchecked'),
    'rejected' => t('Rejected'),
    'accepted' => t('Accepted'),
    'checked' => t('Checked'),
  );
  return $statuses;
}

function _ed_answer_create_status_field_instance()
{
  $instance = array(
    'field_name' => 'ed_answer_status',
    'label' => t('Status'),
    'entity_type' => 'comment',
    'bundle' => 'comment_node_ed_answer',
    'description' => t(''),
    'default_value' => array(array('value' => 'unchecked')),
    'widget' => array(
      'active' => 1,
      'module' => 'options',
      'settings' => array(),
      'type' => 'options_select',
    ),
  );
  return $instance;
}


function ed_answer_create_field_last_status()
{
  $field_name = 'ed_answer_last_status';
  if (!field_info_field($field_name)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'ed_answer_last_status',
      'cardinality' => 1,
    );
    field_create_field($field);
  }
}

function ed_answer_node_add_field_last_status()
{
  $field_name = 'ed_answer_last_status';
  $field = field_info_field($field_name);
  if (!empty($field) && !field_info_instance('node', $field_name, 'ed_answer')) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'node',
      'bundle' => 'ed_answer',
      'label' => t('Last status'),
      'description' => '',
      'widget' => array(
        'settings' => array(
          'rows' => 1,
        ),
      ),
      'required' => FALSE,
      'display' => array(
        'default' => array(
          'label' => 'hidden',
        ),
        'featured' => array(
          'label' => 'hidden',
        ),
      )
    );
    field_create_instance($instance);
  }
}


/**
 * Implements hook_field_schema().
 * Used by ed_answer_last_status field
 */
function ed_answer_field_schema($field)
{

  switch ($field['type']) {
    case 'ed_answer_last_status':
      $schema = array(
        'columns' => array(
          'cid' => array(
            'type' => 'int',
            'length' => 10,
            'not null' => false,
          ),
          'status' => array(
            'type' => 'varchar',
            'length' => 255,
            'not null' => false,
          ),
          'grade' => array(
            'type' => 'int',
            'length' => 10,
            'not null' => false,
          ),
        ),

      );
      break;
    case 'ed_answer_time_spent':
      $schema = array(
        'columns' => array(
          'mins' => array(
            'type' => 'int',
            'length' => 10,
            'not null' => false,
          ),
        ),

      );
      break;
  }

  return $schema;

}


/**
 * Update ed_status comment field instance to translatable.
 */
function ed_answer_update_7110(&$sandbox)
{
  field_update_instance(array(
    'label' => 'Status',
    'description' => '',
    'default_value' => array(
      array(
        'value' => 'unchecked',
      ),
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'options',
      'settings' => array(),
      'type' => 'options_select',
      'weight' => 3,
    ),
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'i18n_list_default',
        'weight' => '2',
        'settings' => array(),
        'module' => 'i18n_field',
      ),
    ),
    'required' => FALSE,
    'field_name' => 'ed_answer_status',
    'entity_type' => 'comment',
    'bundle' => 'comment_node_ed_answer',
    'deleted' => '0',
  ));
}

/**
 * Makes comment body field in ed_answer not required.
 */
function ed_answer_update_7111(&$sandbox)
{
  $instances = field_info_instances('comment', 'comment_node_ed_answer');
  $instances['comment_body']['required'] = FALSE;

  field_update_instance($instances['comment_body']);

}

/**
 * Add grade field to ed_answer
 */
function ed_answer_update_7112(&$sandbox)
{
  $field = array(
    'field_name' => 'ed_answer_grade',
    'type' => 'number_integer',
    'module' => 'ed_answer',
    'cardinality' => 1,
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'ed_answer_grade',
    'label' => t('Grade'),
    'entity_type' => 'comment',
    'bundle' => 'comment_node_ed_answer',
  );
  field_create_instance($instance);

}


/**
 * Adds ed_g_drive_file field instance to ed_answer
 */
function ed_answer_update_7113(&$sandbox)
{
  ed_answer_node_add_field_g_drive_file();

}

/**
 * Add checked value to ed_answer_status field
 */
function ed_answer_update_7115(&$sandbox)
{
  $info = field_info_field('ed_answer_status');
  $values = &$info['settings']['allowed_values'];
  $values['checked'] = 'Checked';
  field_update_field($info);
}

/**
 * Add na value to ed_answer_status field
 */
//function ed_task_update_7135(&$sandbox) {
//
//  // Get the field info
//  $info = field_info_field('ed_answer_status');
//
//  // Get a reference to the values
//  $values = &$info['settings']['allowed_values'];
//
//  // Manipulate the values
//  $values['na'] = 'Not Applicable';
//
//  // Save the field
//  field_update_field($info);
//
//}


/**
 * Create and add feedback related fields to ed_answer
 */
function ed_answer_update_7116(&$sandbox)
{


  ed_answer_node_add_field_difficulty_feedb();

  ed_answer_node_add_time_eff_feedb();

  ed_answer_node_add_field_satisf_feedb();


}


/**
 * Create and add ed_answer_last_status field
 * @param $sandbox
 */
function ed_answer_update_7117(&$sandbox)
{

  ed_answer_create_field_last_status();

  ed_answer_node_add_field_last_status();

}


/**
 * Migration to populate answer statuses from comments
 * @param $sandbox
 */
function ed_answer_update_7118(&$sandbox)
{
  // Initialize batch
  if (!isset($sandbox['max'])) {

    $sandbox['max'] = db_query("SELECT COUNT(n.nid)
         FROM {node} n
           JOIN {field_data_field_ref_to_task} rt ON rt.entity_id = n.nid
         WHERE n.status = 1")->fetchField();

    $sandbox['progress'] = 0;
    $sandbox['updated'] = 0;
    $sandbox['current_node'] = -1;

    if (empty($sandbox['max'])) {
      $sandbox['#finished'] = 1;
      return t('Nothing updated');
    }
  }


  $q = db_select('field_data_field_ref_to_task', 'rt');
  $q->join('node', 'n', 'n.nid = rt.entity_id AND n.status = 1');
  $q->fields('n', ['nid', 'created', 'changed']);
  $q->orderBy('n.nid', 'ASC')
    ->where('n.nid > :nid', array(
      ':nid' => $sandbox['current_node'],
    ));;

  $answers = $q
    ->extend('PagerDefault')
    ->limit(50)
    ->execute();


  foreach ($answers as $answer) {


    $admin_uids = [];

    $wrapper = entity_metadata_wrapper('node', $answer->nid);

    if ($wrapper->__isset('og_group_ref')) {
      $group_refs = $wrapper->og_group_ref->raw();

      foreach ($group_refs as $group_ref) {

        $members = ed_get_group_members($group_ref, false, true, false);

        foreach ($members as $member) {
          if (in_array(OG_ADMINISTRATOR_ROLE, $member['roles'])) array_push($admin_uids, $member['uid']);
        }

      }
    }

    //  get all comments regarding the answer node ordered backwards chronologically
    $query_comments = db_select('comment', 'c');
    $query_comments->condition('nid', $answer->nid);
    $query_comments->fields('c', ['uid', 'cid']);
    $query_comments->orderBy('created', 'DESC');

    $query_comments->leftJoin('field_data_ed_answer_grade', 'fg', 'fg.entity_id = c.cid');
    $query_comments->fields('fg', ['ed_answer_grade_value']);

    $query_comments->leftJoin('field_data_ed_answer_status', 'fs', 'fs.entity_id = c.cid');
    $query_comments->fields('fs', ['ed_answer_status_value']);

    $comments = $query_comments->execute()->fetchAll(PDO::FETCH_ASSOC);
    unset($query_comments);


    //  get last status from an admin role user
    $answer->status = 'unchecked';
    $answer->grade = null;

    for ($i = 0; $i < count($comments); $i++) {
      if ($comments[$i]['ed_answer_status_value'] != NULL && in_array($comments[$i]['uid'], $admin_uids)) {
        $answer->status = $comments[$i]['ed_answer_status_value'];
        //add grade if available
        if ($comments[$i]['ed_answer_status_value'] != NULL) {
          $answer->grade = $comments[$i]['ed_answer_grade_value'];
        }

        $wrapper = entity_metadata_wrapper('node', $answer->nid);
        $wrapper->ed_answer_last_status->set(array('status' => $answer->status, 'grade' => $answer->grade, 'cid' => $comments[$i]['cid']));
        $wrapper->save();

        $sandbox['updated']++;
        break;
      }
    }
    $sandbox['current_node'] = $answer->nid;
    $sandbox['progress']++;
  }


  // Set the "finished" status, to tell batch engine whether this function
  // needs to run again.
  $sandbox['#finished'] = ($sandbox['progress'] >= $sandbox['max']) ? TRUE : ($sandbox['progress'] / $sandbox['max']);

  if ($sandbox['#finished']) {
    return t('Updated @updated answers out of @count answers in the system', ['@count' => $sandbox['progress'], '@updated' => $sandbox['updated']]);
  }


}

/**
 * Adds correct language translations for comment fields.
 */
function ed_answer_update_7119(&$sandbox)
{
  $instances = field_info_instances('comment', 'comment_node_ed_answer');

  $instances['ed_answer_grade']['label'] = t('Hinne');
  $instances['ed_answer_status']['label'] = t('Staatus');
  $instances['ed_field_private_comment']['label'] = t('Privaatne kommentaar');
  $instances['comment_body']['label'] = t('Kommentaar');

  field_update_instance($instances['ed_answer_grade']);
  field_update_instance($instances['ed_answer_status']);
  field_update_instance($instances['ed_field_private_comment']);
  field_update_instance($instances['comment_body']);
}

/**
 * Translate allowed values and also use the correct method
 */
function ed_answer_update_7120(&$sandbox)
{
  $info = field_info_field('ed_answer_status');

  $info['settings']['allowed_values'] = null;
  $info['settings']['allowed_values_function'] = '_ed_answer_allowed_values';

  field_update_field($info);
}

function _ed_answer_allowed_values()
{
  return [
    'unchecked' => t('Kontrollimata'),
    'rejected' => t('Tagasi lükatud'),
    'accepted' => t('Kinnitatud'),
    'checked' => t('Kontrollitud'),
  ];
}

/**
 * Translate some fields
 */
function ed_answer_update_7121(&$sandbox)
{
  $instances = field_info_instances('node', 'ed_answer');

  $instances['ed_field_to_group_member']['label'] = t('Määra kasutaja');

  $instances['ed_field_content']['label'] = t('Sisu');
  $instances['og_group_ref']['label'] = t('Grupp');

  field_update_instance($instances['ed_field_content']);
  field_update_instance($instances['ed_field_to_group_member']);
  field_update_instance($instances['og_group_ref']);
}


/**
 * Add new fields for answer feedback
 * @param $sandbox
 */
function ed_answer_update_7122(&$sandbox)
{
  field_delete_field('ed_field_time_eff_feedb');
  field_delete_instance('ed_field_time_eff_feedb');

  $instances = field_info_instances('node', 'ed_answer');
  $instances['ed_field_satisf_feedb']['description'] = t('Palun hinda rahulolu oma sooritusega! 1 – ei ole üldse nõus, 5 – olen täiesti nõus.');
  field_update_instance($instances['ed_field_satisf_feedb']);

  ed_answer_node_add_answer_emotions();
  ed_answer_node_add_field_time_spent();

}

function ed_answer_update_7123(&$sandbox)
{

  field_delete_field('ed_field_satisf_feedb');
  field_delete_instance('ed_field_satisf_feedb');

  field_delete_field('ed_field_difficulty_feedb');
  field_delete_instance('ed_field_difficulty_feedb');

  ed_answer_node_add_field_satisf_feedb();
  ed_answer_node_add_field_difficulty_feedb();

}

/**
 * Updating translations
 * @param $sandbox
 * @throws FieldException
 */
function ed_answer_update_7124(&$sandbox)
{

  $instances = field_info_instances('node', 'ed_answer');
  $instances['ed_field_difficulty_feedb']['label'] = t('Please rate the difficulty of the task!');
  field_update_instance($instances['ed_field_difficulty_feedb']);

  $instances = field_info_instances('node', 'ed_answer');
  $instances['ed_field_satisf_feedb']['label'] = t('Please rate satisfaction with your perfomance!');
  field_update_instance($instances['ed_field_satisf_feedb']);

}

/**
 * Updating ed_answer_field_time_spent field to conatin default value 0
 * @param $sandbox
 * @throws FieldException
 */
function ed_answer_update_7127(&$sandbox)
{

  $sandbox['updated'] = 0;
  // A message to display on screen when the function is finished

  // Your own query to get the node id (nid) and the field value you need
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'))
    ->condition('n.type', 'ed_answer')
    ->condition('n.status', 1);
  $query->join('field_data_ed_field_difficulty_feedb', 'diff', 'diff.entity_id = n.nid');

  $nids_answers = $query->execute()->fetchCol();


  // Loop through each row item in the results
  foreach ($nids_answers as $record) {

    // Load the node to update
    $node = node_load($record);

    // Set the field value
    if (empty($node->ed_answer_field_time_spent)) {
      $node->ed_answer_field_time_spent[LANGUAGE_NONE][0]['mins'] = 0;

      // Optional lines to make this change a new revision
      $node->revision = 1;
      $node->log = 'This node was programmatically updated on ' . date('c');

      // Save the updated node
      //node_save($node);
      $sandbox['updated'] += 1;
    }

  }

  return t('Updated @updated answers', ['@updated' => $sandbox['updated']]);


}
