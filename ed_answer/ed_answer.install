<?php

require_once('ed_answer_functions.inc');

/*
 * Implements hook_install().
 */

function ed_answer_install() {
  node_types_rebuild();
  $types = node_type_get_types();

  /*foreach(_ed_answer_installed_fields() as $field) {
    field_create_field($field);
  }*/

  // Created field using drupal UI. Then used field_info_field() and field_info_instance() to generate code.

  field_create_field(array(
    'translatable' => '0',
    'entity_types' => array(),
    'settings' => array(
      'target_type' => 'node',
      'handler' => 'base',
      'handler_settings' => array(
        'target_bundles' => array(
          'ed_task' => 'ed_task',
        ),
        'sort' => array(
          'type' => 'none',
        ),
        'behaviors' => array(
          'views-select-list' => array(
            'status' => 0,
          ),
        ),
      ),
    ),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
      'module' => 'field_sql_storage',
      'active' => '1',
      'details' => array(
        'sql' => array(
          'FIELD_LOAD_CURRENT' => array(
            'field_data_field_ref_to_task' => array(
              'target_id' => 'field_ref_to_task_target_id',
            ),
          ),
          'FIELD_LOAD_REVISION' => array(
            'field_revision_field_ref_to_task' => array(
              'target_id' => 'field_ref_to_task_target_id',
            ),
          ),
        ),
      ),
    ),
    'foreign keys' => array(
      'node' => array(
        'table' => 'node',
        'columns' => array(
          'target_id' => 'nid',
        ),
      ),
    ),
    'indexes' => array(
      'target_id' => array(
        'target_id',
      ),
    ),
    'field_name' => 'field_ref_to_task',
    'type' => 'entityreference',
    'module' => 'entityreference',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
    'deleted' => '0',
    'columns' => array(
      'target_id' => array(
        'description' => 'The id of the target entity.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'bundles' => array(
      'node' => array(
        'ed_answer',
      ),
    ),
  ));
  field_create_instance(array(
    'label' => 'Task',
    'widget' => array(
      'weight' => '-1',
      'type' => 'entityreference_autocomplete_tags',
      'module' => 'entityreference',
      'active' => 1,
      'settings' => array(
        'match_operator' => 'CONTAINS',
        'size' => 60,
        'path' => '',
      ),
    ),
    'settings' => array(
      'behaviors' => array(
        'prepopulate' => array(
          'status' => 1,
          'action' => 'disable',
          'action_on_edit' => 1,
          'fallback' => 'redirect',
          'skip_perm' => '0',
          'og_context' => 0,
        ),
      ),
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'entityreference_label',
        'settings' => array(
          'link' => TRUE,
        ),
        'module' => 'entityreference',
        'weight' => 3,
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
      'featured' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'default_value_function' => 'entityreference_prepopulate_field_default_value',
    'field_name' => 'field_ref_to_task',
    'entity_type' => 'node',
    'bundle' => 'ed_answer',
    'deleted' => '0',
  ));
  foreach(_ed_answer_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = 'ed_answer';
    field_create_instance($instance);
  }

  foreach (_ed_answer_installed_comment_instances() as $instance) {
    $instance['entity_type'] = 'comment';
    $instance['bundle'] = 'comment_node_ed_answer';
    field_create_instance($instance);
  }

  ed_answer_add_og_audience();
}

function ed_answer_add_og_audience() {
  if(function_exists('og_create_field') && defined('OG_AUDIENCE_FIELD')) {
    $og_field = og_fields_info(OG_AUDIENCE_FIELD);
    $og_field['instance']['label'] = t('Group');
    $og_field['instance']['required'] = TRUE;
    $og_field['instance']['settings']['behaviors']['prepopulate'] = array(
      'status' => TRUE,
      'action' => 'none',
      'fallback' => 'none',
      'skip_perm' => FALSE,
    );
    og_create_field(OG_AUDIENCE_FIELD, 'node', 'ed_answer', $og_field);
  }
}


function ed_answer_uninstall() {
  $result = db_select('node','n')
    ->fields('n', array('nid'))
    ->condition('n.type', 'ed_answer')
    ->execute();

  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  node_delete_multiple($nids);


  field_delete_field('field_ref_to_task');


  $instances = field_info_instances('node', 'ed_answer');
  foreach($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  $comment_instances = field_info_instances('comment', 'comment_node_ed_answer');
  foreach($comment_instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  node_type_delete('ed_answer');
  field_purge_batch(1000);

}

/**
 * Adds private comment field instance to ed_answer comment.
 */
function ed_answer_update_7100(&$sandbox) {
  $instances = _ed_answer_installed_comment_instances();
  $instance = $instances['ed_field_private_comment'];
  $instance['entity_type'] = 'comment';
  $instance['bundle'] = 'comment_node_ed_answer';
  field_create_instance($instance);
}

/**
 * Add to_group_member field instance to ed_answer.
 */
function ed_answer_update_7101(&$sandbox) {
  $instances = _ed_answer_installed_instances();
  $instance = $instances[ED_FIELD_TO_GROUP_MEMBER];
  $instance['entity_type'] = 'node';
  $instance['bundle'] = 'ed_answer';
  if (!field_info_instance($instance['entity_type'], ED_FIELD_TO_GROUP_MEMBER, $instance['bundle'])) {
    field_create_instance($instance);
  }
}

/**
 * Add Status field to ed_answer comment.
 */

function ed_answer_update_7109(&$sandbox){
  $field = _ed_answer_create_status_field();
  field_create_field($field);
  $instance = _ed_answer_create_status_field_instance();
  field_create_instance($instance);
}

function _ed_answer_create_status_field(){
  $field = array(
    'field_name' => 'ed_answer_status',
	  'label' => t('Type'),
	  'type' => 'list_text',
	  'cardinality' => 1,
	  'foreign keys' => array(),
	  'indexes' => array(
	    'value' => array(
	      0 => 'value',
	    ),
	  ),
	  'module' => 'list',
	  'settings' => array(
	    'allowed_values' => _ed_answer_status_list(),
	  ),
  );
  return $field;
}



function _ed_answer_status_list(){
  $statuses = array(
      'unchecked' => t('Unchecked'), 
      'rejected' => t('Rejected'), 
      'accepted' => t('Accepted'),
    );
  return $statuses;
}

function _ed_answer_create_status_field_instance(){
  $instance = array(
    'field_name' => 'ed_answer_status',
	  'label' => t('Status'),
    'entity_type' => 'comment',
    'bundle' => 'comment_node_ed_answer',
	  'description' => t(''),
	  'default_value' => array(array('value' => 'unchecked')),
	  'widget' => array(
	    'active' => 1,
	    'module' => 'options',
	    'settings' => array(),
	    'type' => 'options_select',
	  ),
  );
  return $instance;
}

