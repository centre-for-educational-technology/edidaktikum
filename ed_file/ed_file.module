<?php

/**
 * @file
 * eDidaktikum file module.
 */

/**
 * Implements hook_menu().
 */
function ed_file_menu() {
  $items['dashboard/files'] = array(
    'title' => t('Files'),
    'page callback' => 'ed_file_listing_page',
    'access callback' => 'user_is_logged_in',
    'weight' => 10,
    'menu_name' => 'ed-dashboard-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_views_api().
 */
function ed_file_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ed_file') . '/includes/views',  
  );
}

function ed_file_menu_breadcrumb_alter(&$active_trail, $item) {
  //error_log("alter breadcrumb");

  //error_log(print_r($active_trail, true));
  /*$query_parameters = drupal_get_query_parameters();
  $folder = null;
  if (isset($query_parameters['folder'])) {
    $folder = $query_parameters['folder'];
  } 
  
  if (!drupal_is_front_page()) {
    $end = end($active_trail);
    if ($item['href'] == $end['href']) {
      $end['in_active_trail'] = false;
      $active_trail[] = $end;
    }
  }*/

  /*$active_trail []= array(
    'link_title' => 'kala',
  );*/

}

/**
 * Adds folder url to breadcrumbs if a reference to parent exists.
 * Please note that the process goes in reverse order.
 * @param $breadcrumb
 *  The breadcrumb in reverse order so far
 * @folder
 *   Folder of file node
 * @return
 *   array with new breadcrumb pushed (please note that the order is reversed)
 */
function ed_file_add_folder_to_breadcrumb($breadcrumb, $folder) {
  if ($folder->ed_file_folder_ref) {
    $folder_id = $folder->ed_file_folder_ref['und'][0]['target_id'];
    $folder = node_load($folder_id);
    $breadcrumb[] = l($folder->title, 'dashboard/files', array('query' => array('folder' => $folder->nid)));
    $breadcrumb = ed_file_add_folder_to_breadcrumb($breadcrumb, $folder);
  }
  return $breadcrumb;
}

/**
 * Returns breadcrumb HTML for file and folder.
 * Uses theme_breadcrumb for that.
 * @param $node
 *   The node for file or folder. Might be left empty.
 * @return
 *   HTML produced by theme_breadcrumb.
 */
function ed_file_and_folder_breadcrumb($node = NULL) {
  $breadcrumb = array();
  if ($node) {
    $breadcrumb[] = $node->title;
    $breadcrumb = ed_file_add_folder_to_breadcrumb($breadcrumb, $node);
  }
  $breadcrumb[] = l('Files', 'dashboard/files');
  // Breadcrumbs are in reverse order, need to change positioning
  $breadcrumb = array_reverse($breadcrumb);

  return theme_breadcrumb(array('breadcrumb' => $breadcrumb));
}

/**
 * Uses hook_node_view.
 */
function ed_file_node_view($node, $view_mode, $langcode) {
  if ('full' == $view_mode) {
    switch($node->type) {
    case 'ed_file':
      $node->content['bread-crumb'] = array(
        '#type' => 'markup',
        '#weight' => -1,
        '#markup' => ed_file_and_folder_breadcrumb($node),
      );
      break;
    case 'ed_file_folder':
      $node->content['bread-crumb'] = array(
        '#type' => 'markup',
        '#weight' => -1,
        '#markup' => ed_file_and_folder_breadcrumb($node),
      );
      break;
    }
  }
}

/**
 * Files listing page.
 */
function ed_file_listing_page() {
  menu_tree_set_path('main-menu', 'dashboard');

  $query_parameters = drupal_get_query_parameters();
  $folder = null;
  if (isset($query_parameters['folder'])) {
    $folder_id = $query_parameters['folder'];
    $folder = node_load($folder_id);  
  } 
  $url_parameters = array();
  if ($folder) { 
    $url_parameters = array('query' => array('ed_file_folder_ref' => $folder->nid));
  }
  
  $content = array();

  $add_file_url = l(t('file'), 'node/add/ed-file', $url_parameters);
  $add_file_folder_url = l(t('folder'), 'node/add/ed-file-folder', $url_parameters);
  $content['add-new-container'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('ed-add-new-node', 'ed-add-new-ed-file', 'ed-add-new-ed-folder'),
    ),
  );
  $content['add-new-container']['add-new'] = array(
    '#type' => 'markup',
    '#markup' => t('Add new !file or !folder', array('!file' => $add_file_url, '!folder' => $add_file_folder_url)),
  );

  $content['bread-crumb'] = array(
    '#type' => 'markup',
    '#markup' => ed_file_and_folder_breadcrumb($folder),
  );

  $header = array(
    array(
      'data' => '',
    ),
    array(
      'data' => t('Title'),
      'field' => 'n.title',
      'sort' => 'asc',
    ), 
    array(
      'data' => t('Type'),
    ),
    array(
      'data' => t('Changed'),
      'field' => 'n.changed',
      'sort' => 'desc',
    ),
    array(
      'data' => '',
    ),
  );


  $rows = array();
  //$files = node_load_multiple(ed_file_get_all_files());
  $files = ed_file_get_all_files_and_folders($header);
  foreach ($files as $file) {
    $file_type = ed_file_get_type($file);
    $icon_class = ed_file_get_icon_class($file_type);
    $file_url = l($file->title, 'node/' . $file->nid);
    if ($file->type == 'ed_file_folder') {
      $file_url = l($file->title, 'dashboard/files/', array('query' => array('folder' => $file->nid)));
    }
    $rows[] = array(
      'data' => array(
        'icon' => "<span class='ed-file-icon {$icon_class}'></span>",
        'title' => $file_url,
        'type' => $file_type,
        'changed' => format_date($file->changed, 'short'),
        'actions' => l(t('Edit'), 'node/' . $file->nid . '/edit'),
      ),
    );
  }
  if (!empty($rows)) {
    $content['table'] = array(
      '#theme' => 'table',
      '#attributes' => array(
        'class' => array('ed-files-table'),
      ),
      '#rows' => $rows,
      '#header' => $header,
    );
    $content['pager'] = array('#theme' => 'pager');
  }
  return $content;
}

function ed_file_get_type($node) {
  if ($node->type == 'ed_file_folder') {
    return "folder";
  } else if ($node->type == 'ed_file') {
    $nid = $node->nid;
    $full_node = node_load($nid);
    $file_upload_field = field_get_items('node', $full_node, 'ed_file_field_file_upload');
    $mimetype = $file_upload_field[0]['filemime'];
    return $mimetype; 
  }
  return "";
}

function ed_file_get_icon_class($mimetype) {
  if ($mimetype == 'text/plain') {
    return "ed-file-icon-txt";
  }
  return 'ed-file-icon-' . $mimetype;
}

/**
 * All files.
 */
function ed_file_get_all_files_and_folders($header) {

  $query_parameters = drupal_get_query_parameters();
  $folder_id = null;
  if (isset($query_parameters['folder'])) {
    $folder_id = $query_parameters['folder'];
  } 

  global $user;
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.type', array('ed_file', 'ed_file_folder'), 'in')
    ->condition('n.uid', $user->uid)
    ->addTag('node_access')
    ->range()
    ->extend('TableSort')
    ->extend('PagerDefault')->limit(10);  
  //->orderBy('n.created', 'DESC');

  $query->leftJoin('field_data_ed_file_folder_ref', 'folder', 'n.nid = folder.entity_id');
  $query->condition('folder.ed_file_folder_ref_target_id', $folder_id);
 
  $results = $query->fields('n', array('nid', 'title', 'type', 'changed'))->orderByHeader($header)->execute(); 
  return $results;
  $nids = $query->execute()->fetchCol();
  return $nids;
}

/**
 * Implements hook_form_alter().
 */
function ed_file_form_alter(&$form, &$form_state, $form_id) {
  if ('ed_file_node_form' == $form_id) {
    if (empty($form['#node']->nid)) {
      drupal_set_title(t('Create File'));
    }
  }
  if ('ed_file_folder_node_form' == $form_id) {
    if (empty($form['#node']->nid)) {
      drupal_set_title(t('Create Folder'));
    }
  }
}

/**
 * Implements hook_node_access().
 */
function ed_file_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

  if ('ed_file' == $type && 'view' == $op) {
    // Allow creator or admin
    if ($node->uid == $account->uid || in_array('administrator', $account->roles)) {
      return NODE_ACCESS_ALLOW;
    }

    $group_ref_set = (isset($node->og_group_ref[LANGUAGE_NONE]) && !empty($node->og_group_ref[LANGUAGE_NONE]));
    $to_user_set = (isset($node->ed_file_field_to_user[LANGUAGE_NONE]) && !empty($node->ed_file_field_to_user[LANGUAGE_NONE]));

    if ($group_ref_set || $to_user_set) {
      if ($group_ref_set) {
        foreach ($node->og_group_ref[LANGUAGE_NONE] as $single) {
          if (og_is_member('node', $single['target_id'], 'user', $account)) {
            return NODE_ACCESS_ALLOW;
          }
        }
      }

      if ($to_user_set) {
        if (array_search(array('target_id' => $account->uid), $node->ed_file_field_to_user[LANGUAGE_NONE]) !== FALSE) {
          return NODE_ACCESS_ALLOW;
        }
      }

      return NODE_ACCESS_DENY;
    }
  }

  return NODE_ACCESS_IGNORE;
}

