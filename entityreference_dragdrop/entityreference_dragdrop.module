<?php
/**
 * @file
 * Provides a Drag & Drop widget for entity-reference fields
 */

/**
 * Implements hook_field_widget_info().
 */
function entityreference_dragdrop_field_widget_info() {
  return array(
    'entityreference_dragdrop' => array(
      'label' => t('Drag & Drop'),
      'field types' => array('entityreference'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function entityreference_dragdrop_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // If we have more than one element per page,
  // this element-counter keeps them seperated
  // @@TODO: Actually make this work!
  static $ec = 0;

  drupal_add_library('system', 'ui.sortable');

  $handler = entityreference_get_selection_handler($field, $instance);
  $all_options = $handler->getReferencableEntities();

  $options = array();
  foreach ($all_options as $entity_type => $entity_ids) {
    foreach ($entity_ids as $id => $label) {
      $options[$id] = $label;
    }
  }

  // Build an array of selected items in id=>labal format
  $selected = array();
  if (isset($items)) {
    foreach ($items as $item) {
      if (array_key_exists($item['target_id'], $options)) {
        $selected[$item['target_id']] = $options[$item['target_id']];
        //$selected []= $item['target_id'];
      }
    }
  }
  //error_log(print_r($selected, true));

  $general_title = "<div><label>".$element['#title']."</label></div>";

  // Build HTML to represent available options that have not been selected
  $markup_available = '<ul data-ec="' . $ec . '" class="entityreference-dragdrop entityreference-dragdrop-available">';
  foreach ($all_options as $entity_type => $entity_ids) {
    $node_name = '<em>' . node_type_get_name($entity_type) . '</em>';
    //$markup_available .= $node_name;
    foreach ($entity_ids as $id => $label) {
      //$node = node_load($id);
      if (!array_key_exists($id, $selected)) {
      //if (!in_array($id, $selected)) { 
        $markup_available .= '<li data-ec="' . $ec . '" data-id="' . $id .'">' . $node_name .  $label . '</li>';
      }
    }
  }
  $markup_available .= '</ul>';

  // Build HTML to represent selected items
  $markup_selected  = '<ul data-ec="' . $ec . '" class="entityreference-dragdrop entityreference-dragdrop-selected">';
  foreach ($selected as $id => $label) {
    $node = node_load($id);
    $node_name = '<em>' . node_type_get_name($node->type) . '</em>';
    $markup_selected .=  '<li data-ec="' . $ec . '" data-id="' . $id . '">' . $node_name . $label . '</li>';
  }
  $markup_selected  .= '</ul>';

  $element += array(
    '#type' => 'hidden',
    '#default_value' => implode(',',array_keys($selected)),
    '#element_validate' => array('entityreference_dragdrop_element_validate'),
    '#suffix' => $general_title.$markup_available.$markup_selected.'<div class="entityreference-dragdrop-clear"></div>',
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'entityreference_dragdrop') . '/entityreference_dragdrop.js'),
      'css' => array(drupal_get_path('module', 'entityreference_dragdrop') . '/entityreference_dragdrop.css'),
    ),
    '#attributes' => array('class' => array('entityreference-dragdrop-values')),
  );

  // Increment the element-counter
  $ec++;

  return $element;
}


/**
 * Formats the value array properly
 */
function entityreference_dragdrop_element_validate($element, &$form_state) {
  $value = array();
  if (!empty($element['#value'])) {
    $ids = explode(',',$element['#value']);
    $value = array();

    foreach ($ids as $id) {
      $value[] = array(
        'target_id' => $id,
      );
    }
  }

  // Update the value of this element so the field can validate the product IDs.
  form_set_value($element, $value, $form_state);
}

// entities list display format

/**
 * Implement hook_field_formatter_info().
 */
function entityreference_dragdrop_field_formatter_info() {
  return array(
    'entityreference_entities_table' => array(
      'label' => t('Entities table'),
      'field types' => array('entityreference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function entityreference_dragdrop_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  
  $rows = array();
  if ($display['type'] == 'entityreference_entities_table') {

    foreach ($items as $delta => $item) {
      $node = node_load($item['target_id']);
      if ($node) {
        $wrapper = entity_metadata_wrapper('node', $item['target_id']);
        $rows[] = array(
          'data' => array(
            'type' => node_type_get_name($wrapper->type->value()),
            'title' => l($wrapper->label(), $wrapper->url->value()),
            'changed' => format_date($wrapper->changed->value(), 'short'),
          ),
        );
      }
      
      $header = array(
        array(
          'data' => t('Type'),
        ),
        array(
          'data' => t('Title'),
        ),
        array(
          'data' => t('Changed'),
        ),
      );

      if (!empty($rows)) {
        $element[0] = array(
          '#theme' => 'table',
          '#rows' => $rows,
          '#header' => $header,
        );
        return $element;
      }

    }

  }

}
